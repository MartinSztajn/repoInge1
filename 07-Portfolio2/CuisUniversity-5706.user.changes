

----STARTUP---- (15 May 2023 19:12:34) as C:\windows64\CuisUniversity-5706.image!


----End fileIn of C:\windows64\repoProfes\2023-1c\06-Portfolio1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:14:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:14:08'!
FAILURE!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864270 overrides: 16902254!
value 



	self subclassResponsibility ! !
!AccountTransaction class methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864283!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864308 overrides: 50864432!
value



	^ value! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864303!
initializeFor: aValue



	value := aValue ! !
!Deposit class methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864320!
for: aValue



	^ self new initializeFor: aValue ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864386!
balance



	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864372 overrides: 16920235!
initialize



	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864382!
transactions 



	^ transactions copy! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864377!
register: aTransaction



	transactions add: aTransaction 

! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864392!
hasRegistered: aTransaction



	^ transactions includes: aTransaction 

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864233!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions



	| deposit withdraw account |

	

	account := ReceptiveAccount new.

	deposit :=  Deposit for: 200.

	withdraw := Withdraw for: 50.

		

	self deny: (account hasRegistered: deposit).

	self deny: (account hasRegistered:withdraw).

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864210!
test04WithdrawValueMustBePositive 



	| account withdrawValue |

	

	account := ReceptiveAccount new.

	withdrawValue := 50.

	

	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864183!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 



	| account |

	

	account := ReceptiveAccount new.



	self assert: 0 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864200!
test03WithdrawDecreasesBalanceOnTransactionValue 



	| account |

	

	account := ReceptiveAccount new.

	Deposit register: 100 on: account.

	Withdraw register: 50 on: account.

		

	self assert: 50 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864220!
test05ReceptiveAccountKnowsRegisteredTransactions 



	| account deposit withdraw |

	

	account := ReceptiveAccount new.

	deposit := Deposit register: 100 on: account.

	withdraw := Withdraw register: 50 on: account.

		

	self assert: (account hasRegistered: deposit).

	self assert: (account hasRegistered: withdraw).

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864191!
test02DepositIncreasesBalanceOnTransactionValue 



	| account |

	

	account := ReceptiveAccount  new.

	Deposit register: 100 on: account.

		

	self assert: 100 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864245!
test07AccountKnowsItsTransactions 



	| account1 deposit1 |

	

	account1 := ReceptiveAccount new.

	

	deposit1 := Deposit register: 50 on: account1.

		

	self assert: 1 equals: account1 transactions size.

	self assert: (account1 transactions includes: deposit1).

! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864342 overrides: 50864432!
value



	^ value! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864337!
initializeFor: aValue



	value := aValue ! !
!Withdraw class methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864354!
for: aValue



	^ self new initializeFor: aValue ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:15:01'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:15:01'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:16:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:16:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:16:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:16:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:20:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:20:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:20:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:20:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:26:45'!
FAILURE!
!Deposit class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:30:11' overrides: 50864437!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !
!Withdraw class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:30:11' overrides: 50864437!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !

!methodRemoval: AccountTransaction class #register:on: stamp: 'Ms 5/15/2023 19:30:11'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction!
!Withdraw class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:30:35' prior: 50864655!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue negated.

	account register: transaction.

		

	^ transaction! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:30:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:30:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:30:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:30:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:30:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:30:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:30:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:31:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:31:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:31:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:31:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:31:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:31:30'!
FAILURE!

!methodRemoval: Withdraw class #register:on: stamp: 'Ms 5/15/2023 19:32:15'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue negated.

	account register: transaction.

		

	^ transaction!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:32:24'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !

!methodRemoval: Deposit class #register:on: stamp: 'Ms 5/15/2023 19:32:24'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:32:27'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:32:27'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/15/2023 19:36:20' prior: 50864501!
test04WithdrawValueMustBePositive 



	| account withdrawValue |

	account := ReceptiveAccount new.

	withdrawValue := 50.

	

	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value

! !
!Deposit class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:36:54' overrides: 50864759!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !
!Withdraw class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:36:54' overrides: 50864759!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !

!methodRemoval: AccountTransaction class #register:on: stamp: 'Ms 5/15/2023 19:36:54'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction!
!Withdraw class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:37:02' prior: 50864822!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue negated.

	account register: transaction.

		

	^ transaction! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:37:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:37:10'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:37:10'!
FAILURE!
!Deposit methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:37:54' prior: 50864449!
initializeFor: aValue

	value := aValue ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:11'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:11'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:38:40' prior: 50864569 overrides: 50864432!
value



	^ value abs ! !
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:38:45' prior: 50864445 overrides: 50864432!
value



	^ value abs! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:58'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:58'!
FAILURE!

!methodRemoval: Withdraw class #register:on: stamp: 'Ms 5/15/2023 19:40:12'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue negated.

	account register: transaction.

		

	^ transaction!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:40:20'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !

!methodRemoval: Deposit class #register:on: stamp: 'Ms 5/15/2023 19:40:20'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 19:41:03'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value absValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:41:02' prior: 50864856!
initializeFor: aValue

	value := aValue.
	absValue := aValue! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 19:41:28'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value absValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:41:27' prior: 50864573!
initializeFor: aValue



	value := aValue negated.
	absValue := aValue! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:41:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:41:40'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:42:07' prior: 50864920 overrides: 50864432!
value



	^ value ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:42:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:42:08'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:43:43' prior: 50865047 overrides: 50864432!
value
	^ absValue ! !
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:43:50' prior: 50864924 overrides: 50864432!
value



	^ absValue! !
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:44:11'!
realValue



	^ value! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:44:17'!
realValue



	^ value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 19:44:23' prior: 50864459!
balance



	^transactions sum: [ :aTransaction | aTransaction realValue ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 19:44:43'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 19:44:49'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:44:55' prior: 50865085 overrides: 50864432!
value



	^ value abs! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:45:02' prior: 50865081 overrides: 50864432!
value
	^ value abs ! !
!Withdraw methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:45:11' prior: 50865011!
initializeFor: aValue



	value := aValue negated.
! !
!Withdraw methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:45:13' prior: 50865160!
initializeFor: aValue

	value := aValue negated.
! !
!Deposit methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:45:18' prior: 50864998!
initializeFor: aValue

	value := aValue.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:46:45'!
balance



	^ value! !

!methodRemoval: Withdraw #realValue stamp: 'Ms 5/15/2023 19:46:45'!
realValue



	^ value!
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:46:56'!
balance



	^ value! !

!methodRemoval: Deposit #realValue stamp: 'Ms 5/15/2023 19:47:11'!
realValue



	^ value!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 19:47:26' prior: 50865095!
balance



	^transactions sum: [ :aTransaction | aTransaction balance ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!
!Withdraw methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:54:20' prior: 50865165!
initializeFor: aValue

	value := aValue.
! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:54:35' prior: 50865200!
balance



	^ value negated! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:10:40' prior: 50865213!
balance



	|acum|
	acum := 0.
	transactions do: [ :each |
		acum := acum + each balance
	]
	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:10:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:10:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:10:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:10:42'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:11:01' prior: 50865279!
balance



	|acum|
	acum := 0.
	transactions do: [ :each |
		acum := acum + each balance
	]

	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:11:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:11:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:11:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:11:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:11:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:11:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:38'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:11:52' prior: 50865312!
balance



	|acum|
	acum := 0.
	transactions do: [ :each |
		acum := acum + each balance.
	]

	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:11:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:11:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:11:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:11:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:11:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:11:53'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:12:17' prior: 50865360!
balance



	|acum|
	acum := 0.
	transactions do: [ :each |
		acum := acum + each balance.
	].

	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:14:41' prior: 50865393!
balance



	|acum|
	acum := 0.
	
	transactions do: [ :each |
		acum := each affectBalance: acum.
	]
	^acum.! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 20:15:37'!
affectBalance: balance



	^ balance! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 20:16:05' prior: 50865432!
affectBalance: balance



	^ balance - self value! !

!methodRemoval: Withdraw #balance stamp: 'Ms 5/15/2023 20:16:10'!
balance



	^ value negated!
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 20:16:34'!
affectBalance: balance

	^ balance + self value! !

!methodRemoval: Deposit #balance stamp: 'Ms 5/15/2023 20:16:38'!
balance



	^ value!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:16:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:16:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:16:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:16:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:16:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:16:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:16:46'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:16:58' prior: 50865426!
balance



	|acum|
	acum := 0.
	
	transactions do: [ :each |
		acum := each affectBalance: acum.
	].

	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 20:22:02'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 20:24:39'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'Ms 5/15/2023 20:24:33'!
test01
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: Portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:24:43'!
ERROR!
!Portfolio class methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:24:57'!
balance
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:25:08' prior: 50865563!
balance
	^0! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:25:18'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:26:36'!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAllLast: account.
	
	self assert: 0 equals: Portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:26:47' prior: 50865574!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: 0 equals: Portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:28:52' prior: 50865583!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account  equals: Portfolio accounts.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:29:00' prior: 50865592!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: Portfolio accounts.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:29:12' prior: 50865601!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: Portfolio accounts last.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:29:16'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:29:27'!
addAcount: account 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 20:30:28'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:30:25' prior: 50865621!
addAcount: account 
	accounts addLast: account.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:30:36'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:30:53'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:31:23' overrides: 16920235!
initialize
	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:31:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:31:25'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:31:25'!
ERROR!
!Portfolio class methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:31:39'!
accounts
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:33:11'!
accounts  
	^accounts! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:33:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:13'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:13'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:33:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:35'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:35'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:33:53' prior: 50865610!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: (Portfolio accounts) last.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:54'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:34:03'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:34:03'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:34:52' prior: 50865633!
addAcount: account 
	^accounts addLast: account.! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:34:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:34:56'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:34:56'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:35:30'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:35:30'!
ERROR!

!methodRemoval: Portfolio class #accounts stamp: 'Ms 5/15/2023 20:35:50'!
accounts
	self shouldBeImplemented.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:43:12' prior: 50865675!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: (portfolio accounts) last.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:43:13'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:43:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:43:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:43:22' prior: 50865711!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:43:23'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:43:23'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:43:23'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:44:29'!
test01PortfolioHaveZeroBalanceWhenItsCreated
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: Portfolio balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:44:37'!
test01
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: Portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:45:01' prior: 50865743!
test01PortfolioHaveZeroBalanceWhenItsCreated
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: Portfolio class #balance stamp: 'Ms 5/15/2023 20:45:25'!
balance
	^0!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 20:45:40'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:45:38' prior: 50865642 overrides: 16920235!
initialize
	balance := 0.

	accounts := OrderedCollection new.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:45:55'!
balance
	^balance! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:45:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:45:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:46:50'!
test02PortfolioHaveOnlyOneAccount
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!methodRemoval: PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:46:53'!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:46:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:46:59'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:49:05' prior: 50865756!
test01PortfolioHaveZeroBalanceWhenItsCreated
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals:  Portfolio new balance.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:49:07'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:49:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:49:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:49:14' prior: 50865813!
test01PortfolioHaveZeroBalanceWhenItsCreated
	
	self assert: 0 equals:  Portfolio new balance.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:49:16'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:49:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:49:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:55:17'!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:55:29' prior: 50865788!
test02PortfolioHaveOnlyOneAccount
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:55:30'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:55:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:55:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:55:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:56:41' prior: 50865847!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: 50.
	
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:57:01' prior: 50865882!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:57:32' prior: 50865893!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.! !

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:57:43'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:58:17' prior: 50865779!
balance
	^accounts sum:[ :each | each ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:58:18'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:58:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:58:18'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:59:00' prior: 50865920!
balance
	accounts isEmpty ifTrue: [^0]
	^100! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:01'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:59:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:01'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:18'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:59:26' prior: 50865935!
balance
	accounts isEmpty ifTrue: [^0].
	^100! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:59:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:27'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:59:40' prior: 50865953!
balance
	accounts isEmpty ifTrue: [^0].
	^accounts balance! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:59:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:43'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:43'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:59:52' prior: 50865968!
balance
	accounts isEmpty ifTrue: [^0].
	^accounts last balance! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:59:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:00:29'!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 21:00:33'!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:00:48'!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:01:15' prior: 50866025!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.! !

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:01:34' prior: 50866037!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	portfolio addAcount: account2.

	
	self assert: account balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:01:48' prior: 50866069!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	portfolio addAcount: account2.

	
	self assert: account balance + account2 balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:02:38' prior: 50866085!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	portfolio addAcount: account2.

	
	self assert: (account balance + account2 balance) equals: portfolio balance.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:03:50' prior: 50865987!
balance
	accounts sum: [ :each | each balance] ifEmpty: 0! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:04:14' prior: 50866117!
balance
	^accounts sum: [ :each | each balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:04:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:04:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:04:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:04:15'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:04:29' prior: 50866122!
balance
	^accounts sum: [ :each | each balance ] ifEmpty: [0]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:07:33'!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account|
	
	portfolio1 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 addAcount: account.
	
	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:08:04' prior: 50866146!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 addAcount: account.
	
	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance equals: portfolio2 balance.! !

!testRun: #PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:09:03' prior: 50866160!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account account2|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 300 on: account2.
	
	portfolio1 addAcount: account.
	
	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:09:16' prior: 50866196!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account account2|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 300 on: account2.
	
	portfolio1 addAcount: account.
	portfolio2 addAcount: account2.

	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance + account2 balance equals: portfolio2 balance.! !

!testRun: #PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:10:05'!
test02PortfolioHaveOnlyOneAsset
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!methodRemoval: PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:10:08'!
test02PortfolioHaveOnlyOneAccount
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:11:32' prior: 50866002!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:11:57'!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account account2|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 300 on: account2.
	
	portfolio1 addAcount: account.
	portfolio2 addAcount: account2.

	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance + account2 balance equals: portfolio2 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:15:57'!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	portfolio addAcount: account2.

	
	self assert: (account balance + account2 balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:17:26' prior: 50866302!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:17:28'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:17:37'!
hasRegistered: transaction 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:19:25' prior: 50866333!
hasRegistered: transaction 
	^accounts anySatisfy: [ :each | each hasRegistered: transaction ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:21:46' prior: 50866338!
hasRegistered: transaction 
	"^accounts anySatisfy: [ :each | each hasRegistered: transaction ]."
	accounts last hasRegistered: transaction.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:21:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:21:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:21:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:21:47'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:21:47'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:21:47'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:21:54' prior: 50866362!
hasRegistered: transaction 
	"^accounts anySatisfy: [ :each | each hasRegistered: transaction ]."
	^accounts last hasRegistered: transaction.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:22:28'!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:22:43' prior: 50866416!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:23:06' prior: 50866429!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio portfolio2 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:25:03' prior: 50866442!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.

	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio.

	
	self assert: (portfolio3 hasRegistered: transaction).
	self assert: (portfolio3 hasRegistered: transaction2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:25:25' prior: 50866456!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio.

	
	self assert: (portfolio3 hasRegistered: transaction).
	self assert: (portfolio3 hasRegistered: transaction2).! !

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:25:26'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:25:40' prior: 50866391!
hasRegistered: transaction 
	^accounts anySatisfy: [ :each | each hasRegistered: transaction ].
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:25:41'!
FAILURE!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:25:41'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:27:49' prior: 50866479!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.

	
	self assert: (portfolio3 hasRegistered: transaction).
	self assert: (portfolio3 hasRegistered: transaction2).! !

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:34:13'!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.

	
	self assert: (portfolio3 hasRegistered: transaction).
	self assert: (portfolio3 hasRegistered: transaction2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:36:07' prior: 50866585!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transaction add: transaction.
	transaction add: transaction2.

	
	self assert:  transactions  equals: portfolio3 transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:36:08'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:36:24' prior: 50866609!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transaction add: transaction2.

	
	self assert:  transactions  equals: portfolio3 transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:36:25'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:36:32' prior: 50866638!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transactions add: transaction2.

	
	self assert:  transactions  equals: portfolio3 transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:36:33'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:37:00' prior: 50866667!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transactions add: transaction2.

	
	self assert:  transactions equals: portfolio3 transactions.
! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:39:04'!
transactions 
	^accounts collect: [ :each | each  ]
! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:39:29' prior: 50866721!
transactions 
	^accounts collect: [ :each | each  transactions ]
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:39:30'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:39:30'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:41:40' prior: 50866726!
transactions 
	|transactions|
	
	transactions := Set new.
	
	^accounts do:		[ :acc |  
		 acc transactions do: [ :each |
			transactions add: each.	
			].
		 ].
! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:41:51' prior: 50866760!
transactions 
	|transactions|
	
	transactions := Set new.
	
	accounts do:		[ :acc |  
		 acc transactions do: [ :each |
			transactions add: each.	
			].
		 ].
	
	^transactions! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:45:36' prior: 50866696!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transaction3 transaction4 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	transaction3 := Deposit register: 200 on: account.
	transaction4 := Deposit register: 300 on: account.

	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transactions add: transaction2.
	transactions add: transaction2.
	transactions add: transaction4.


	
	self assert:  transactions equals: portfolio3 transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:45:40' prior: 50866802!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transaction3 transaction4 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	transaction3 := Deposit register: 200 on: account.
	transaction4 := Deposit register: 300 on: account.

	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transactions add: transaction2.
	transactions add: transaction3.
	transactions add: transaction4.


	
	self assert:  transactions equals: portfolio3 transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:48:13' prior: 50866768!
transactions 
	|transactions|
	
	transactions := Set new.
	
	accounts do:		[ :acc |
		transactions addAll: acc transactions.  
		 "acc transactions do: [ :each |
			transactions add: each.	
			]."
		 ].
	
	^transactions! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:48:29' prior: 50866951!
transactions 
	|transactions|
	
	transactions := Set new.
	
	accounts do:		[ :acc |
		transactions addAll: acc transactions.  	
	 ].
	
	^transactions! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:48:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

----SNAPSHOT----(15 May 2023 21:49:05) CuisUniversity-5706.image priorSource: 17040456!

----SNAPSHOT----(15 May 2023 21:49:10) CuisUniversity-5706.image priorSource: 17131761!

----SNAPSHOT----(15 May 2023 21:50:46) CuisUniversity-5706.image priorSource: 17131850!

----STARTUP---- (16 May 2023 18:00:38) as C:\windows64\CuisUniversity-5706.image!


!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:00:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:00:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:00:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:00:43'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:00:44'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:00:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:00:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:02:55' prior: 50866537!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction |
	
	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: firstTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:03:18' prior: 50867055!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:09:16' prior: 50866834!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

|hola|!

|hola|!

hola := Set new collect:[10, 20, 30, 40]!

hola := Set new collect:[10, 20, 30, 40]!

hola := Set new collect:[10, 20, 30, 40]!

hola := Set new collect:[10, 20, 30, 40]!

hola := Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

hola := Set new.!

hola collect:[10, 20, 30, 40]!

hola collect:[10, 20, 30, 40]!

hola collect:[10, 20, 30, 40]!

hola collect:[10, 20, 30, 40]!

hola collect:[10, 20, 30, 40].!

hola collect:[10, 20, 30, 40].!

hola collect:[10, 20, 30, 40].!

hola array!

hola size!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:16:26' prior: 50866101!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:21:55'!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
		
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:22:01' prior: 50867323!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:22:45' prior: 50867343!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:28:00'!
PASSED!

----STARTUP---- (16 May 2023 18:33:38) as C:\windows64\CuisUniversity-5706.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:02:55' prior: 50866537!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction |
	
	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: firstTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:03:18' prior: 50867420!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:09:16' prior: 50866834!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:16:26' prior: 50866101!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:21:55'!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
		
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:22:01' prior: 50867529!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:22:45' prior: 50867549!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !

----SNAPSHOT----(16 May 2023 18:33:57) CuisUniversity-5706.image priorSource: 17131939!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:34:00'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56'!
createPortfolio

	^ Portfolio new! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867475!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867629!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867666!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50865831!
test01PortfolioHaveZeroBalanceWhenItsCreated
	
	self assert: 0 equals:  self createPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50866272!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867447!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867760!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867788!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867512!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50866318!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account transaction|
	
	portfolio := self createPortfolio.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50866252!
test02PortfolioHaveOnlyOneAsset
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := ReceptiveAccount new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867569!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867886!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := self createPortfolio.
	thirdPortfolio := Portfolio new.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867909!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := self createPortfolio.
	thirdPortfolio := self createPortfolio.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:25'!
createAccount

	^ ReceptiveAccount new! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867703!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867960!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867748!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867816!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50868048!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867863!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account transaction|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867845!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := self createPortfolio.
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50868118!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := self createPortfolio.
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867932!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := self createPortfolio.
	thirdPortfolio := self createPortfolio.

	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867876!
test02PortfolioHaveOnlyOneAsset
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:42:31'!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues do: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:42:54' prior: 50868036!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccountWithRegisterDepositValues: [100].
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:42:55'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:43:10'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:43:32'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:43:39' prior: 50868187!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues value do: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:43:40'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:43:40'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:45:26' prior: 50868219!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues do: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:26'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:26'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:42'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:42'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:47'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:47:24' prior: 50868259!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues detect: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:47:25'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:47:25'!
ERROR!

!methodRemoval: PortfolioTest #createAccountWithRegisterDepositValues: stamp: 'Ms 5/16/2023 18:47:36'!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues detect: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:47:49' prior: 50868197!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:48:03' prior: 50868387!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.

	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

----SNAPSHOT----(16 May 2023 18:48:08) CuisUniversity-5706.image priorSource: 17150090!

----STARTUP---- (18 May 2023 17:05:59) as C:\windows64\CuisUniversity-5706.image!


!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:03:27'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:03:27'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:03:27'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:03:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!

!classDefinition: #AbrirArchivo category: 'Archivo' stamp: 'Ms 5/18/2023 18:04:19'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!
!AbrirArchivo methodsFor: 'nil' stamp: 'Ms 5/18/2023 18:05:11'!
open
	|file|
	file := UniFileStream open: 'hola.txt'.
	file newLine.
	file close.! !

AbrirArchivo new open!

AbrirArchivo open!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g open!

!classRemoval: #AbrirArchivo stamp: 'Ms 5/18/2023 20:16:30'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/18/2023 20:17:03' prior: 50864488!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions



	| deposit withdraw account |

	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.

		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).

! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/18/2023 20:17:07' prior: 50868871!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |

	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.

		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).

! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/18/2023 20:24:43' prior: 50865774 overrides: 16920235!
initialize
	balance := 0.
	accounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/18/2023 20:28:33'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50865691!
addAcount: account 
	^assets addLast: account.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866506!
hasRegistered: transaction 
	^assets anySatisfy: [ :each | each hasRegistered: transaction ].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50868896 overrides: 16920235!
initialize
	balance := 0.
	assets := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50865657!
accounts  
	^assets! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866986!
transactions 
	|transactions|
	
	transactions := Set new.
	
	assets do:		[ :acc |
		transactions addAll: acc transactions.  	
	 ].
	
	^transactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866141!
balance
	^assets sum: [ :each | each balance ] ifEmpty: [0]! !

----STARTUP---- (21 May 2023 23:15:39) as C:\windows64\CuisUniversity-5706.image!


!classDefinition: #AbrirArchivo category: 'Archivo' stamp: 'Ms 5/21/2023 23:15:42'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!

!classDefinition: #AbrirArchivo category: 'Archivo' stamp: 'Ms 5/21/2023 23:15:42'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!
!AbrirArchivo methodsFor: 'nil' stamp: 'Ms 5/18/2023 18:05:11'!
open
	|file|
	file := UniFileStream open: 'hola.txt'.
	file newLine.
	file close.! !

!classRemoval: #AbrirArchivo stamp: 'Ms 5/21/2023 23:15:42'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/18/2023 20:17:03' prior: 50864488!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions



	| deposit withdraw account |

	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.

		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).

! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/18/2023 20:17:07' prior: 50868970!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |

	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.

		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).

! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/18/2023 20:24:43' prior: 50865774 overrides: 16920235!
initialize
	balance := 0.
	accounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/21/2023 23:15:42'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50865691!
addAcount: account 
	^assets addLast: account.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866506!
hasRegistered: transaction 
	^assets anySatisfy: [ :each | each hasRegistered: transaction ].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50868995 overrides: 16920235!
initialize
	balance := 0.
	assets := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50865657!
accounts  
	^assets! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866986!
transactions 
	|transactions|
	
	transactions := Set new.
	
	assets do:		[ :acc |
		transactions addAll: acc transactions.  	
	 ].
	
	^transactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866141!
balance
	^assets sum: [ :each | each balance ] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:26:54'!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.
	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: MarsRover mensajeErrorComandoIncorrecto.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:27:55' prior: 50869069!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.
	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio.

! !
!Portfolio class methodsFor: 'nil' stamp: 'Ms 5/21/2023 23:28:38'!
messageErrorCanNotAddToPortfolio
 ^'Operacion Invalida'! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:30:27' prior: 50869008!
addAcount: account 
	account == self ifTrue: [ Portfolio class mensajeErrorComandoIncorrecto].
	^assets addLast: account.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:31:01' prior: 50869095!
addAcount: account 
	account == self ifTrue: [self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:31:02'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:31:02'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:31:32'!
FAILURE!

!methodRemoval: PortfolioTest #test08 stamp: 'Ms 5/21/2023 23:32:01'!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := self createPortfolio.
	thirdPortfolio := self createPortfolio.

	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:32:05'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:32:05'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:32:59' prior: 50869102!
addAcount: account 
	account == self ifTrue: [^self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:33:00'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:33:00'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:33:28' prior: 50869199!
addAcount: account 
	account == self ifTrue: [^self class messageErrorCanNotAddToPortfolio ] ifFalse: [
	^assets addLast: account.]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:33:30'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:33:30'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:34:47' prior: 50869237!
addAcount: account 
	account == self ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:34:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:34:50'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:35:06' prior: 50869276!
addAcount: account 
	(account == self) ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:35:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:35:07'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:35:19' prior: 50869311!
addAcount: account 
	[account == self] ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:35:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:35:19'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:35:19'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:35:19'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:35:20'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:35:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:35:20'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:35:20'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:35:31' prior: 50869346!
addAcount: account 
	(account == self) ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:35:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:35:35'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:35:38'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:36:42'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:36:42'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:37:15' prior: 50869381!
addAcount: account 
	(account = self) ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:37:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:37:16'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:37:28' prior: 50869426!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:37:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:37:28'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:37:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:37:42'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:37:47'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:38:29' prior: 50869461!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:38:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:38:35'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:38:37'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:38:57' prior: 50869527!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^assets addLast: account. ].
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:38:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:38:58'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:38:59'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:39:21' prior: 50869565!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ].
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:22'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:22'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:39:39' prior: 50869604!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ].
	^(self class messageErrorCanNotAddToPortfolio).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:40'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:40'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:39:48' prior: 50869090!
messageErrorCanNotAddToPortfolio
 ^'Operacion Invalida'.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:49'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:49'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:40:06' prior: 50869643!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ].
	^'Operacion Invalida'! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:40:10'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:40:10'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:40:32' prior: 50869080!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.
	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: 'Operacion Invalida'

! !

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:40:32'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:40:58'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:41:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:42:23' prior: 50869756!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.
	self assert: 'Operacion Invalida' equals: (firstPortfolio addAcount: firstPortfolio).

! !

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:42:32' prior: 50869776!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: 'Operacion Invalida'

! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:42:56' prior: 50869718!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ].
	^self class error: 'Operacion Invalida'! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:43:23' prior: 50869827!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self class error: 'Operacion Invalida'].
	^assets addLast: account.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:43:49' prior: 50869890!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self class error messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:43:50'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:43:50'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:44:07' prior: 50869925!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self class error: 'Operacion Invalida'].
	^assets addLast: account.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:44:51' prior: 50869817!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:45:12' prior: 50869964!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:47:29'!
test08AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:47:34'!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:47:35'!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:48:07' prior: 50870115!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.

	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:48:20' prior: 50870137!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:48:22' prior: 50870150!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/21/2023 23:48:26'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:56:42' prior: 50870014!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets includes: account )  ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:58:20'!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:59:48' prior: 50870225!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:00:04' prior: 50870240!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:01:25' prior: 50870255!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:01:26'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:01:42' prior: 50870182!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets includes: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:03:48'!
containsAsset: anAsset 
	^assets anySatisfy: [ :each | each includes: anAsset ].
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:03:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:03:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:03:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:03:54'!
FAILURE!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:03:54'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:04:36' prior: 50870294!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets includes: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:04:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:04:37'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:04:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:04:46'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:04:51'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:05:58'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:06:38' prior: 50870350!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets includes: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:06:39'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:06:39'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:06:39'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:06:39'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:06:56'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:06:56'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:06:56'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:06:56'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:06:57'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:08:28'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ms 5/22/2023 00:11:45'!
containsAsset: acount

	^(self = acount)

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:11:53'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:11:53'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:11:53'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:11:53'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:11:58'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:12:13' prior: 50870304!
containsAsset: anAsset 
	^assets anySatisfy: [ :each | each containsAsset: anAsset ].
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:12:51' prior: 50870442!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:12:57' prior: 50870684!
addAcount: account 
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:58'!
FAILURE!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:58'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:13:03' prior: 50870767!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:05'!
test10AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:08'!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:20:09'!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:13'!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:20:16'!
test10AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:55' prior: 50870952!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: []
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:58' prior: 50870989!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.
]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:59' prior: 50871006!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:21:04'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:23:11' prior: 50870815!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	account fatDefForClass: self.
	^assets addLast: account.
		! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:23:14' prior: 50871046!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	account fatherPortfolio: self.
	^assets addLast: account.
		! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/22/2023 00:23:42'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets balance father'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:23:41'!
fatherPortfolio: aPortfolio
	father := aPortfolio.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:23:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:23:44'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:24:14' prior: 50871077!
fatherPortfolio: aPortfolio
	^father := aPortfolio.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:24:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:15'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:24:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:19'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:24:21'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ms 5/22/2023 00:24:52'!
fatherPortfolio: aPortfolio! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:24:58'!
FAILURE!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:24:58'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:26:19' prior: 50871058!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(father containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:26:51'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ms 5/22/2023 00:27:17' prior: 50870535!
containsAsset: acount
	^(self = acount)

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:27:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:27:19'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:27:26'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:28:12' prior: 50871310!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(father containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:28:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:28:13'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:37:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:37:50'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:38:36' prior: 50869020 overrides: 16920235!
initialize
	balance := 0.
	assets := OrderedCollection new.
	father := self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:40:07'!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:40:23' prior: 50871584!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio firstAccount thirdPortfolio |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:40:48' prior: 50871602!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio firstAccount thirdPortfolio |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:41:52' prior: 50871622!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.
	secondPortfolio addAcount: thirdPortfolio.

	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:42:00' prior: 50871642!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.
	secondPortfolio addAcount: thirdPortfolio.

	self
		should: [	thirdPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'Ms 5/22/2023 00:42:01'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:42:40' prior: 50871442!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(father anyFatherContainsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:42:46' prior: 50871688!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(self anyFatherContainsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:42:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:42:50'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:42:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:42:58'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:42:58'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:42:58'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:42:59'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:43:14'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:44:30'!
anyFatherContainsAsset: asset
	(father anyFatherContainsAsset: asset) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:48:16' prior: 50871810!
anyFatherContainsAsset: asset
	(father anyFatherContainsAsset: asset) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	self containsAsset: asset.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:51:54' prior: 50871818!
anyFatherContainsAsset: asset
	father = self ifFalse:[
		^father anyFatherContainsAsset: asset
	] ifTrue: [^	self containsAsset: asset.].
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

----SNAPSHOT----(22 May 2023 00:52:49) CuisUniversity-5706.image priorSource: 17177242!

----SNAPSHOT----(22 May 2023 00:54:51) CuisUniversity-5706.image priorSource: 17287293!

----STARTUP---- (29 May 2023 11:57:12) as C:\windows64\CuisUniversity-5706.image!


----End fileIn of C:\windows64\repoProfes\2023-1c\06-Portfolio1\Portfolio-Solucion.st----!

!classRemoval: #Withdraw stamp: 'Ms 5/29/2023 12:01:06'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'Ms 5/29/2023 12:01:06'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'Ms 5/29/2023 12:01:07'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'Ms 5/29/2023 12:01:07'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'Ms 5/29/2023 12:01:07'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'Ms 5/29/2023 12:01:08'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'Ms 5/29/2023 12:01:08'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'Ms 5/29/2023 12:01:08'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\windows64\repoProfes\2023-1c\06-Portfolio1\Portfolio-Solucion.st----!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/29/2023 12:01:19'!
PASSED!

AccountTransaction subclass: #Transferences
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferences category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 12:06:20'!
AccountTransaction subclass: #Transferences
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferencesTest category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 12:06:39'!
TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferencesTest methodsFor: 'nil' stamp: 'Ms 5/29/2023 12:08:48'!
test01
	| firstAccount secondAccount |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	Deposit register: 200 on: firstAccount.
	Transferences register: 100 from: firstAccount to: secondAccount.
	
	self assert: firstAccount balance equals: 100.
	self assert: secondAccount balance equals: 100.! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 12:08:50'!
ERROR!
!Transferences class methodsFor: 'nil' stamp: 'Ms 5/29/2023 12:10:08'!
register: aValue from: firstAccount to: secondAccount
	Deposit register: aValue on: secondAccount.
	Withdraw register: aValue on: firstAccount.! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 12:10:11'!
PASSED!
!Transferences class methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:17:54' prior: 50873509!
register: aValue from: senderAccount to: receptiveAccount
	Deposit register: aValue on: receptiveAccount.
	Withdraw register: aValue on: senderAccount.! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 12:17:56'!
PASSED!
!TransferencesTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:31:21'!
test02accountHasRegisterTransfer

	| senderAccount receivingAccount transfer|
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.

	transfer := Transferences register: 100 from: senderAccount to: receivingAccount.
	
	self assert: (senderAccount hasRegistered: transfer leftLeg).
	self assert: (receivingAccount hasRegistered: transfer rightLeg)! !

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:31:25'!
ERROR!
!Transferences class methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:35:49' prior: 50873520!
register: aValue from: senderAccount to: receptiveAccount
	^self new initializeFor: aValue from: senderAccount to: receptiveAccount! !
!Transferences methodsFor: 'nil' stamp: 'Ms 5/29/2023 12:37:02'!
initializeFor: aValue from: senderAccount to: receptiveAccount
	| leftLeg rightLeg |
	value := aValue.
	leftLeg := senderAccount.
	rightLeg := receptiveAccount.! !
!Transferences methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:37:27' prior: 50873556!
initializeFor: aValue from: senderAccount to: receptiveAccount
	value := aValue.! !

AccountTransaction subclass: #Transferences
	instanceVariableNames: 'value leftLeg rightLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferences category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 12:37:39'!
AccountTransaction subclass: #Transferences
	instanceVariableNames: 'value leftLeg rightLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transferences methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:38:00' prior: 50873565!
initializeFor: aValue from: senderAccount to: receptiveAccount
	value := aValue.
	leftLeg := senderAccount.
	rightLeg := receptiveAccount.! !
!Transferences methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:38:20'!
leftLeg
	^leftLeg! !
!Transferences methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:38:31'!
rightLegt
	^rightLeg! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 12:38:36'!
FAILURE!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:38:36'!
FAILURE!
!Transferences methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:39:42' prior: 50873585!
initializeFor: aValue from: senderAccount to: receptiveAccount
	value := aValue.
	leftLeg := senderAccount.
	rightLeg := receptiveAccount.
	
	Deposit register: aValue on: receptiveAccount.
	Withdraw register: aValue on: senderAccount.
	 ! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 12:39:43'!
PASSED!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:39:43'!
FAILURE!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:39:43'!
FAILURE!

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 12:40:03'!
PASSED!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:40:03'!
FAILURE!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:40:03'!
FAILURE!
!Transferences methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:40:27'!
rightLeg
	^rightLeg! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 12:40:29'!
PASSED!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:40:29'!
FAILURE!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:40:29'!
FAILURE!
!Transferences methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 12:51:58' prior: 50873606!
initializeFor: aValue from: senderAccount to: receptiveAccount
	value := aValue.
	leftLeg := Withdraw register: aValue on: senderAccount.
	rightLeg := Deposit register: aValue on: receptiveAccount.
	! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 12:51:59'!
PASSED!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 12:51:59'!
PASSED!

!methodRemoval: Transferences #rightLegt stamp: 'Ms 5/29/2023 12:52:04'!
rightLegt
	^rightLeg!
!TransferencesTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 13:06:39'!
test03receptiveAccountKnowsSenderAccount

	| senderAccount receivingAccount transfer|
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.

	transfer := Transferences register: 100 from: senderAccount to: receivingAccount.
	
	self assert: (transfer leftLeg) toTransfer equals: transfer rightLeg.
! !

!testRun: #TransferencesTest #test03receptiveAccountKnowsSenderAccount stamp: 'Ms 5/29/2023 13:06:44'!
ERROR!

Transferences subclass: #RightLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RightLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 13:19:30'!
Transferences subclass: #RightLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transferences subclass: #LeftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #LeftLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 13:19:37'!
Transferences subclass: #LeftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #LeftLeg stamp: 'Ms 5/29/2023 13:23:45'!
Transferences subclass: #LeftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #RightLeg stamp: 'Ms 5/29/2023 13:23:48'!
Transferences subclass: #RightLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(29 May 2023 13:28:46) CuisUniversity-5706.image priorSource: 17287382!

----STARTUP---- (29 May 2023 17:16:46) as C:\windows64\CuisUniversity-5706.image!


!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 17:17:09'!
PASSED!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 17:17:09'!
PASSED!

!testRun: #TransferencesTest #test03receptiveAccountKnowsSenderAccount stamp: 'Ms 5/29/2023 17:17:09'!
ERROR!

!testRun: #TransferencesTest #test03receptiveAccountKnowsSenderAccount stamp: 'Ms 5/29/2023 17:17:09'!
ERROR!

Object subclass: #EjemploA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejemplo'!

!classDefinition: #EjemploA category: 'Ejemplo' stamp: 'Ms 5/29/2023 17:33:10'!
Object subclass: #EjemploA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejemplo'!

a := 0!

a := 0!

a := 0!

		"Handleo:".!

		"Handleo:".!

[1/a + 200]!

[1/a + 200]!

a := 0!

	[1/a + 200]!

	[1/a + 200]!

a := 0!

[1/a + 200]
	on: Error 
	do: [ :anError | 
		anError return: 5].
	!

[1/a + 200]
	on: Error 
	do: [ :anError | 
		anError return: 5].!

[1/a + 200]
	on: Error 
	do: [ :anError | 
		anError resume: 5].!

[1/a + 200]
	on: Error 
	do: [ :anError | 
		a := 10.
		anError retry].!

[1/a + 200]
	on: Error 
	do: [ :anError | 
		a := 1.
		anError retry].!

	[1/a + 10]
	on: Error 
	do: [ :anError | 
		a := 1.
		anError retry]. !

	b := 0.!

		b := b + 1.!

		b := b + 1.!

		b := b + 1.!

	b := 0.!

	[1/a + 10]
	on: Error 
	do: [ :anError | 
		b = 2 ifTrue: [
		a := 1.
		].
		b := b + 1.
		anError retry]. 
	!

[1/a + 10]
	on: Error 
	do: [ :anError | 
		anError return: 100]. !

	a := 0.!

[1/a + 10]
	on: Error 
	do: [ :anError | 
		anError return: 100]. 
	!

	[[1/a + 10]
	on: Error 
	do: [ :anError | 
		Transcript show: 'se producjo un error'; newLine.
		anError pass]
	]
	on: Error
	do: [ :anError | anError return: 10]!

	
	[[1/a + 10]
	on: Error 
	do: [ :anError | 
		Transcript show: 'se produjo un error'; newLine.
		anError pass]
	]
	on: Error
	do: [ :anError | anError return: 23]!

	
	[[1/a + 10]
	on: Error 
	do: [ :anError | 
		anError pass]
	]
	on: Error
	do: [ :anError | anError return: 23]!

	[[1/a + 10]
	on: Error 
	do: [ :anError | 
		]
	]
	on: Error
	do: [ :anError | anError return: 23]!

	a := 0.
	
	[[1/1 + 10]
	on: Error 
	do: [ :anError | 
		Transcript show: 'se produjo un error'; newLine.
		anError pass]
	]
	on: Error
	do: [ :anError | anError return: 23]!

!methodRemoval: TransferencesTest #test03receptiveAccountKnowsSenderAccount stamp: 'Ms 5/29/2023 20:17:13'!
test03receptiveAccountKnowsSenderAccount

	| senderAccount receivingAccount transfer|
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.

	transfer := Transferences register: 100 from: senderAccount to: receivingAccount.
	
	self assert: (transfer leftLeg) toTransfer equals: transfer rightLeg.
!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 20:31:20'!
PASSED!

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:31:21'!
PASSED!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 20:31:21'!
PASSED!
!TransferencesTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 20:36:34'!
test03

	| senderAccount receivingAccount transfer value |
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	value := 100.
	transfer := Transferences register: value from: senderAccount to: receivingAccount.
	
	self assert: value negated equals: senderAccount balance.
	self assert: value equals: receivingAccount balance.! !

!testRun: #TransferencesTest #test03 stamp: 'Ms 5/29/2023 20:36:37'!
PASSED!

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:36:37'!
PASSED!

!testRun: #TransferencesTest #test02accountHasRegisterTransfer stamp: 'Ms 5/29/2023 20:36:37'!
PASSED!

!testRun: #TransferencesTest #test03 stamp: 'Ms 5/29/2023 20:36:37'!
PASSED!

!classRemoval: #TransferencesTest stamp: 'Ms 5/29/2023 20:37:30'!
TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Transferences stamp: 'Ms 5/29/2023 20:37:34'!
AccountTransaction subclass: #Transferences
	instanceVariableNames: 'value leftLeg rightLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferencesTest category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 20:37:52'!
TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'Ms 5/29/2023 20:38:29'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'Ms 5/29/2023 20:38:29'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'Ms 5/29/2023 20:38:29'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'Ms 5/29/2023 20:38:30'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'Ms 5/29/2023 20:38:30'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'Ms 5/29/2023 20:38:30'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferencesTest stamp: 'Ms 5/29/2023 20:38:30'!
TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'Ms 5/29/2023 20:38:30'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'Ms 5/29/2023 20:38:31'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\windows64\repoProfes\2023-1c\06-Portfolio1\Portfolio-Solucion.st----!

TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferencesTest category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 20:39:04'!
TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferences category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 20:42:25'!
Object subclass: #Transferences
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferencesTest methodsFor: 'nil' stamp: 'Ms 5/29/2023 20:42:14'!
test01
	| firstAccount secondAccount |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	Deposit register: 200 on: firstAccount.
	Transferences register: 100 from: firstAccount to: secondAccount.
	
	self assert: firstAccount balance equals: 100.
	self assert: secondAccount balance equals: 100.! !

AccountTransaction subclass: #Transferences
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferences category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 20:42:52'!
AccountTransaction subclass: #Transferences
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transferences
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferences category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 20:43:02'!
AccountTransaction subclass: #Transferences
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:43:09'!
ERROR!

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:43:09'!
ERROR!
!Transferences class methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 20:43:15'!
register: aRenameMe1 from: firstAccount to: secondAccount 
	self shouldBeImplemented.! !
!Transferences class methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 20:44:00' prior: 50874712!
register: aValue from: firstAccount to: secondAccount 
	Deposit register: aValue on: secondAccount.
	Withdraw register: aValue on: firstAccount.! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:44:01'!
PASSED!
!TransferencesTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 20:45:27' prior: 50874668!
test01
	| firstAccount secondAccount value |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	value := 100.
	Transferences register: value from: firstAccount to: secondAccount.
	
	self assert: value negated equals: firstAccount balance.
	self assert: value equals: firstAccount balance.
! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:45:28'!
FAILURE!
!TransferencesTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 20:45:41' prior: 50874729!
test01
	| firstAccount secondAccount value |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	value := 100.
	Transferences register: value from: firstAccount to: secondAccount.
	
	self assert: value negated equals: firstAccount balance.
	self assert: value equals: secondAccount balance.
! !

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:45:42'!
PASSED!

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:45:42'!
PASSED!
!TransferencesTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 20:45:55'!
test02
	| firstAccount secondAccount value |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	value := 100.
	Transferences register: value from: firstAccount to: secondAccount.
	
	self assert: value negated equals: firstAccount balance.
	self assert: value equals: secondAccount balance.
! !

!testRun: #TransferencesTest #test02 stamp: 'Ms 5/29/2023 20:45:56'!
PASSED!

!testRun: #TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:45:56'!
PASSED!

!testRun: #TransferencesTest #test02 stamp: 'Ms 5/29/2023 20:45:56'!
PASSED!

!methodRemoval: TransferencesTest #test02 stamp: 'Ms 5/29/2023 20:46:20'!
test02
	| firstAccount secondAccount value |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	value := 100.
	Transferences register: value from: firstAccount to: secondAccount.
	
	self assert: value negated equals: firstAccount balance.
	self assert: value equals: secondAccount balance.
!

!methodRemoval: TransferencesTest #test01 stamp: 'Ms 5/29/2023 20:46:24'!
test01
	| firstAccount secondAccount value |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	value := 100.
	Transferences register: value from: firstAccount to: secondAccount.
	
	self assert: value negated equals: firstAccount balance.
	self assert: value equals: secondAccount balance.
!

----STARTUP---- (29 May 2023 21:26:46) as C:\windows64\CuisUniversity-5706.image!


----SNAPSHOT----(29 May 2023 21:28:56) CuisUniversity-5706.image priorSource: 17346153!

!classRemoval: #TransferencesTest stamp: 'Ms 5/29/2023 21:29:11'!
TestCase subclass: #TransferencesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Transferences stamp: 'Ms 5/29/2023 21:29:18'!
AccountTransaction subclass: #Transferences
	instanceVariableNames: 'value leftLeg rightLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTest category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 21:29:25'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 21:35:15'!
Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'nil' stamp: 'Ms 5/29/2023 21:35:09'!
test01TransferAccountToAnotherAffectBalance
	| firstAccount secondAccount |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: firstAccount.
	Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: 50 equals: firstAccount balance.
	self assert: 50 equals: secondAccount balance.! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:35:24'!
ERROR!
!Transference class methodsFor: 'category-name' stamp: 'Ms 5/29/2023 21:35:31'!
register: aRenameMe1 from: firstAccount to: secondAccount 
	self shouldBeImplemented.! !
!Transference class methodsFor: 'category-name' stamp: 'Ms 5/29/2023 21:36:13' prior: 50874865!
register: aValue from: firstAccount to: secondAccount 
	Deposit register: aValue on: secondAccount.
	Withdraw register: aValue on: firstAccount.
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:36:42'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:39:54'!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: (firstAccount hasRegistered: transfer).
	self assert: (secondAccount hasRegistered: transfer)! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:39:55'!
FAILURE!
!Transference class methodsFor: 'category-name' stamp: 'Ms 5/29/2023 21:41:39' prior: 50874871!
register: aValue from: firstAccount to: secondAccount 
	^self new intializeValue: aValue from: firstAccount to: secondAccount.! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:41:43'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:41:43'!
ERROR!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 21:43:53'!
Object subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 21:43:55'!
Object subclass: #Transference
	instanceVariableNames: 'value leftLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/29/2023 21:43:56'!
Object subclass: #Transference
	instanceVariableNames: 'value leftLeg rightLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'nil' stamp: 'Ms 5/29/2023 21:43:50'!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	leftLeg := firstAccount.
	rightLeg := secondAccount.
	
	firstAccount register: self.
	secondAccount register: self.
	
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:43:58'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:43:58'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:43:58'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:44:53'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:44:56'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:44:56'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:45:10'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:45:10'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:45:30'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:45:38'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/29/2023 21:47:57' prior: 50873247 overrides: 50873052!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance for: self ]! !
!Deposit methodsFor: 'balance' stamp: 'Ms 5/29/2023 21:48:19'!
affectBalance: aBalance for: anAccount

	^aBalance + value ! !
!Withdraw methodsFor: 'balance' stamp: 'Ms 5/29/2023 21:48:25'!
affectBalance: aBalance  for: anAccount

	^aBalance - value! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:48:28'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:48:28'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:48:28'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:48:41'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:48:41'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:48:41'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:49:04'!
affectBalance: aBalance for: anAccount
	
	
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:49:05'!
FAILURE!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:49:05'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:49:05'!
FAILURE!

!methodRemoval: Withdraw #affectBalance: stamp: 'Ms 5/29/2023 21:49:16'!
affectBalance: aBalance

	^aBalance - value!

!methodRemoval: Deposit #affectBalance: stamp: 'Ms 5/29/2023 21:49:24'!
affectBalance: aBalance

	^aBalance + value !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:50:42' prior: 50875101!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount == 		leftLeg)
		ifTrue:  aBalance
		ifFalse: aBalance negated.
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:50:43'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:50:43'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:50:43'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:51:14' prior: 50875124!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount == 		leftLeg)
		ifTrue:  value
		ifFalse: value negated.
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:51:14'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:51:14'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:51:15'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:51:32' prior: 50875142!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount == 		leftLeg
		ifTrue:  value
		ifFalse: value negated).
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:51:33'!
FAILURE!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:51:33'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:51:33'!
FAILURE!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:51:40' prior: 50875160!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount == 		leftLeg
		ifTrue:  value negated
		ifFalse: value ).
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:51:40'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:51:41'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:55:19'!
test03FirstAccountCanSearchSecondAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: firstAccount equals: (transfer getRightLegt: secondAccount).
! !

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/29/2023 21:55:22'!
ERROR!
!Transference methodsFor: 'category-name' stamp: 'Ms 5/29/2023 21:55:30'!
getRightLegt: secondAccount 
	self shouldBeImplemented.! !
!Transference methodsFor: 'category-name' stamp: 'Ms 5/29/2023 21:56:07' prior: 50875208!
getRightLegt: secondAccount 
	^rightLeg ! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/29/2023 21:56:08'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/29/2023 21:56:08'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/29/2023 21:56:08'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/29/2023 21:56:08'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/29/2023 21:56:22'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/29/2023 21:56:22'!
FAILURE!

----SNAPSHOT----(29 May 2023 21:56:51) CuisUniversity-5706.image priorSource: 17381118!

----SNAPSHOT----(29 May 2023 21:57:01) CuisUniversity-5706.image priorSource: 17394790!

----SNAPSHOT----(29 May 2023 21:57:29) CuisUniversity-5706.image priorSource: 17394879!

----STARTUP---- (30 May 2023 16:21:07) as C:\windows64\CuisUniversity-5706.image!


!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:21:24'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:21:24'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:21:24'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:21:24'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:21:46' prior: 50875192!
test03FirstAccountCanSearchSecondAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: firstAccount equals: (transfer getRightLeg: secondAccount).
! !

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:22:23'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:22:23'!
ERROR!
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:22:30'!
getRightLeg: secondAccount 
	self shouldBeImplemented.! !
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:22:41' prior: 50875284!
getRightLeg: secondAccount 
	^rightLeg .! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:22:42'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:22:42'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:22:42'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:22:42'!
FAILURE!

!methodRemoval: Transference #getRightLegt: stamp: 'Ms 5/30/2023 16:23:29'!
getRightLegt: secondAccount 
	^rightLeg !
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:23:48' prior: 50875289!
getRightLeg: secondAccount 
	^leftLeg .! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:23:51'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:23:51'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:23:51'!
PASSED!
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:26:45' prior: 50875311!
getRightLeg: secondAccount 
	^leftLeg.! !
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:27:05'!
getAnotherLeg: secondAccount 
	^leftLeg.! !

!methodRemoval: Transference #getRightLeg: stamp: 'Ms 5/30/2023 16:27:06'!
getRightLeg: secondAccount 
	^leftLeg.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:27:16' prior: 50875264!
test03FirstAccountCanSearchSecondAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: firstAccount equals: (transfer getAnotherLeg: secondAccount).
! !

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:27:17'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:27:17'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:27:17'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:27:17'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:27:31'!
test03SecondAccountCanSearchFirstAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: firstAccount equals: (transfer getAnotherLeg: secondAccount).
! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:27:34'!
test04SecondAccountCanSearchFirstAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: firstAccount equals: (transfer getAnotherLeg: secondAccount).
! !

!methodRemoval: TransferenceTest #test03SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:27:36'!
test03SecondAccountCanSearchFirstAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: firstAccount equals: (transfer getAnotherLeg: secondAccount).
!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:27:46' prior: 50875379!
test04SecondAccountCanSearchFirstAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: secondAccount equals: (transfer getAnotherLeg: firstAccount ).
! !

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:27:47'!
FAILURE!
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:29:00' prior: 50875330!
getAnotherLeg: secondAccount 
	secondAccount  = leftLeg ifTrue: [^rightLeg].
	^leftLeg
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:29:01'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:29:01'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:29:01'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:29:01'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:29:45'!
test05AccoutNotIncludeInTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: secondAccount equals: (transfer getAnotherLeg: firstAccount ).
! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:30:16' prior: 50875443!
test05AccoutNotIncludeInTransfer
	| firstAccount secondAccount thirdAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.

	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	
	self assert: secondAccount equals: (transfer getAnotherLeg: thirdAccount ).
! !

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:30:18'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:34:38' prior: 50875456!
test05AccoutNotIncludeInTransfer
	| firstAccount secondAccount thirdAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.

	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self should: [ transfer getAnotherLeg: thirdAccount ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transference  accountNotIncludedInTransfer equals: anError messageText
		].
! !
!Transference class methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:36:35'!
accountNotIncludedInTransfer
	^'Account Not Incuded In This Transfer'! !
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:37:21' prior: 50875423!
getAnotherLeg: secondAccount 
	secondAccount  = leftLeg ifTrue: [^rightLeg].
	secondAccount  = rightLeg ifTrue: [^leftLeg].	
	^ self error: self class accountNotIncludedInTransfer
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:37:22'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:37:22'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:37:22'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:37:22'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:37:22'!
PASSED!

Transference subclass: #leftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #leftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #LeftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #LeftLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/30/2023 16:38:47'!
Transference subclass: #LeftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #RightLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RightLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/30/2023 16:38:54'!
Transference subclass: #RightLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!LeftLeg methodsFor: 'nil' stamp: 'Ms 5/30/2023 16:39:33' overrides: 50875178!
affectBalance: aBalance for: anAccount
	^aBalance +  value negated
! !
!RightLeg methodsFor: 'nil' stamp: 'Ms 5/30/2023 16:39:44' overrides: 50875178!
affectBalance: aBalance for: anAccount
	^aBalance +  value
! !
!LeftLeg methodsFor: 'nil' stamp: 'Ms 5/30/2023 16:40:23' overrides: 50875499!
getAnotherLeg: secondAccount 
	^rightLeg! !
!RightLeg methodsFor: 'nil' stamp: 'Ms 5/30/2023 16:40:46' overrides: 50875499!
getAnotherLeg: secondAccount 
	^leftLeg
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:42:35' prior: 50874936!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	
	LeftLeg new intializeWith: firstAccount.
	RightLeg new intializeWith: secondAccount.

	
	firstAccount register: self.
	secondAccount register: self.
	
	! !

!classDefinition: #LeftLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/30/2023 16:43:21'!
Transference subclass: #LeftLeg
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!LeftLeg methodsFor: 'nil' stamp: 'Ms 5/30/2023 16:43:18'!
initializeWith: anAccount
	account := anAccount! !

!classDefinition: #RightLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/30/2023 16:43:40'!
Transference subclass: #RightLeg
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!RightLeg methodsFor: 'nil' stamp: 'Ms 5/30/2023 16:43:39'!
initializeWith: anAccount
	account := 	anAccount.! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:44:01'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:44:01'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:44:01'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:44:01'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:44:01'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:44:04'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:44:28' prior: 50875575!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	
	LeftLeg intializeWith: firstAccount.
	RightLeg intializeWith: secondAccount.

	
	firstAccount register: self.
	secondAccount register: self.
	
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:44:29'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:44:29'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:44:29'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:44:29'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:44:29'!
ERROR!

Object subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/30/2023 16:45:02'!
Object subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!RightLeg methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:45:57' prior: 50875570 overrides: 50875499!
getAnotherLeg: secondAccount 
	! !
!LeftLeg methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:46:02' prior: 50875566 overrides: 50875499!
getAnotherLeg: secondAccount 
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:46:53' prior: 50875629!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	
	LeftLeg initializeWith: firstAccount.
	RightLeg initializeWith: secondAccount.

	
	firstAccount register: self.
	secondAccount register: self.
	
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:46:54'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:46:54'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:46:54'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:46:54'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:46:54'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:46:56'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:47:15' prior: 50875178!
affectBalance: aBalance for: anAccount
	^self subclassResponsibility 
	! !
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:47:29' prior: 50875499!
getAnotherLeg: secondAccount 
	self subclassResponsibility 
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:47:30'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:47:30'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:47:30'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:47:30'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:47:30'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:47:42'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:47:42'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:47:42'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:47:42'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:47:42'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:47:44'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:47:58'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:48:31' prior: 50875679!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	
	LeftLeg new initializeWith: firstAccount.
	RightLeg new initializeWith: secondAccount.

	
	firstAccount register: self.
	secondAccount register: self.
	
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:48:31'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:48:31'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:48:31'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:48:31'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:48:31'!
FAILURE!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:48:41'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:49:16'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:49:28' prior: 50875710!
affectBalance: aBalance for: anAccount
	self subclassResponsibility 
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:49:28'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:49:28'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:49:28'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:49:28'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:49:28'!
FAILURE!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:49:36'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:51:02'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:43:50' prior: 50875762!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	leftLeg := firstAccount.
	rightLeg := secondAccount.
	
	firstAccount register: self.
	secondAccount register: self.
	
	! !
!Transference methodsFor: 'category-name' stamp: 'Ms 5/30/2023 16:37:21' prior: 50875716!
getAnotherLeg: secondAccount 
	secondAccount  = leftLeg ifTrue: [^rightLeg].
	secondAccount  = rightLeg ifTrue: [^leftLeg].	
	^ self error: self class accountNotIncludedInTransfer
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:50:42' prior: 50875797!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount == 		leftLeg)
		ifTrue:  aBalance
		ifFalse: aBalance negated.
	! !

!classRemoval: #LeftLeg stamp: 'Ms 5/30/2023 16:52:40'!
Transference subclass: #LeftLeg
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #RightLeg stamp: 'Ms 5/30/2023 16:52:43'!
Transference subclass: #RightLeg
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transference
	instanceVariableNames: 'value leftLeg rightLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/30/2023 16:52:50'!
Object subclass: #Transference
	instanceVariableNames: 'value leftLeg rightLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:52:53'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:52:53'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:52:53'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:52:53'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:52:53'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:52:53'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:53:21'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:53:21'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:53:22'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:53:22'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:53:22'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:53:22'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:53:35'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:53:35'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:53:58' prior: 50875846!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount = 		leftLeg)
		ifTrue:  aBalance
		ifFalse: aBalance negated.
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:53:58'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:53:58'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:53:58'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:53:58'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:53:58'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:53:58'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:54:27' prior: 50875927!
affectBalance: aBalance for: anAccount
	^aBalance + 
	[anAccount = 		leftLeg]
		ifTrue:  aBalance
		ifFalse: aBalance negated.
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:54:28'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:54:28'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:54:28'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:54:28'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:54:28'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:54:28'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/29/2023 21:50:42' prior: 50875955!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount == 		leftLeg)
		ifTrue:  aBalance
		ifFalse: aBalance negated.
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:55:10'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:55:10'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:55:10'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:55:10'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:55:10'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:55:10'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:55:22'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:55:29' prior: 50875983!
affectBalance: aBalance for: anAccount
	^value + (anAccount == 		leftLeg)
		ifTrue:  aBalance
		ifFalse: aBalance negated.
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:55:30'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:55:30'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:55:30'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:55:30'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:55:30'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:55:30'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:55:39' prior: 50876015!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount == 		leftLeg)
		ifTrue:  value
		ifFalse: value negated.
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:55:40'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:55:40'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:55:40'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:55:40'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:55:40'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:55:40'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:56:09' prior: 50876043!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount = 		leftLeg
		ifTrue:  value
		ifFalse: value negated).
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:56:10'!
FAILURE!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:56:10'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:56:10'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:56:10'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:56:10'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:56:10'!
FAILURE!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 16:56:17' prior: 50876071!
affectBalance: aBalance for: anAccount
	^aBalance + (anAccount = 		leftLeg
		ifTrue:  value negated
		ifFalse: value ).
	! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:56:18'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:56:18'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:56:18'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:56:18'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:56:18'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 16:56:21'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 16:56:21'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 16:56:21'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 16:56:21'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 16:56:21'!
PASSED!

----SNAPSHOT----(30 May 2023 17:07:16) CuisUniversity-5706.image priorSource: 17394968!

----STARTUP---- (30 May 2023 21:09:40) as C:\windows64\CuisUniversity-5706.image!


!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 21:09:45'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 21:09:48'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 21:09:48'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 21:09:48'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 21:09:48'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 21:09:48'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/30/2023 21:18:40'!
test08AccountSummaryWithBalanceZero

	| account1  |
	
	account1 := ReceptiveAccount new.
			
	self assert: 'Balance = 0' equals: account1 reviewAccount.
! !

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:18:42'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:18:53'!
reviewAccount
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:19:09' prior: 50876274!
reviewAccount
	^'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:19:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:19:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:19:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:19:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:19:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:19:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:19:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:19:09'!
PASSED!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:19:47' prior: 50876279!
reviewAccount
	^'Balance = ' value ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:19:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:19:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:19:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:19:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:19:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:19:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:19:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:19:48'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:19:49'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:20:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:20:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:20:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:20:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:20:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:20:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:20:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:20:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:20:07'!
FAILURE!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:24:24' prior: 50876313!
reviewAccount
	^'Balance = '! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:24:59' prior: 50876384!
reviewAccount
	^'Balance = ', self balance ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:24:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:24:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:24:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:24:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:24:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:24:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:24:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:24:59'!
ERROR!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:24:59'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:25:05' prior: 50876388!
reviewAccount
	^'Balance = ' + self balance ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:25:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:25:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:25:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:25:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:25:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:25:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:25:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:25:06'!
ERROR!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:25:06'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:25:12' prior: 50876426!
reviewAccount
	^'Balance = ', self balance ! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:25:17' prior: 50876464!
reviewAccount
	^'Balance = ',  self balance ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:25:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:25:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:25:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:25:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:25:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:25:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:25:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:25:17'!
ERROR!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:25:17'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:25:39' prior: 50876469!
reviewAccount
	^'Balance = ',  0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:25:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:25:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:25:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:25:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:25:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:25:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:25:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:25:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:25:40'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:27:05' prior: 50876507!
reviewAccount
	|a|
	a := 0. 
	^ 'Balance = ',  a! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:27:06'!
ERROR!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:27:06'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:27:12' prior: 50876545!
reviewAccount
	|a|
	a := 0. 
	^ ('Balance = ',  a)! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:27:13'!
ERROR!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:27:13'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:28:04' prior: 50876583!
reviewAccount
	|a|
	a := 0. 
	^ ('Balance = ',  a asString )! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:28:05'!
PASSED!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 21:28:18' prior: 50876621!
reviewAccount

	^ 'Balance = ',  self balance asString ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 21:28:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:28:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 21:28:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 21:28:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 21:28:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 21:28:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 21:28:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 21:28:19'!
PASSED!

----SNAPSHOT----(30 May 2023 21:28:25) CuisUniversity-5706.image priorSource: 17423644!

----STARTUP---- (30 May 2023 22:46:15) as C:\windows64\CuisUniversity-5706.image!


TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'Ms 5/30/2023 22:51:45'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'nil' stamp: 'Ms 5/30/2023 22:51:50'!
test01AccountSummaryWithBalanceZero

	| account1  |
	
	account1 := ReceptiveAccount new.
			
	self assert: 'Balance = 0' equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:51:51'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:51:51'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test08AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:51:56'!
test08AccountSummaryWithBalanceZero

	| account1  |
	
	account1 := ReceptiveAccount new.
			
	self assert: 'Balance = 0' equals: account1 reviewAccount.
!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 22:54:35'!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	message := OrderedCollection with: 'Deposito por 100' with: 'Balance = 100'. 
	self assert: message equals: account1 reviewAccount.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 22:54:49' prior: 50876708!
test01AccountSummaryWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := 'Balance = 0' 
	self assert: 'Balance = 0' equals: account1 reviewAccount.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 22:54:54' prior: 50876743!
test01AccountSummaryWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := 'Balance = 0' 
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:54:57'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 22:55:03' prior: 50876753!
test01AccountSummaryWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := 'Balance = 0'.
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:55:04'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:55:04'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 22:55:04'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 22:55:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 22:56:10' prior: 50876656!
reviewAccount

	| message|
	
	message = OrderedCollection new.
	^
	 'Balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 22:56:44' prior: 50876789!
reviewAccount

	| message|
	
	message = OrderedCollection new.
	message with: 'Deposito por 100' with: 'Balance = 0'.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 22:56:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 22:56:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 22:56:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 22:56:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 22:56:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 22:56:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 22:56:49'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:57:00'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 22:57:00'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 22:57:34' prior: 50876796!
reviewAccount

	| message|
	
	message = OrderedCollection with: 'Deposito por 100' with: 'Balance = 0'..
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 22:57:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 22:57:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 22:57:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 22:57:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 22:57:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 22:57:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 22:57:37'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:57:48'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:57:48'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 22:57:52'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 22:57:52'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 22:58:39' prior: 50876731!
test02AccountSummaryWithDeposit

	| account1 |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	self assert: (OrderedCollection with: 'Deposito por 100' with: 'Balance = 100') equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 22:58:41'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 22:59:50' prior: 50876883!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	message := OrderedCollection with: 'Deposito por 100' with: 'Balance = 100'. 
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 22:59:50'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:59:56'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 22:59:56'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:05:22' prior: 50876897!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	
	message := (OrderedCollection add: 'Deposito por 100') add: 'Balance = 0'.
	
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:05:24'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:05:32' prior: 50876919!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	
	message := (OrderedCollection new add: 'Deposito por 100') add: 'Balance = 0'.
	
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:05:35'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:06:07' prior: 50876934!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Balance = 0'.

	
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:06:08'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:07:02' prior: 50876836!
reviewAccount

	| message|
	
	message = OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Balance = 0'.
	^message
! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:07:09' prior: 50876965!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Balance = 0'.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 23:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 23:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 23:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 23:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 23:07:12'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:07:21'!
FAILURE!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:07:21'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:07:30'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:07:32'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:07:34'!
FAILURE!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:07:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:09:00' prior: 50876973!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [
		].
	message add: 'Balance = ', self balance asString .
	^message
! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:09:09' prior: 50877027!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [
			message add: 'Deposito por 100'.
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 23:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 23:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 23:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 23:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 23:09:10'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:09:16'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:09:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 23:09:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:09:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:09:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 23:09:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 23:09:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 23:09:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 23:09:39'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:09:42'!
FAILURE!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:09:42'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:09:54'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:09:54'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:10:22' prior: 50876766!
test01AccountSummaryWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := OrderedCollection new.	
	message add: 'Balance = 0'.

	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:10:22'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:10:22'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:10:22'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:10:22'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:10:43'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:11:15' prior: 50877035!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			message add: 'Deposito por 100'.
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 23:11:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:11:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:11:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 23:11:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 23:11:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 23:11:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 23:11:16'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:11:19'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:11:19'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:11:19'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:11:29' prior: 50876949!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:11:30'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:11:30'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:11:30'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:12:40'!
test02AccountSummaryWithWithdraw

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Extraccion por 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: account1 reviewAccount.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:14:05'!
test03AccountSummaryWithWithdraw

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Extraccion por 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: account1 reviewAccount.
! !

!methodRemoval: AccountSummaryTest #test02AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:14:06'!
test02AccountSummaryWithWithdraw

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Extraccion por 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: account1 reviewAccount.
!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:14:07'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:14:07'!
FAILURE!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:15:42' prior: 50877144!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por 100'.]
				ifFalse: [
					message add: 'Extraccion por 100'.
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 23:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 23:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 23:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 23:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 23:15:43'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:15:47'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:15:47'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:15:47'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:16:42'!
test04AccountSummaryWithRecevingTransference

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Extraccion por 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: account1 reviewAccount.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:17:29' prior: 50877306!
test04AccountSummaryWithRecevingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account1  to: account2.
	
	
	message := OrderedCollection new.
	message add: 'Extraccion por 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: account1 reviewAccount.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:19:15' prior: 50877319!
test04AccountSummaryWithRecevingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Entrada por transferencia de 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:19:16'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:19:53'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:19:53'!
FAILURE!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:22:32' prior: 50877257!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por 100'.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por 100'.]
						ifFalse: [
							message add: 'Entrada por transferencia de 30'.
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:22:55' prior: 50877361!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por', trans value.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por 100'.]
						ifFalse: [
							message add: 'Entrada por transferencia de 30'.
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:23:25' prior: 50877378!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							message add: 'Entrada por transferencia de ', trans value asString.
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 23:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 23:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 23:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 23:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 23:23:27'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:23:30'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:23:30'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:23:30'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:23:30'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:23:30'!
FAILURE!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:25:38' overrides: 16902254!
value
	^value ! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/30/2023 23:25:39'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/30/2023 23:25:39'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/30/2023 23:25:39'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/30/2023 23:25:39'!
PASSED!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/30/2023 23:25:39'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:26:07'!
test04AccountSummaryWithSendingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Entrada por transferencia de 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: account1 reviewAccount.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:26:11'!
test05AccountSummaryWithSendingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Entrada por transferencia de 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: account1 reviewAccount.
! !

!methodRemoval: AccountSummaryTest #test04AccountSummaryWithSendingTransference stamp: 'Ms 5/30/2023 23:26:13'!
test04AccountSummaryWithSendingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Entrada por transferencia de 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: account1 reviewAccount.
!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:33:32' prior: 50877494!
test05AccountSummaryWithSendingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Salida por transferencia de 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: account2 reviewAccount.
! !

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/30/2023 23:33:32'!
FAILURE!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:35:20'!
leftLeg
	^leftLeg
		
	! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:35:25'!
rightLeg
	^rightLeg
		
	! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:36:47' prior: 50877395!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans leftLeg == self)
							ifTrue: [
								message add: 'Entrada por transferencia de ', trans value asString.
							]
							ifFalse: [
								message add: 'Salida por transferencia de ', trans value asString.								
							]
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 23:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 23:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 23:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 23:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 23:36:48'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:36:52'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:36:52'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:36:52'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:36:52'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/30/2023 23:36:52'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:36:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:37:10' prior: 50877552!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans rightLeg == self)
							ifTrue: [
								message add: 'Entrada por transferencia de ', trans value asString.
							]
							ifFalse: [
								message add: 'Salida por transferencia de ', trans value asString.								
							]
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/30/2023 23:37:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:37:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/30/2023 23:37:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/30/2023 23:37:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/30/2023 23:37:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/30/2023 23:37:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/30/2023 23:37:11'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:37:14'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:37:14'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:37:14'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:37:14'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/30/2023 23:37:14'!
PASSED!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/30/2023 23:38:23' prior: 50877623!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans rightLeg == self)
								ifTrue: [
									message add: 'Entrada por transferencia de ', trans value asString.
								]
								ifFalse: [
									message add: 'Salida por transferencia de ', trans value asString.								
								]
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:42:13'!
test06AccountSummaryWithManyTransactions
	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.

	
	self assert: message equals: account2 reviewAccount.
! !

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/30/2023 23:42:15'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:42:46' prior: 50877715!
test06AccountSummaryWithManyTransactions
	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.

	
	self assert: message equals: account1 reviewAccount.
! !

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/30/2023 23:42:47'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:42:47'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:42:47'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:42:47'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:42:47'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/30/2023 23:42:47'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/30/2023 23:42:47'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/30/2023 23:48:08'!
test07ManyAccountSummaryWithManyTransactions
	| account1 account2 message message2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.
	
	message2 := OrderedCollection new.
	message2 add: 'Entrada por transferencia de 20'.
	message2 add: 'Salida por transferencia de 30'.
	message2 add: 'Balance = -10'.

	
	self assert: message equals: account1 reviewAccount.
	self assert: message2 equals: account2 reviewAccount.

! !

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/30/2023 23:48:09'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/30/2023 23:48:10'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/30/2023 23:48:10'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/30/2023 23:48:10'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/30/2023 23:48:10'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/30/2023 23:48:10'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/30/2023 23:48:10'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/30/2023 23:48:10'!
PASSED!

Transference subclass: #LeftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #LeftLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:04:33'!
Transference subclass: #LeftLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #RightLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RightLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:04:37'!
Transference subclass: #RightLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(31 May 2023 00:07:54) CuisUniversity-5706.image priorSource: 17441265!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:08:17' prior: 50875827!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	leftLeg := firstAccount.
	rightLeg := secondAccount.
	
	firstAccount register: (LeftLeg initializeWith: value).
	secondAccount register: self.
	
	! !
!LeftLeg methodsFor: 'nil' stamp: 'Ms 5/31/2023 00:08:37'!
initializeWith: aValue
	value := aValue.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:08:53' prior: 50877873!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	leftLeg := firstAccount.
	rightLeg := secondAccount.
	
	firstAccount register: (LeftLeg initializeWith: value).
	secondAccount register: (RightLeg initializeWith: value).
	
	! !
!RightLeg methodsFor: 'nil' stamp: 'Ms 5/31/2023 00:09:02'!
initializeWith: aValue
	value := aValue.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:09:19' prior: 50877887!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	
	firstAccount register: (LeftLeg initializeWith: value).
	secondAccount register: (RightLeg initializeWith: value).
	
	! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:08:53' prior: 50877902!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	leftLeg := firstAccount.
	rightLeg := secondAccount.
	
	firstAccount register: (LeftLeg initializeWith: value).
	secondAccount register: (RightLeg initializeWith: value).
	
	! !

Transference subclass: #LeftLeg
	instanceVariableNames: 'value account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:10:48'!
Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:10:54'!
Object subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #LeftLeg
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #LeftLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:11:00'!
Transference subclass: #LeftLeg
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #RightLeg
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RightLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:11:03'!
Transference subclass: #RightLeg
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:20:59' prior: 50877912!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	
	firstAccount register: (LeftLeg initializeWith: value).
	secondAccount register: (RightLeg initializeWith: value).
	
	! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:21:18' prior: 50876099!
affectBalance: aBalance for: anAccount
	self subclassResponsibility 
	! !
!LeftLeg methodsFor: 'nil' stamp: 'Ms 5/31/2023 00:21:36' overrides: 50877986!
affectBalance: aBalance for: anAccount
	^aBalance + value negated
	! !
!RightLeg methodsFor: 'nil' stamp: 'Ms 5/31/2023 00:21:47' overrides: 50877986!
affectBalance: aBalance for: anAccount
	^aBalance + value
	! !

!methodRemoval: Transference #leftLeg stamp: 'Ms 5/31/2023 00:22:40'!
leftLeg
	^leftLeg
		
	!

!methodRemoval: Transference #rightLeg stamp: 'Ms 5/31/2023 00:22:43'!
rightLeg
	^rightLeg
		
	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:33:07' prior: 50875339!
test03FirstAccountCanSearchSecondAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: firstAccount equals: (secondAccount getAnotherLeg: transfer).
! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:35:50'!
Object subclass: #Transference
	instanceVariableNames: 'value rightLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:35:51'!
Object subclass: #Transference
	instanceVariableNames: 'value rightLeg leftLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:35:47' prior: 50877976!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	rightLeg = RightLeg initializeWith: self.
	leftLeg = LeftLeg initializeWith: self.
	
	firstAccount register: leftLeg.
	secondAccount register: rightLeg.
	
	! !

Transference subclass: #LeftLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #LeftLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:36:17'!
Transference subclass: #LeftLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #RightLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RightLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:36:25'!
Transference subclass: #RightLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!RightLeg methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:36:36' prior: 50877996 overrides: 50877986!
affectBalance: aBalance for: anAccount
	^aBalance + transfer value
	! !
!RightLeg methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:36:53' prior: 50877897!
initializeWith: aTransfer
	transfer := aTransfer.! !
!LeftLeg methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:37:06' prior: 50877991 overrides: 50877986!
affectBalance: aBalance for: anAccount
	^aBalance + transfer value negated
	! !
!LeftLeg methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:37:17' prior: 50877882!
initializeWith: aTransfer
	transfer := aTransfer.! !

AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:54:53'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferDepositLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDepositLeg category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:55:23'!
AccountTransaction subclass: #TransferDepositLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #DepositLeg stamp: 'Ms 5/31/2023 00:55:29'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #LegDepositTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #LegDepositTransfer category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:55:40'!
AccountTransaction subclass: #LegDepositTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #LegWithdrawTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #LegWithdrawTransfer category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:55:56'!
AccountTransaction subclass: #LegWithdrawTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDepositLeg stamp: 'Ms 5/31/2023 00:56:00'!
AccountTransaction subclass: #TransferDepositLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:59:39'!
Object subclass: #Transference
	instanceVariableNames: 'value rightLeg leftLeg depositTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 00:59:42'!
Object subclass: #Transference
	instanceVariableNames: 'value rightLeg leftLeg depositTransfer withdrawTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 00:59:37' prior: 50878037!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	depositTransfer = LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount.
	withdrawTransfer = LegWithdrawTransfer initializeWithTransfer: self onAccount: secondAccount.
	
	"firstAccount register: leftLeg.
	secondAccount register: rightLeg.
	"
	! !
!LegDepositTransfer class methodsFor: 'nil' stamp: 'Ms 5/31/2023 01:02:15'!
initializeWithTransfer: aTransfer onAccount: anAccount.
	^self new initializeFrom: aTransfer onAccount: anAccount.
! !
!LegDepositTransfer methodsFor: 'nil' stamp: 'Ms 5/31/2023 01:02:44'!
initializeFrom: aTransfer onAccount: anAccount
	transfer := aTransfer.
	anAccount register: self.! !
!LegWithdrawTransfer class methodsFor: 'nil' stamp: 'Ms 5/31/2023 01:03:20'!
initializeWithTransfer: aTransfer onAccount: anAccount.
	^self new initializeFrom: aTransfer onAccount: anAccount.
! !
!LegWithdrawTransfer methodsFor: 'nil' stamp: 'Ms 5/31/2023 01:03:33'!
initializeFrom: aTransfer onAccount: anAccount
	transfer := aTransfer.
	anAccount register: self.! !
!LeftLeg methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:04:02'!
affectBalance: aBalance
	^aBalance + transfer value negated
	! !
!LegDepositTransfer methodsFor: 'nil' stamp: 'Ms 5/31/2023 01:04:30' overrides: 50873286!
affectBalance: aBalance
	^aBalance + transfer value negated
	! !
!LegWithdrawTransfer methodsFor: 'nil' stamp: 'Ms 5/31/2023 01:04:37' overrides: 50873286!
affectBalance: aBalance
	^aBalance + transfer value
	! !
!LegWithdrawTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:05:26' overrides: 50873282!
value
	^transfer value
	! !
!LegWithdrawTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:05:32' prior: 50878229 overrides: 50873286!
affectBalance: aBalance
	^aBalance + self value
	! !
!LegDepositTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:06:06' prior: 50878224 overrides: 50873286!
affectBalance: aBalance
	^aBalance + transfer value
	! !
!LegDepositTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:06:14' overrides: 50873282!
value 
	^transfer value
	! !
!LegDepositTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:06:19' prior: 50878246 overrides: 50873286!
affectBalance: aBalance
	^aBalance + self value
	! !
!LegWithdrawTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:06:24' prior: 50878240 overrides: 50873286!
affectBalance: aBalance
	^aBalance - self value
	! !

!methodRemoval: LeftLeg #affectBalance: stamp: 'Ms 5/31/2023 01:06:36'!
affectBalance: aBalance
	^aBalance + transfer value negated
	!

!methodRemoval: LeftLeg #affectBalance:for: stamp: 'Ms 5/31/2023 01:06:38'!
affectBalance: aBalance for: anAccount
	^aBalance + transfer value negated
	!

!methodRemoval: LeftLeg #initializeWith: stamp: 'Ms 5/31/2023 01:06:42'!
initializeWith: aTransfer
	transfer := aTransfer.!

!methodRemoval: RightLeg #affectBalance:for: stamp: 'Ms 5/31/2023 01:06:47'!
affectBalance: aBalance for: anAccount
	^aBalance + transfer value
	!

!methodRemoval: RightLeg #initializeWith: stamp: 'Ms 5/31/2023 01:06:49'!
initializeWith: aTransfer
	transfer := aTransfer.!

!classRemoval: #RightLeg stamp: 'Ms 5/31/2023 01:06:54'!
Transference subclass: #RightLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #LeftLeg stamp: 'Ms 5/31/2023 01:06:56'!
Transference subclass: #LeftLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'category-name' stamp: 'Ms 5/31/2023 01:07:41'!
depositTransfer  
	^depositTransfer ! !
!Transference methodsFor: 'category-name' stamp: 'Ms 5/31/2023 01:08:00'!
withdrawTransfer  
	^withdrawTransfer ! !

!methodRemoval: Transference #affectBalance:for: stamp: 'Ms 5/31/2023 01:08:11'!
affectBalance: aBalance for: anAccount
	self subclassResponsibility 
	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:10:38' prior: 50878008!
test03FirstAccountCanSearchSecondAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: transfer equals: transfer depositTransfer getTransfer.
! !
!LegDepositTransfer methodsFor: 'nil' stamp: 'Ms 5/31/2023 01:11:08'!
getTransfer
	^transfer! !
!LegWithdrawTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:12:06'!
getTransfer
	^transfer! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:12:12'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:12:12'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:12:59' prior: 50878181!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	depositTransfer = LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount.
	withdrawTransfer = LegWithdrawTransfer initializeWithTransfer: self onAccount: firstAccount.
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:13:00'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:13:00'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:13:00'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:13:00'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:13:00'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:13:04'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:15:28'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:15:28'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:15:28'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:15:28'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:15:28'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:15:30'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:15:43' prior: 50878344!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	depositTransfer = LegDepositTransfer new initializeWithTransfer: self onAccount: secondAccount.
	withdrawTransfer = LegWithdrawTransfer new initializeWithTransfer: self onAccount: firstAccount.
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:15:44'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:15:44'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:15:44'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:15:44'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:15:44'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:15:52' prior: 50878397!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	depositTransfer = LegDepositTransfer class initializeWithTransfer: self onAccount: secondAccount.
	withdrawTransfer = LegWithdrawTransfer class initializeWithTransfer: self onAccount: firstAccount.
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:15:53'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:15:53'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:15:53'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:15:53'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:15:53'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:15:55'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:16:23' prior: 50878426!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	depositTransfer = LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount.
	withdrawTransfer = LegWithdrawTransfer  initializeWithTransfer: self onAccount: firstAccount.
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:16:24'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:16:24'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:16:24'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:16:24'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:16:24'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:16:26'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:16:43'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:18:34' prior: 50878459!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	depositTransfer = LegDepositTransfer registerOn: self onAccount: secondAccount.
	withdrawTransfer = LegWithdrawTransfer  registerOn: self onAccount: firstAccount.
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:18:35'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:18:35'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:18:35'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:18:35'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:18:35'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:18:35'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:18:35'!
ERROR!
!LegDepositTransfer class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:18:51'!
registerOn: aTransfer onAccount: anAccount.
	^self new initializeFrom: aTransfer onAccount: anAccount.
! !
!LegWithdrawTransfer class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:18:58'!
registerOn: aTransfer onAccount: anAccount.
	^self new initializeFrom: aTransfer onAccount: anAccount.
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:19:01'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:19:01'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:19:01'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:19:01'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:19:01'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:19:03'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:16:23' prior: 50878495!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	depositTransfer = LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount.
	withdrawTransfer = LegWithdrawTransfer  initializeWithTransfer: self onAccount: firstAccount.
! !

!methodRemoval: LegDepositTransfer class #registerOn:onAccount: stamp: 'Ms 5/31/2023 01:19:36'!
registerOn: aTransfer onAccount: anAccount.
	^self new initializeFrom: aTransfer onAccount: anAccount.
!

!methodRemoval: LegWithdrawTransfer class #registerOn:onAccount: stamp: 'Ms 5/31/2023 01:19:38'!
registerOn: aTransfer onAccount: anAccount.
	^self new initializeFrom: aTransfer onAccount: anAccount.
!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:21:31'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:21:31'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:21:31'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:21:31'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:21:31'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:22:18' prior: 50878564!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	withdrawTransfer = LegWithdrawTransfer  initializeWithTransfer: self onAccount: firstAccount.
	depositTransfer = LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount.
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:22:19'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:22:19'!
ERROR!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:22:19'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:22:19'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:22:19'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:22:21'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:22:34'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:23:10' prior: 50878605!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	withdrawTransfer = (LegWithdrawTransfer  initializeWithTransfer: self onAccount: firstAccount).
	depositTransfer = (LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount).
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:23:11'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:23:11'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:23:11'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:23:11'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:23:11'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:23:13'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/31/2023 01:23:44' prior: 50874981 overrides: 50873052!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:23:59'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:23:59'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:23:59'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:23:59'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:23:59'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:24:01'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:26:21'!
ERROR!

!methodRemoval: Transference #getAnotherLeg: stamp: 'Ms 5/31/2023 01:26:39'!
getAnotherLeg: secondAccount 
	secondAccount  = leftLeg ifTrue: [^rightLeg].
	secondAccount  = rightLeg ifTrue: [^leftLeg].	
	^ self error: self class accountNotIncludedInTransfer
!
!Withdraw methodsFor: 'balance' stamp: 'Ms 5/31/2023 01:26:50' overrides: 50873286!
affectBalance: aBalance

	^aBalance - value! !

!methodRemoval: Withdraw #affectBalance:for: stamp: 'Ms 5/31/2023 01:26:52'!
affectBalance: aBalance  for: anAccount

	^aBalance - value!
!Deposit methodsFor: 'balance' stamp: 'Ms 5/31/2023 01:27:01' overrides: 50873286!
affectBalance: aBalance 

	^aBalance + value ! !

!methodRemoval: Deposit #affectBalance:for: stamp: 'Ms 5/31/2023 01:27:03'!
affectBalance: aBalance for: anAccount

	^aBalance + value !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:27:05'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:27:05'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:27:05'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:27:05'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:27:05'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:27:07'!
FAILURE!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:27:33'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:29:13' prior: 50874882!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: (firstAccount hasRegistered: transfer withdrawTransfer ).
	self assert: (secondAccount hasRegistered: transfer depositTransfer )! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:29:14'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:29:50' prior: 50878755!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: (firstAccount hasRegistered: transfer withdrawTransfer).
	self assert: (secondAccount hasRegistered: transfer depositTransfer).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:29:55' prior: 50878774!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: (firstAccount hasRegistered: transfer depositTransfer).
	self assert: (secondAccount hasRegistered: transfer withdrawTransfer).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:29:56'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:30:02' prior: 50878790!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: (firstAccount hasRegistered: transfer withdrawTransfer).
	self assert: (secondAccount hasRegistered: transfer depositTransfer).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:30:03'!
FAILURE!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:32:10'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:32:11'!
FAILURE!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:32:11'!
FAILURE!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:32:28'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:34:20' prior: 50878809!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: (firstAccount hasRegistered: (transfer withdrawTransfer)).
	self assert: (secondAccount hasRegistered: (transfer depositTransfer)).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:34:21'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:35:37' prior: 50878841!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: (firstAccount hasRegistered: transfer withdrawTransfer).
	self assert: (secondAccount hasRegistered: transfer depositTransfer).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:37:00'!
FAILURE!

Object subclass: #Transference
	instanceVariableNames: 'value depositTransfer withdrawTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 01:37:32'!
Object subclass: #Transference
	instanceVariableNames: 'value depositTransfer withdrawTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:38:06'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:38:06'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:38:06'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:38:06'!
ERROR!

!testRun: #TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:38:06'!
ERROR!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:39:00' prior: 50875406!
test04SecondAccountCanSearchFirstAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: transfer equals: transfer withdrawTransfer getTransfer.
! !

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:39:01'!
ERROR!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:39:11' prior: 50878910!
test04SecondAccountCanSearchFirstAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: transfer equals: (transfer withdrawTransfer) getTransfer.
! !

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:39:12'!
ERROR!

!methodRemoval: TransferenceTest #test05AccoutNotIncludeInTransfer stamp: 'Ms 5/31/2023 01:39:22'!
test05AccoutNotIncludeInTransfer
	| firstAccount secondAccount thirdAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.

	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self should: [ transfer getAnotherLeg: thirdAccount ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transference  accountNotIncludedInTransfer equals: anError messageText
		].
!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:39:31' prior: 50878927!
test04SecondAccountCanSearchFirstAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: transfer equals: transfer withdrawTransfer getTransfer.
! !

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:39:32'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:39:40'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:39:40'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:39:40'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:39:40'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:39:43'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:42:04' prior: 50878860!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: (firstAccount hasRegistered: (transfer withdrawTransfer)).
	self assert: (secondAccount hasRegistered: (transfer depositTransfer)).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:42:05'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:43:12' prior: 50878997!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount transfer a b|
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	a := transfer withdrawTransfer.
	b := transfer depositTransfer.

	self assert: (firstAccount hasRegistered: a).
	self assert: (secondAccount hasRegistered: b).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:43:13'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:43:51' prior: 50879016!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount aTransfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	aTransfer := Transference register: 50 from: firstAccount to: secondAccount.
	

	self assert: (firstAccount hasRegistered: aTransfer withdrawTransfer ).
	self assert: (secondAccount hasRegistered: aTransfer depositTransfer).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:43:52'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:44:06' prior: 50879035!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount aTransfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	aTransfer := Transference register: 50 from: firstAccount to: secondAccount.

	self assert: (firstAccount hasRegistered: aTransfer withdrawTransfer ).
	self assert: (secondAccount hasRegistered: aTransfer depositTransfer).! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 01:44:37'!
Object subclass: #Transference
	instanceVariableNames: 'value depositTransfer withdrawTransfer withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'category-name' stamp: 'Ms 5/31/2023 01:44:35' prior: 50878306!
withdrawTransfer  
	^withdraw! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 01:44:42'!
Object subclass: #Transference
	instanceVariableNames: 'value depositTransfer withdrawTransfer withdraw deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'category-name' stamp: 'Ms 5/31/2023 01:44:41' prior: 50878302!
depositTransfer  
	^deposit ! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:44:57' prior: 50878641!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	withdraw = (LegWithdrawTransfer  initializeWithTransfer: self onAccount: firstAccount).
	deposit= (LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount).
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:44:58' prior: 50879095!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	withdraw = (LegWithdrawTransfer  initializeWithTransfer: self onAccount: firstAccount).
	deposit = (LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount).
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 01:45:09'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:45:09'!
FAILURE!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 01:45:09'!
ERROR!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 01:45:09'!
ERROR!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:45:12'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:45:40' prior: 50879054!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount aTransfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	aTransfer := Transference register: 50 from: firstAccount to: secondAccount.

	self assert: (firstAccount hasRegistered: aTransfer  depositTransfer).
	self assert: (secondAccount hasRegistered: aTransfer withdrawTransfer).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:45:41'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:45:52' prior: 50879136!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount aTransfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	aTransfer := Transference register: 50 from: firstAccount to: secondAccount.

	self assert: (firstAccount hasRegistered: aTransfer).
	self assert: (secondAccount hasRegistered: aTransfer).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:45:52'!
FAILURE!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:46:55'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:47:32' prior: 50879155!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount aTransfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	aTransfer := Transference register: 50 from: firstAccount to: secondAccount.

	self assert: (firstAccount hasRegistered: aTransfer withdrawTransfer).
	self assert: (secondAccount hasRegistered: aTransfer depositTransfer).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:47:33'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:48:42' prior: 50879176!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount aTransfer a b  |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	aTransfer := Transference register: 50 from: firstAccount to: secondAccount.
	a := aTransfer withdrawTransfer.
	b := aTransfer depositTransfer.
	self assert: (firstAccount hasRegistered: aTransfer withdrawTransfer).
	self assert: (secondAccount hasRegistered: aTransfer depositTransfer).! !

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 01:48:44'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:49:46' prior: 50879195!
test02AccountsHaveRegisterTransfer
	| firstAccount secondAccount aTransfer  |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	aTransfer := Transference register: 50 from: firstAccount to: secondAccount.

	self assert: (firstAccount hasRegistered: aTransfer withdrawTransfer).
	self assert: (secondAccount hasRegistered: aTransfer depositTransfer).! !

Object subclass: #Transference
	instanceVariableNames: 'value withdraw deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 01:50:11'!
Object subclass: #Transference
	instanceVariableNames: 'value withdraw deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:51:26' prior: 50879107!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	withdraw = LegWithdrawTransfer  initializeWithTransfer: self onAccount: firstAccount.
	deposit = LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount.
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 01:51:28' prior: 50879244!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	withdraw = LegWithdrawTransfer initializeWithTransfer: self onAccount: firstAccount.
	deposit = LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount.
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:09:49'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:09:51'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:09:52'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:09:53'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:09:53'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:10:19' prior: 50877691!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans isKindOf: Deposit )
								ifTrue: [
									message add: 'Entrada por transferencia de ', trans value asString.
								]
								ifFalse: [
									message add: 'Salida por transferencia de ', trans value asString.								
								]
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:10:25' prior: 50879283!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans isKindOf: LegDepositTransfer )
								ifTrue: [
									message add: 'Entrada por transferencia de ', trans value asString.
								]
								ifFalse: [
									message add: 'Salida por transferencia de ', trans value asString.								
								]
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 02:10:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 02:10:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 02:10:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 02:10:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 02:10:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 02:10:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 02:10:26'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:10:30'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:10:30'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:10:36'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:10:36'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:10:36'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:10:36'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:10:36'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:10:36'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:10:36'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:11:33' prior: 50879308!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans isKindOf: LegWithdrawTransfer )
								ifTrue: [
									message add: 'Entrada por transferencia de ', trans value asString.
								]
								ifFalse: [
									message add: 'Salida por transferencia de ', trans value asString.								
								]
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 02:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 02:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 02:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 02:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 02:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 02:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 02:11:34'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:11:37'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:11:37'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:11:37'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:11:37'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:11:37'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:11:37'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:11:37'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:11:39'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:12:10' prior: 50879391!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans isKindOf: LegDepositTransfer )
								ifTrue: [
									message add: 'Entrada por transferencia de ', trans value asString.
								]
								ifFalse: [
									message add: 'Salida por transferencia de ', trans value asString.								
								]
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:12:16' prior: 50879470!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans isKindOf: LegDepositTransfer)
								ifTrue: [
									message add: 'Entrada por transferencia de ', trans value asString.
								]
								ifFalse: [
									message add: 'Salida por transferencia de ', trans value asString.								
								]
						]
				]
		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 02:16:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 02:16:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 02:16:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 02:16:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 02:16:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 02:16:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 02:16:29'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:16:33'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:16:33'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:16:48'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:17:21'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:17:43'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:18:32' prior: 50879255!
intializeValue: aValue from: firstAccount to: secondAccount
	value := aValue.
	withdraw := LegWithdrawTransfer initializeWithTransfer: self onAccount: firstAccount.
	deposit := LegDepositTransfer initializeWithTransfer: self onAccount: secondAccount.
! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 02:18:34'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 02:18:34'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 02:18:34'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 02:18:34'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 02:18:38'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 02:18:40'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:18:43'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:18:43'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:18:43'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:18:43'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:18:43'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:18:43'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:18:43'!
PASSED!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:19:46' prior: 50879495!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 
			message add: trans getMessageTransaction.
			
			"(trans isKindOf: Deposit) 
				ifTrue: [
					message add: 'Deposito por ', trans value asString.]
				ifFalse: [
					(trans isKindOf: Withdraw ) 
						ifTrue: [
							message add: 'Extraccion por ', trans value asString.]
						ifFalse: [
							(trans isKindOf: LegDepositTransfer)
								ifTrue: [
									message add: 'Entrada por transferencia de ', trans value asString.
								]
								ifFalse: [
									message add: 'Salida por transferencia de ', trans value asString.								
								]
						]
				]
			"
		].
	message add: 'Balance = ', self balance asString.
	^message
! !
!Deposit methodsFor: 'nil' stamp: 'Ms 5/31/2023 02:20:13'!
getMessageTransaction
	! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:20:34' prior: 50879645!
getMessageTransaction
	^'Deposito por ', self value asString.! !
!Account methodsFor: 'nil' stamp: 'Ms 5/31/2023 02:20:54'!
getMessageTransaction
	^'Deposito por ', self value asString.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:21:04' overrides: 50879653!
getMessageTransaction
	^'Deposito por ', self value asString.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:21:04' overrides: 50879653!
getMessageTransaction
	^'Deposito por ', self value asString.! !

!methodRemoval: Account #getMessageTransaction stamp: 'Ms 5/31/2023 02:21:04'!
getMessageTransaction
	^'Deposito por ', self value asString.!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:21:38'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:21:38'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:21:38'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:21:38'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:21:38'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:21:38'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:21:38'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:21:42'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:21:50'!
getMessageTransaction
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:22:09' prior: 50879702!
getMessageTransaction
	^'Extraccion por ', self value asString.! !

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:22:13'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:22:15'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:22:17'!
ERROR!
!LegDepositTransfer methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:22:24'!
getMessageTransaction
	self shouldBeImplemented.! !
!LegDepositTransfer methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:22:38' prior: 50879722!
getMessageTransaction
	^'Entrada por transferencia de ', self value asString! !

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:22:41'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:22:42'!
ERROR!
!LegWithdrawTransfer methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:22:48'!
getMessageTransaction
	self shouldBeImplemented.! !
!LegWithdrawTransfer methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:23:02' prior: 50879740!
getMessageTransaction
	^'Salida por transferencia de ', self value asString.								! !

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:23:06'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:23:07'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:23:08'!
PASSED!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:23:29' prior: 50879620!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 		message add: trans getMessageTransaction.		].
	message add: 'Balance = ', self balance asString.
	^message
! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 02:33:22'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:33:03' prior: 50877190!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: AccountSummary of: account1.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:33:34' prior: 50879780!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: (AccountSummary of: account1).
! !
!AccountSummary class methodsFor: 'nil' stamp: 'Ms 5/31/2023 02:33:56'!
of: anAccount
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:34:19' prior: 50879805!
of: anAccount
	^self new intializeWithAccount: anAccount.! !
!AccountSummary methodsFor: 'nil' stamp: 'Ms 5/31/2023 02:34:53'!
intializeWithAccount: anAccount
	account  := anAccount.
	message := OrderedCollection new.! !
!AccountSummary methodsFor: 'nil' stamp: 'Ms 5/31/2023 02:36:36'!
reviewAccount
		
	account showMessage: self.
	^message
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:37:23' prior: 50879818!
reviewAccount
		
	account showMessageSummary: self.
	^message
! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'Ms 5/31/2023 02:37:41'!
showMessageSummary: aSummary
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:39:41' prior: 50879828!
showMessageSummary: aSummary

	transactions do: [ :trans |  trans printOnSummaryMessage: aSummary	].
	aSummary printBalance: self balance.
! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:41:30'!
printOnSummaryMessage: aSummary
	^ aSummary printDepositWithValue: self value.! !
!Withdraw methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:41:55'!
printOnSummaryMessage: aSummary
	^ aSummary printWithdrawWithValue: self value.! !
!LegWithdrawTransfer methodsFor: 'category-name' stamp: 'Ms 5/31/2023 02:42:40'!
printOnSummaryMessage: aSummary
	^ aSummary printLegWithdrawWithValue: self value.! !
!LegDepositTransfer methodsFor: 'nil' stamp: 'Ms 5/31/2023 02:42:59'!
printOnSummaryMessage: aSummary
	^ aSummary printLegDepositWithValue: self value.! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:43:09'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:43:09'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:43:09'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:43:09'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:43:09'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:43:09'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:43:09'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:43:09'!
FAILURE!
!AccountSummary methodsFor: 'nil' stamp: 'Ms 5/31/2023 02:44:28'!
printDepositWithValue: aValue
	^'Deposito por ', aValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:44:48'!
printLegDepositWithValue: aValue
	^'Entrada por transferencia de ', aValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:45:08'!
printLegWithdrawWithValue: aValue
	^'Salida por transferencia de ', aValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:45:27'!
printWithdrawWithValue: aValue
	^'Extraccion por ', aValue asString.! !

!methodRemoval: Withdraw #getMessageTransaction stamp: 'Ms 5/31/2023 02:45:36'!
getMessageTransaction
	^'Extraccion por ', self value asString.!

!methodRemoval: LegWithdrawTransfer #getMessageTransaction stamp: 'Ms 5/31/2023 02:45:40'!
getMessageTransaction
	^'Salida por transferencia de ', self value asString.								!

!methodRemoval: LegDepositTransfer #getMessageTransaction stamp: 'Ms 5/31/2023 02:45:43'!
getMessageTransaction
	^'Entrada por transferencia de ', self value asString!

!methodRemoval: Deposit #getMessageTransaction stamp: 'Ms 5/31/2023 02:45:47'!
getMessageTransaction
	^'Deposito por ', self value asString.!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:45:54'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:45:54'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:45:54'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:45:54'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:45:54'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:45:54'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:45:54'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:46:43'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:46:45'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:46:45'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:47:12' prior: 50879793!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: (AccountSummary of: account1) reviewAccount.
! !

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:47:13'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:47:33' prior: 50877117!
test01AccountSummaryWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := OrderedCollection new.	
	message add: 'Balance = 0'.

	self assert: message equals: (AccountSummary of: account1) reviewAccount.
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:48:12'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:48:12'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:49:07'!
printBalance: aValue
	^'Balance = ', aValue asString.! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:49:08'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:49:08'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:49:08'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:49:08'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:49:08'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:49:08'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:49:08'!
ERROR!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:49:11'!
FAILURE!

!methodRemoval: ReceptiveAccount #reviewAccount stamp: 'Ms 5/31/2023 02:50:24'!
reviewAccount

	| message|
	
	message := OrderedCollection new.
	transactions do: [ :trans | 		message add: trans getMessageTransaction.		].
	message add: 'Balance = ', self balance asString.
	^message
!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:51:42' prior: 50880000!
printBalance: aValue
	^message add: 'Balance = ', aValue asString.! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:51:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:51:44'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:51:44'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:51:44'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:51:44'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:51:44'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:51:44'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:51:47'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:52:01' prior: 50879889!
printDepositWithValue: aValue
	^message add: 'Deposito por ', aValue asString.! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:52:04'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:52:04'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:52:04'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:52:04'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:52:04'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:52:04'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:52:04'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:52:13' prior: 50879894!
printLegDepositWithValue: aValue
	^message add:  'Entrada por transferencia de ', aValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:52:16' prior: 50879900!
printLegWithdrawWithValue: aValue
	^message add:  'Salida por transferencia de ', aValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:52:22' prior: 50879906!
printWithdrawWithValue: aValue
	^message add: 'Extraccion por ', aValue asString.! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:52:23'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:52:23'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:52:23'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:52:23'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:52:23'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:52:23'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:52:23'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:52:32'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:52:40'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:53:00' prior: 50877225!
test03AccountSummaryWithWithdraw

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Extraccion por 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals:  (AccountSummary of: account1) reviewAccount.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:53:05' prior: 50877334!
test04AccountSummaryWithRecevingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Entrada por transferencia de 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: (AccountSummary of: account1) reviewAccount.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:53:09' prior: 50877525!
test05AccountSummaryWithSendingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Salida por transferencia de 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: (AccountSummary of: account1) reviewAccount.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:53:14' prior: 50877742!
test06AccountSummaryWithManyTransactions
	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.

	
	self assert: message equals:  (AccountSummary of: account1) reviewAccount.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:53:20' prior: 50877789!
test07ManyAccountSummaryWithManyTransactions
	| account1 account2 message message2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.
	
	message2 := OrderedCollection new.
	message2 add: 'Entrada por transferencia de 20'.
	message2 add: 'Salida por transferencia de 30'.
	message2 add: 'Balance = -10'.

	
	self assert: message equals:  (AccountSummary of: account1) reviewAccount.
	self assert: message2 equals:  (AccountSummary of: account1) reviewAccount.

! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:53:22' prior: 50880226!
test07ManyAccountSummaryWithManyTransactions
	| account1 account2 message message2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.
	
	message2 := OrderedCollection new.
	message2 add: 'Entrada por transferencia de 20'.
	message2 add: 'Salida por transferencia de 30'.
	message2 add: 'Balance = -10'.

	
	self assert: message equals:  (AccountSummary of: account1) reviewAccount.
	self assert: message2 equals:  (AccountSummary of: account2) reviewAccount.

! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:53:25'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:53:25'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:53:25'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:53:25'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:53:25'!
FAILURE!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:53:25'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:53:25'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:53:25'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 02:53:50' prior: 50880186!
test05AccountSummaryWithSendingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Salida por transferencia de 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: (AccountSummary of: account2) reviewAccount.
! !

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:53:50'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 02:53:50'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 02:53:50'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 02:53:50'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 02:53:50'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 02:53:50'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:53:50'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 02:53:50'!
PASSED!

----SNAPSHOT----(31 May 2023 02:55:06) CuisUniversity-5706.image priorSource: 17479011!

----SNAPSHOT----(31 May 2023 02:56:59) CuisUniversity-5706.image priorSource: 17558744!

----STARTUP---- (31 May 2023 11:44:21) as C:\windows64\CuisUniversity-5706.image!

!LegDepositTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 11:51:15' prior: 50878329!
getTransfer
	^transfer withdrawTransfer ! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 11:51:26' prior: 50878316!
test03FirstAccountCanSearchSecondAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: transfer withdrawTransfer equals: transfer depositTransfer getTransfer.
! !

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 11:51:27'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 11:51:27'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 11:51:27'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 11:51:27'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 11:51:27'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 11:51:54' prior: 50878963!
test04SecondAccountCanSearchFirstAccount
	| firstAccount secondAccount transfer |
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	
	transfer := Transference register: 50 from: firstAccount to: secondAccount.
	
	self assert: transfer depositTransfer equals: transfer withdrawTransfer getTransfer.
! !
!LegWithdrawTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 11:52:00' prior: 50878333!
getTransfer
	^transfer depositTransfer! !

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 11:52:03'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 11:52:03'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 11:52:04'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 11:52:04'!
PASSED!

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:00:22'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:01:10'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'nil' stamp: 'Ms 5/31/2023 12:01:04'!
test01TransferNetWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := OrderedCollection new.	
	message add: 'Balance = 0'.

	self assert: message equals: (TransferNet of: account1) reviewAccount.
! !

Object subclass: #TransferNet
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:01:33'!
Object subclass: #TransferNet
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reporte category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:03:09'!
Object subclass: #Reporte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reporte subclass: #TransferNet
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:03:09'!
Reporte subclass: #TransferNet
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reporte subclass: #AccountSummary
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:03:17'!
Reporte subclass: #AccountSummary
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet class methodsFor: 'nil' stamp: 'Ms 5/31/2023 12:03:44'!
of: anAccount
	^self new intializeWithAccount: anAccount.! !
!TransferNet methodsFor: 'nil' stamp: 'Ms 5/31/2023 12:03:56'!
intializeWithAccount: anAccount
	account  := anAccount.
	message := OrderedCollection new.! !

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:04:25'!
ERROR!
!TransferNet methodsFor: 'nil' stamp: 'Ms 5/31/2023 12:04:40'!
reviewAccount
		
	account showMessageSummary: self.
	^message
! !

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:04:41'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:04:41'!
ERROR!
!TransferNet methodsFor: 'nil' stamp: 'Ms 5/31/2023 12:05:08'!
printBalance: aValue
	^message add: 'Balance = ', aValue asString.! !

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:05:11'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:18:30' prior: 50880526!
reviewAccount
		
	account showMessageTransferences: self.
	^message
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:18:34' prior: 50880546!
reviewAccount
		
	account showMessageSummary: self.
	^message
! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:20:03' prior: 50880458!
test01TransferNetWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := 'Balance = 0'.

	self assert: message equals: (TransferNet of: account1) reviewAccount.
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:20:35' prior: 50880552!
reviewAccount
		
	^account showMessageSummary: self.
	
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:21:06' prior: 50880568!
reviewAccount
		
	^account showMessageTransferences: self.
	
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:21:37'!
showMessageTransferences
! !

!methodRemoval: ReceptiveAccount #showMessageTransferences stamp: 'Ms 5/31/2023 12:21:42'!
showMessageTransferences
!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:24:46' prior: 50879823!
reviewAccount
		
	account processReport: self.
	^message
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:25:17'!
processReport: aSummary

	transactions do: [ :trans |  trans printOnSummaryMessage: aSummary	].
	aSummary printBalance: self balance.
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:25:34' prior: 50880573!
reviewAccount
		
	account processReport: self.
	^message
! !
!Reporte class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:26:11'!
of: anAccount
	^self new intializeWithAccount: anAccount.! !

!methodRemoval: TransferNet class #of: stamp: 'Ms 5/31/2023 12:26:11'!
of: anAccount
	^self new intializeWithAccount: anAccount.!

!methodRemoval: AccountSummary class #of: stamp: 'Ms 5/31/2023 12:26:17'!
of: anAccount
	^self new intializeWithAccount: anAccount.!

Reporte subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:26:45'!
Reporte subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reporte subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:26:49'!
Reporte subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Reporte
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reporte category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:26:52'!
Object subclass: #Reporte
	instanceVariableNames: 'account message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reporte subclass: #AccountSummary
	instanceVariableNames: 'message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Reporte
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reporte category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:27:42'!
Object subclass: #Reporte
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reporte subclass: #AccountSummary
	instanceVariableNames: 'message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:27:45'!
Reporte subclass: #AccountSummary
	instanceVariableNames: 'message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:29:01' prior: 50880586!
reviewAccount
		
	account processReport: self.
! !
!Reporte methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:29:06'!
reviewAccount
		
	account processReport: self.
! !

!methodRemoval: AccountSummary #reviewAccount stamp: 'Ms 5/31/2023 12:29:06'!
reviewAccount
		
	account processReport: self.
!

!methodRemoval: TransferNet #reviewAccount stamp: 'Ms 5/31/2023 12:29:15'!
reviewAccount
		
	account processReport: self.
	^message
!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:31:10' prior: 50880591!
processReport: aReport

	transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance.
! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:31:40'!
addTransactionToReport: aReport
	^ aReport addDepositWithValue: self value.! !
!LegDepositTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:32:12'!
addTransactionToReport: aReport
   ^ aReport addLegDepositWithValue: self value.! !
!Withdraw methodsFor: 'category-name' stamp: 'Ms 5/31/2023 12:32:29'!
addTransactionToReport: aReport
   ^ aReport addWithdrawWithValue: self value.! !
!LegWithdrawTransfer methodsFor: 'category-name' stamp: 'Ms 5/31/2023 12:33:00'!
addTransactionToReport: aReport
   ^ aReport addLegWithdrawWithValue: self value.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:33:50'!
addDepositWithValue: aValue
	^message add: 'Deposito por ', aValue asString.! !

!methodRemoval: AccountSummary #printDepositWithValue: stamp: 'Ms 5/31/2023 12:33:50'!
printDepositWithValue: aValue
	^message add: 'Deposito por ', aValue asString.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:34:09'!
addLegDepositWithValue: aValue
	^message add:  'Entrada por transferencia de ', aValue asString.! !

!methodRemoval: AccountSummary #printLegDepositWithValue: stamp: 'Ms 5/31/2023 12:34:09'!
printLegDepositWithValue: aValue
	^message add:  'Entrada por transferencia de ', aValue asString.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:34:19'!
addLegWithdrawWithValue: aValue
	^message add:  'Salida por transferencia de ', aValue asString.! !

!methodRemoval: AccountSummary #printLegWithdrawWithValue: stamp: 'Ms 5/31/2023 12:34:19'!
printLegWithdrawWithValue: aValue
	^message add:  'Salida por transferencia de ', aValue asString.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:34:35'!
addWithdrawWithValue: aValue
	^message add: 'Extraccion por ', aValue asString.! !

!methodRemoval: AccountSummary #printWithdrawWithValue: stamp: 'Ms 5/31/2023 12:34:35'!
printWithdrawWithValue: aValue
	^message add: 'Extraccion por ', aValue asString.!
!Reporte methodsFor: 'nil' stamp: 'Ms 5/31/2023 12:35:11'!
addLegDepositWithValue: aValue
	self subclassResponsibility ! !
!Reporte methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:35:16'!
addDepositWithValue: aValue
	self subclassResponsibility ! !
!Reporte methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:35:21'!
addWithdrawWithValue: aValue
	self subclassResponsibility ! !
!Reporte methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:35:30'!
addLegWithdrawWithValue: aValue
	self subclassResponsibility ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:35:54' overrides: 50880784!
addWithdrawWithValue: aValue
	 ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:35:58' overrides: 50880779!
addDepositWithValue: aValue
	 ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:36:01' overrides: 50880774!
addLegDepositWithValue: aValue
	 ! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 12:36:38'!
Reporte subclass: #TransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:36:36' prior: 50880805 overrides: 50880774!
addLegDepositWithValue: aValue
	balance := balance + aValue	 ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:36:47' overrides: 50880789!
addLegWithdrawWithValue: aValue
	balance := balance - aValue	 ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:37:56' prior: 50880537!
printBalance: aValue
	^'Balance = ', aValue asString.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:38:24' prior: 50880517!
intializeWithAccount: anAccount
	account  := anAccount.
! !
!Reporte methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:38:39'!
intializeWithAccount: anAccount
	account  := anAccount.
! !

!methodRemoval: TransferNet #intializeWithAccount: stamp: 'Ms 5/31/2023 12:38:39'!
intializeWithAccount: anAccount
	account  := anAccount.
!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:38:59'!
intialize
	message := OrderedCollection new.! !

!methodRemoval: AccountSummary #intializeWithAccount: stamp: 'Ms 5/31/2023 12:39:03'!
intializeWithAccount: anAccount
	account  := anAccount.
	message := OrderedCollection new.!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:39:24' overrides: 16920235!
initialize
	balance := 0! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:39:40' overrides: 16920235!
initialize
	message := OrderedCollection new.! !

!methodRemoval: AccountSummary #intialize stamp: 'Ms 5/31/2023 12:39:40'!
intialize
	message := OrderedCollection new.!
!Reporte methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:40:46' prior: 50880840!
intializeWithAccount: anAccount
	account  := anAccount.
	account processReport: self.

! !

!methodRemoval: Reporte #reviewAccount stamp: 'Ms 5/31/2023 12:40:49'!
reviewAccount
		
	account processReport: self.
!
!AccountSummary methodsFor: 'nil' stamp: 'Ms 5/31/2023 12:41:29' overrides: 16902254!
value
	^message! !
!TransferNet methodsFor: 'nil' stamp: 'Ms 5/31/2023 12:41:38' overrides: 16902254!
value
	^balance! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:42:19' prior: 50879983!
test01AccountSummaryWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := OrderedCollection new.	
	message add: 'Balance = 0'.

	self assert: message equals: (AccountSummary of: account1) value.
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 12:42:21'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:42:30' prior: 50879966!
test02AccountSummaryWithDeposit

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: (AccountSummary of: account1) value.
! !

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 12:42:31'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 12:42:31'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 12:42:31'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 12:42:31'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 12:42:31'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 12:42:31'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 12:42:31'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 12:42:31'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:42:45' prior: 50880156!
test03AccountSummaryWithWithdraw

	| account1 message |
	
	account1 := ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	
	
	message := OrderedCollection new.
	message add: 'Extraccion por 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals:  (AccountSummary of: account1) value.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:42:49' prior: 50880170!
test04AccountSummaryWithRecevingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Entrada por transferencia de 100'.
	message add: 'Balance = 100'.

	
	self assert: message equals: (AccountSummary of: account1) value.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:42:52' prior: 50880318!
test05AccountSummaryWithSendingTransference

	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	
	message := OrderedCollection new.
	message add: 'Salida por transferencia de 100'.
	message add: 'Balance = -100'.

	
	self assert: message equals: (AccountSummary of: account2) value.
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:43:01' prior: 50880202!
test06AccountSummaryWithManyTransactions
	| account1 account2 message |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.

	
	self assert: message equals:  (AccountSummary of: account1) value.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:43:06' prior: 50880258!
test07ManyAccountSummaryWithManyTransactions
	| account1 account2 message message2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.
	
	message2 := OrderedCollection new.
	message2 add: 'Entrada por transferencia de 20'.
	message2 add: 'Salida por transferencia de 30'.
	message2 add: 'Balance = -10'.

	
	self assert: message equals:  (AccountSummary of: account1) value.
	self assert: message2 equals:  (AccountSummary of: account2) reviewAccount.

! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:43:09' prior: 50881016!
test07ManyAccountSummaryWithManyTransactions
	| account1 account2 message message2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transference register: 20 from: account1  to: account2.
	Transference register: 30 from: account2  to: account1.
	
	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Extraccion por 50'.
	message add: 'Salida por transferencia de 20'.
	message add: 'Entrada por transferencia de 30'.
	message add: 'Balance = 60'.
	
	message2 := OrderedCollection new.
	message2 add: 'Entrada por transferencia de 20'.
	message2 add: 'Salida por transferencia de 30'.
	message2 add: 'Balance = -10'.

	
	self assert: message equals:  (AccountSummary of: account1) value.
	self assert: message2 equals:  (AccountSummary of: account2) value.

! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 12:43:25'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 12:43:25'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 12:43:25'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 12:43:25'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 12:43:25'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 12:43:25'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 12:43:25'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:43:33' prior: 50880558!
test01TransferNetWithBalanceZero

	| account1  message |
	
	account1 := ReceptiveAccount new.
			
	message := 'Balance = 0'.

	self assert: message equals: (TransferNet of: account1) value.
! !

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:43:34'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:43:45' prior: 50881104!
test01TransferNetWithBalanceZero

	| account1  |
	
	account1 := ReceptiveAccount new.
			
	self assert: 0 equals: (TransferNet of: account1) value.
! !

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:43:47'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:43:47'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:45:02'!
test02TransferNetWithRecevingTransference

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	self assert: 100 equals: (TransferNet of: account1) value.! !

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 12:45:04'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:45:04'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 12:45:04'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 12:45:35'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:45:35'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 12:45:35'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 12:46:38'!
test03TransferNetWithSendingTransference

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	
	self assert: -100 equals: (TransferNet of: account2) value.
! !

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 12:46:41'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 12:46:41'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 12:46:41'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 12:46:41'!
PASSED!

----SNAPSHOT----(31 May 2023 12:46:55) CuisUniversity-5706.image priorSource: 17558833!

----SNAPSHOT----(31 May 2023 13:33:45) CuisUniversity-5706.image priorSource: 17585175!

----STARTUP---- (31 May 2023 14:33:06) as C:\windows64\CuisUniversity-5706.image!

!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:35:35'!
test04DepositDontAffectTransferNet

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	Transference register: 200 from: account2  to: account1.
	Transference register: 130 from: account2  to: account1.
	Transference register: 10 from: account2  to: account1.

	
	self assert: -100 equals: (TransferNet of: account1) value.
	self assert: -100 equals: (TransferNet of: account2) value.

! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:35:57' prior: 50881196!
test04DepositDontAffectTransferNet

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	Deposit register: 100 on: account1.
	
	self assert: 100 equals: (TransferNet of: account1) value.

! !

!testRun: #TransferNetTest #test04DepositDontAffectTransferNet stamp: 'Ms 5/31/2023 14:35:58'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:35:58'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 14:35:58'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 14:35:58'!
PASSED!

!testRun: #TransferNetTest #test04DepositDontAffectTransferNet stamp: 'Ms 5/31/2023 14:35:58'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:37:33'!
test05MultipleTransferencesTransferNet

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	Transference register: 30 from: account1  to: account2.
	Transference register: 100 from: account2  to: account1.
	
	self assert: 170 equals: (TransferNet of: account1) value.
	self assert: -170 equals: (TransferNet of: account2) value.

! !

!testRun: #TransferNetTest #test05MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 14:37:34'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:37:34'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 14:37:34'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 14:37:34'!
PASSED!

!testRun: #TransferNetTest #test04DepositDontAffectTransferNet stamp: 'Ms 5/31/2023 14:37:34'!
PASSED!

!testRun: #TransferNetTest #test05MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 14:37:34'!
PASSED!

!methodRemoval: TransferNetTest #test04DepositDontAffectTransferNet stamp: 'Ms 5/31/2023 14:37:46'!
test04DepositDontAffectTransferNet

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	Deposit register: 100 on: account1.
	
	self assert: 100 equals: (TransferNet of: account1) value.

!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:37:49'!
test04MultipleTransferencesTransferNet

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	Transference register: 30 from: account1  to: account2.
	Transference register: 100 from: account2  to: account1.
	
	self assert: 170 equals: (TransferNet of: account1) value.
	self assert: -170 equals: (TransferNet of: account2) value.

! !

!methodRemoval: TransferNetTest #test05MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 14:37:51'!
test05MultipleTransferencesTransferNet

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	Transference register: 30 from: account1  to: account2.
	Transference register: 100 from: account2  to: account1.
	
	self assert: 170 equals: (TransferNet of: account1) value.
	self assert: -170 equals: (TransferNet of: account2) value.

!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:43:28'!
test08PortofolioAccountSummaryWithBalanceZero
	| portfolio message |
	
	portfolio := Portfolio new.

	message := OrderedCollection new.
	message add: 'Balance = 0'.
	
	self assert: message equals:  (AccountSummary of: portfolio) value.

! !

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 14:43:32'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'Ms 5/31/2023 14:44:49'!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance.
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 14:44:55'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 14:44:55'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 14:44:55'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 14:44:55'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 14:44:55'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 14:44:55'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 14:44:55'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 14:44:55'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:45:39' prior: 50880699!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 14:45:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 14:45:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 14:45:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 14:45:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 14:45:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 14:45:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 14:45:40'!
PASSED!
!Account methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:45:49'!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance.
! !

!methodRemoval: ReceptiveAccount #processReport: stamp: 'Ms 5/31/2023 14:45:49'!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance.
!

!methodRemoval: Portfolio #processReport: stamp: 'Ms 5/31/2023 14:45:54'!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance.
!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 14:45:57'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 14:45:57'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 14:45:57'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 14:45:57'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 14:45:57'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 14:45:57'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 14:45:57'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 14:45:57'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:48:12'!
test09PortofolioAccountSummaryWithManyAccounts
	| portfolio account1 account2 message |
	portfolio := Portfolio new.
	account1  := ReceptiveAccount new.
	Deposit register: 100  on: account1.
	Deposit register: 300  on: account2.
	
	portfolio with: account1.
	portfolio with: account2.


	message := OrderedCollection new.
	message add: 'Balance = 0'.
	
	self assert: message equals:  (AccountSummary of: portfolio) value.

! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:49:26' prior: 50881460!
test09PortofolioAccountSummaryWithManyAccounts
	| portfolio account1 account2 message |

	account1  := ReceptiveAccount new.
	Deposit register: 100  on: account1.
	Deposit register: 300  on: account2.
	
	portfolio := Portfolio with: account1 with: account2.


	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Deposito por 300'.
	message add: 'Balance = 0'.
	
	self assert: message equals:  (AccountSummary of: portfolio) value.

! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:49:37' prior: 50881477!
test09PortofolioAccountSummaryWithManyAccounts
	| portfolio account1 account2 message |

	account1  := ReceptiveAccount new.
	account2  := ReceptiveAccount new.

	Deposit register: 100  on: account1.
	Deposit register: 300  on: account2.
	
	portfolio := Portfolio with: account1 with: account2.


	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Deposito por 300'.
	message add: 'Balance = 0'.
	
	self assert: message equals:  (AccountSummary of: portfolio) value.

! !

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 5/31/2023 14:49:38'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:49:47' prior: 50881495!
test09PortofolioAccountSummaryWithManyAccounts
	| portfolio account1 account2 message |

	account1  := ReceptiveAccount new.
	account2  := ReceptiveAccount new.

	Deposit register: 100  on: account1.
	Deposit register: 300  on: account2.
	
	portfolio := Portfolio with: account1 with: account2.


	message := OrderedCollection new.
	message add: 'Deposito por 100'.
	message add: 'Deposito por 300'.
	message add: 'Balance = 400'.
	
	self assert: message equals:  (AccountSummary of: portfolio) value.

! !

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 5/31/2023 14:49:47'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:50:21'!
test04PortfolioTransferNetWithBalanceZero

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	Transference register: 30 from: account1  to: account2.
	Transference register: 100 from: account2  to: account1.
	
	self assert: 170 equals: (TransferNet of: account1) value.
	self assert: -170 equals: (TransferNet of: account2) value.

! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:50:52' prior: 50881572!
test04PortfolioTransferNetWithBalanceZero

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals:  (AccountSummary of: portfolio) value.


! !

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:50:54'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:51:10' prior: 50881589!
test04PortfolioTransferNetWithBalanceZero

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals:  (TransferNet of: portfolio) value.


! !

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:51:11'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:51:11'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 14:51:11'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 14:51:11'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 14:51:11'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:51:11'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:52:00'!
test05PortfolioTransferNetWithMultipleAccount

	| portfolio account1 account2 |

	account1  := ReceptiveAccount new.
	account2  := ReceptiveAccount new.

	Deposit register: 100  on: account1.
	Deposit register: 300  on: account2.
	
	portfolio := Portfolio with: account1 with: account2.
	
	self assert: 400 equals:  (TransferNet of: portfolio) value.
! !

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 14:52:04'!
FAILURE!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:53:17'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 14:53:17'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 14:53:17'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 14:53:17'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:53:17'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 14:53:17'!
FAILURE!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 14:53:17'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:55:11' prior: 50881629!
test05PortfolioTransferNetWithMultipleAccount

	| portfolio account1 account2 |

	account1  := ReceptiveAccount new.
	account2  := ReceptiveAccount new.

	Transference register: 100 from: account1  to: account2.
	Transference register: 300 from: account1  to: account2.

	portfolio := Portfolio with: account1 with: account2.
	
	self assert: 400 equals:  (TransferNet of: portfolio) value.
! !

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 14:55:12'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:55:29' prior: 50881671!
test05PortfolioTransferNetWithMultipleAccount

	| portfolio account1 account2 |

	account1  := ReceptiveAccount new.
	account2  := ReceptiveAccount new.

	Transference register: 100 from: account2  to: account1.
	Transference register: 300 from: account2  to: account1.

	portfolio := Portfolio with: account1 with: account2.
	
	self assert: 400 equals:  (TransferNet of: portfolio) value.
! !

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 14:55:29'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 14:56:14' prior: 50881691!
test05PortfolioTransferNetWithMultipleAccount

	| portfolio account1 account2 account3 |

	account1  := ReceptiveAccount new.
	account2  := ReceptiveAccount new.
	account3  := ReceptiveAccount new.

	Transference register: 100 from: account3  to: account1.
	Transference register: 300 from: account3  to: account2.

	portfolio := Portfolio with: account1 with: account2.
	
	self assert: 400 equals:  (TransferNet of: portfolio) value.
! !

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 14:56:16'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:56:16'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 14:56:16'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 14:56:16'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 14:56:16'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 14:56:16'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 14:56:16'!
PASSED!

----SNAPSHOT----(31 May 2023 14:58:25) CuisUniversity-5706.image priorSource: 17585264!

TestCase subclass: #ReportPortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportPortfolioTest category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 14:59:58'!
TestCase subclass: #ReportPortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportPortfolioTest methodsFor: 'nil' stamp: 'Ms 5/31/2023 15:05:25'!
test01PortofolioNotHaveAccounts

	| portfolio message |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

TestCase subclass: #ReportPortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportPortfolioTest category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 15:05:40'!
TestCase subclass: #ReportPortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reporte subclass: #PortfolioEstruct
	instanceVariableNames: 'message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioEstruct category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 15:06:06'!
Reporte subclass: #PortfolioEstruct
	instanceVariableNames: 'message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Reporte methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:13:28' prior: 50880874!
intializeWithAccount: anAccount
	account  := anAccount.

! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:13:33' prior: 50880865 overrides: 16920235!
initialize
	message := OrderedCollection new.
		account processReport: self.
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:13:35' prior: 50881810 overrides: 16920235!
initialize
	message := OrderedCollection new.
	account processReport: self.
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:13:53' prior: 50880860 overrides: 16920235!
initialize
	balance := 0.
	account processReport: self.
! !
!PortfolioEstruct methodsFor: 'nil' stamp: 'Ms 5/31/2023 15:14:22' overrides: 16920235!
initialize
	account acountReport: self.
! !
!Portfolio methodsFor: 'nil' stamp: 'Ms 5/31/2023 15:14:43'!
acountReport: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:15:15' prior: 50881833!
acountReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:17:06' prior: 50881837!
acountReport: aReport

	aReport printName: self name.
	accounts do: [ :acc |  acc addNameAccountToReport: aReport	].
! !
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:18:05' overrides: 16902254!
value
	^'Portfolio de la familia'! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:18:06'!
ERROR!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:18:06'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:19:18'!
named: aName

	^self new! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:19:37' prior: 50881864!
named: aName

	^self new initializeWithPreviousState: aName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:19:39' prior: 50881868!
named: aName

	^self new initializeWithName: aName.! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 15:20:00'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'Ms 5/31/2023 15:19:59'!
initializeWithName: aName
	name := aName.! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:20:13'!
ERROR!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:20:13'!
ERROR!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:20:43' prior: 50881829 overrides: 16920235!
initialize
	"account acountReport: self."
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:20:44'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:20:44'!
FAILURE!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:21:13' prior: 50881853 overrides: 16902254!
value
	message add: 'Portfolio de la familia'.
	^message ! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:21:14'!
ERROR!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:21:14'!
ERROR!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:21:48' prior: 50881898 overrides: 16920235!
initialize
	message := OrderedCollection new.
	"account acountReport: self."
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:21:49'!
PASSED!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:23:23'!
test02PortofolioWithOneAccount

	| portfolio myAccount message message2 |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	
	message2 := OrderedCollection new.
	message2 add: 'Cuenta mia'.
	
	message add: message2.

	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:24:58' prior: 50881932!
test02PortofolioWithOneAccount

	| portfolio myAccount message message2 |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	
	message2 := OrderedCollection new.
	message2 add: '	Cuenta mia'.
	
	message add: message2.

	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:25:24'!
named: aName with: anAccount

	^self new initializeWithName: aName with: anAccount.! !
!Portfolio methodsFor: 'initialization' stamp: 'Ms 5/31/2023 15:25:45'!
initializeWithName: aName with: anAccount
	name := aName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:26:43' prior: 50881966!
named: aName with: anAccount

	^(self new initializeWithName: aName) add: anAccount.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/31/2023 15:26:45'!
PASSED!

!methodRemoval: Portfolio #initializeWithName:with: stamp: 'Ms 5/31/2023 15:26:54'!
initializeWithName: aName with: anAccount
	name := aName.!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:27:02'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:27:20'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:28:00'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:28:00'!
ERROR!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 15:29:52'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 15:29:57'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account class methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:30:15'!
named: aName

	^self new initializeWithName: aName.! !

!methodRemoval: Portfolio class #named: stamp: 'Ms 5/31/2023 15:30:15'!
named: aName

	^self new initializeWithName: aName.!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:30:41'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:30:41'!
ERROR!
!Account methodsFor: 'initialization' stamp: 'Ms 5/31/2023 15:31:14'!
initializeWithName: aName
	name := aName.! !

!methodRemoval: Portfolio #initializeWithName: stamp: 'Ms 5/31/2023 15:31:14'!
initializeWithName: aName
	name := aName.!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:31:23'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:31:23'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:31:23'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:33:36'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:33:46'!
FAILURE!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:34:50' prior: 50881923 overrides: 16920235!
initialize
	message := OrderedCollection new.
	account acountReport: self.
! !
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:36:44'!
printNameP: aName
	message add: 'aName'
! !
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:36:47'!
printName: aName
	message add: 'aName'
! !

!methodRemoval: PortfolioEstruct #printNameP: stamp: 'Ms 5/31/2023 15:36:48'!
printNameP: aName
	message add: 'aName'
!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:39:39' prior: 50881845!
acountReport: aReport

	aReport printName: self name.
	accounts do: [ :acc |  acc acountReport: aReport	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 15:40:26'!
acountReport: aReport! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 15:41:06' prior: 50882146!
acountReport: aReport	
	aReport printName: self name.
! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:41:17'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:41:17'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:42:50'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:42:50'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:43:11'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:43:24'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:43:35'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 15:44:24'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 15:44:24'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 15:44:24'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 15:44:24'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 15:44:24'!
ERROR!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 15:44:24'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 15:44:27'!
ERROR!
!Reporte methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:44:49' prior: 50881804!
intializeWithAccount: anAccount
	self subclassResponsibility 
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:45:17' overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account processReport: self.
! !

!methodRemoval: AccountSummary #initialize stamp: 'Ms 5/31/2023 15:45:25'!
initialize
	message := OrderedCollection new.
	account processReport: self.
!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:45:35' overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account acountReport: self.
! !

!methodRemoval: PortfolioEstruct #initialize stamp: 'Ms 5/31/2023 15:45:37'!
initialize
	message := OrderedCollection new.
	account acountReport: self.
!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:45:44' overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	balance := 0.
	account processReport: self.
! !

!methodRemoval: TransferNet #initialize stamp: 'Ms 5/31/2023 15:45:49'!
initialize
	balance := 0.
	account processReport: self.
!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 15:45:50'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 15:45:50'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 15:45:50'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 15:45:50'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 15:45:50'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 15:45:50'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 15:45:52'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 15:45:52'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 15:45:52'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 15:45:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 15:45:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 15:45:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 15:45:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 15:45:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 15:45:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 15:45:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 15:45:54'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:45:56'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:45:56'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:46:02'!
FAILURE!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:47:01' prior: 50882131!
printName: aName
	message add: aName
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:47:03'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:47:22'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:47:29'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:48:20'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:49:33'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:49:33'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:50:41' overrides: 16903442!
name
	^name ! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:50:46'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:50:46'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:52:22'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 15:53:15' overrides: 16903442!
name
	^name ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 15:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 15:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 15:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 15:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 15:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 15:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 15:53:16'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:53:21'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:53:21'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:54:25'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:54:25'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:55:16'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:55:16'!
FAILURE!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:57:18' prior: 50881910 overrides: 16902254!
value
	^message ! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 15:57:25'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:57:27'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 15:57:27'!
FAILURE!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/31/2023 16:00:57'!
PASSED!

----SNAPSHOT----(31 May 2023 16:01:25) CuisUniversity-5706.image priorSource: 17603226!

----STARTUP---- (31 May 2023 20:02:50) as C:\windows64\CuisUniversity-5706.image!


!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 20:28:42'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 20:28:42'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 20:28:42'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 20:28:42'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 20:28:42'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 20:28:42'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 20:28:46'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:28:46'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:28:46'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:31:56'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:31:56'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 20:36:10' prior: 50882140!
acountReport: aReport
	| message |
	aReport printName: self name.
	
	message := OrderedCollection new.
	
	accounts do: [ :acc | message add: (acc acountReport: aReport	)
	].


! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 20:36:38' prior: 50882150!
acountReport: aReport	
	^aReport printName: self name.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:39:39' prior: 50882518!
acountReport: aReport

	aReport printName: self name.
	accounts do: [ :acc |  acc acountReport: aReport	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 20:47:46' prior: 50882532!
acountReport: aReport
	|message|
	aReport printName: self name.
	message := OrderedCollection new.
	accounts inject: message  into: [:acc | acc acountReport: aReport].
	aReport printName: message.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 20:47:50' prior: 50882539!
acountReport: aReport
	|message|
	aReport printName: self name.
	message := OrderedCollection new.
	
	accounts inject: message  into: [:acc | acc acountReport: aReport].
	aReport printName: message.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 20:48:57' prior: 50882527!
acountReport: aReport	
	^self name.
! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:49:08'!
ERROR!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:49:08'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 20:36:38' prior: 50882559!
acountReport: aReport	
	^aReport printName: self name.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:39:39' prior: 50882549!
acountReport: aReport

	aReport printName: self name.
	accounts do: [ :acc |  acc acountReport: aReport	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 20:51:18' prior: 50882575!
acountReport: aReport

	aReport printName: self name.
	accounts do: [ :acc |  |message|
		message add: (acc acountReport: aReport	)
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 20:51:50' prior: 50882582!
acountReport: aReport

	| message |
	message := OrderedCollection new.
	aReport printName: self name.
	accounts do: [ :acc |  
		message add: (acc acountReport: aReport	)
	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 20:52:14' prior: 50882570!
acountReport: aReport	
	^self name.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 20:52:53' prior: 50882590!
acountReport: aReport

	| message |
	message := OrderedCollection new.
	aReport printName: self name.
	accounts do: [ :acc |  
		message add: (acc acountReport: aReport	)
	].
	aReport printName: message.
! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/31/2023 20:52:54'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/31/2023 20:52:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/31/2023 20:52:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/31/2023 20:52:55'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:53:02'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:53:02'!
FAILURE!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 20:53:23' prior: 50881949!
test02PortofolioWithOneAccount

	| portfolio myAccount message message2 |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	
	message2 := OrderedCollection new.
	message2 add: 'Cuenta mia'.
	
	message add: message2.

	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 20:53:24'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 20:53:26'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 20:53:26'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 15:39:39' prior: 50882604!
acountReport: aReport

	aReport printName: self name.
	accounts do: [ :acc |  acc acountReport: aReport	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 20:36:38' prior: 50882599!
acountReport: aReport	
	^aReport printName: self name.
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:02:46'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:02:51'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:02:51'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:04:09' prior: 50882705!
acountReport: aReport
	|message|
	message := OrderedCollection new.
	aReport printName: self name.
	
	accounts do: [ :acc |  
			message add: acc name
	].
	aReport printName: message.

	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:04:22' prior: 50882727!
acountReport: aReport
	|message|
	message := OrderedCollection new.
	aReport printName: self name.
	
	accounts do: [ :acc |  
		message add: acc name
	].
	aReport printName: message.

	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:04:09' prior: 50882736!
acountReport: aReport
	|message|
	message := OrderedCollection new.
	aReport printName: self name.
	
	accounts do: [ :acc |  
			message add: acc name
	].
	aReport printName: message.

	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 20:52:53' prior: 50882745!
acountReport: aReport

	| message |
	message := OrderedCollection new.
	aReport printName: self name.
	accounts do: [ :acc |  
		message add: (acc acountReport: aReport	)
	].
	aReport printName: message.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:05:18' prior: 50882712!
acountReport: aReport	
	^self name.
! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:05:29'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:05:31'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:05:31'!
FAILURE!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:07:42' prior: 50882678!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '	Cuenta mia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:10:02' prior: 50882779!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: String tab, 'Cuenta mia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:10:04'!
FAILURE!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:10:40' prior: 50882794!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '<t>Cuenta mia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:10:42'!
FAILURE!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:11:08' prior: 50882813!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: (String tab, 'Cuenta mia').
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:11:38'!
FAILURE!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:12:07' prior: 50882832!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: ' Cuenta mia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:15:55' prior: 50882754!
acountReport: aReport

	
	aReport printName: self name.
	accounts do: [ :acc |  
		acc acountReport: aReport	
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:16:04' prior: 50882866!
acountReport: aReport

	aReport printName: self name.
	accounts do: [ :acc |  
		acc acountReport: aReport	
	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 20:36:38' prior: 50882764!
acountReport: aReport	
	^aReport printName: self name.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:16:28' prior: 50882880!
acountReport: aReport	
	^aReport printName: '   ', self name.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 21:16:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 21:16:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 21:16:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 21:16:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 21:16:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 21:16:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 21:16:31'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:16:40'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:16:41'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:16:41'!
FAILURE!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:17:17' prior: 50882851!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:17:18'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:17:18'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:17:18'!
PASSED!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:19:02'!
test03PortofolioWithManyAccount

	| portfolio myAccount myAccount2 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.

	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount.
	portfolio add: myAccount2.

	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Cuenta de Juan'.

	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:19:03'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:19:03'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:19:03'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:19:03'!
PASSED!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:19:39' prior: 50882952!
test03PortofolioWithManyAccount

	| portfolio myAccount myAccount2 myAccount3 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Miguel'.

	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount.
	portfolio add: myAccount2.
	portfolio add: myAccount3.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Cuenta de Juan'.
	message add: '   Cuenta de Miguel'.


	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:19:40'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:19:40'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:19:40'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:19:40'!
PASSED!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:20:15'!
test04PortofolioContainsPortfolio

	| portfolio myAccount myAccount2 myAccount3 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Miguel'.

	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount.
	portfolio add: myAccount2.
	portfolio add: myAccount3.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Cuenta de Juan'.
	message add: '   Cuenta de Miguel'.


	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:22:39' prior: 50883022!
test04PortofolioContainsPortfolio

	| portfolio portfolio2 myAccount myAccount2 myAccount3  message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Angeles'.

	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.

	
	portfolio add: myAccount.
	portfolio add: myAccount2.
	portfolio add: myAccount3.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Cuenta de Juan'.
	message add: '   Cuenta de Miguel'.


	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:22:43' prior: 50883046!
test04PortofolioContainsPortfolio

	| portfolio portfolio2 myAccount myAccount2 myAccount3  message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Angeles'.

	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Cuenta de Juan'.
	message add: '   Cuenta de Miguel'.


	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:23:22' prior: 50883076!
test04PortofolioContainsPortfolio

	| portfolio portfolio2 myAccount myAccount2 myAccount3  message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Angeles'.

	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Portfolio de hijos'.
	message add: '      Cuenta de Juan'.
	message add: '      Cuenta de Angeles'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:23:24'!
FAILURE!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:24:08' prior: 50883103!
test04PortofolioContainsPortfolio

	| portfolio portfolio2 myAccount myAccount2 myAccount3  message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Angeles'.

	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '-Cuenta mia'.
	message add: '-Portfolio de hijos'.
	message add: '--Cuenta de Juan'.
	message add: '--Cuenta de Angeles'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:24:19' prior: 50882885!
acountReport: aReport	
	^aReport printName: '-', self name.
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:24:29'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:24:30'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:24:30'!
FAILURE!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:24:58' prior: 50882927!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '-Cuenta mia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:25:07' prior: 50882985!
test03PortofolioWithManyAccount

	| portfolio myAccount myAccount2 myAccount3 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Miguel'.

	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount.
	portfolio add: myAccount2.
	portfolio add: myAccount3.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '-Cuenta mia'.
	message add: '-Cuenta de Juan'.
	message add: '-Cuenta de Miguel'.


	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:25:10'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:25:11'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:25:12'!
FAILURE!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:25:12'!
FAILURE!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 21:26:23'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 21:26:23'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 21:26:23'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 21:26:23'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 21:26:23'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 21:26:23'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:26:29'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:26:30'!
FAILURE!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:26:31'!
FAILURE!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:28:07' prior: 50882219 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account acountReport: self withSize: 0.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:28:29'!
acountReport: aReport	 withSize: aSize
	^aReport printName: '-', self name.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:28:59' prior: 50883269!
acountReport: aReport	 withSize: aSize
	
	^aReport printName:'-', self name.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:29:12' prior: 50883275!
acountReport: aReport	 withSize: aSize
	
	
	^aReport printName:'-', self name.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:30:12' prior: 50883281!
acountReport: aReport	 withSize: aSize
	| message|
	
	aSize do: [ message := message ,'-'. ].
	^aReport printName: message, self name.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:30:33'!
acountReport: aReport withSize: aSize

	aReport printName: self name.
	accounts do: [ :acc |  
		acc acountReport: aReport	
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:30:53' prior: 50883294!
acountReport: aReport withSize: aSize

	aReport printName: self name.
	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !

!methodRemoval: Portfolio #acountReport: stamp: 'Ms 5/31/2023 21:30:57'!
acountReport: aReport

	aReport printName: self name.
	accounts do: [ :acc |  
		acc acountReport: aReport	
	].
!

!methodRemoval: ReceptiveAccount #acountReport: stamp: 'Ms 5/31/2023 21:31:02'!
acountReport: aReport	
	^aReport printName: '-', self name.
!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:31:37' prior: 50883302!
acountReport: aReport withSize: aSize
	| message|
	
	aSize do: [ message := message ,'-'. ].
	aReport printName: message, self name.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:31:54'!
ERROR!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:31:54'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:34:34' prior: 50883320!
acountReport: aReport withSize: aSize
	| message|
	
	aSize timesRepeat: [ message := message ,'-'. ].
	aReport printName: message, self name.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:34:48' prior: 50883287!
acountReport: aReport	 withSize: aSize
	| message|
	
	aSize timesRepeat: [ message := message ,'-'. ].
	^aReport printName: message, self name.
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:34:57'!
ERROR!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:34:57'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:36:04' prior: 50883347!
acountReport: aReport	 withSize: aSize
	| message|
	message := ''.
	aSize timesRepeat: [ message := message ,'-'. ].
	^aReport printName: message, self name.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:36:11' prior: 50883337!
acountReport: aReport withSize: aSize
	| message|
		message := ''.

	aSize timesRepeat: [ message := message ,'-'. ].
	aReport printName: message, self name.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:36:14' prior: 50883370!
acountReport: aReport withSize: aSize
	| message|
	message := ''.

	aSize timesRepeat: [ message := message ,'-'. ].
	aReport printName: message, self name.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:36:20'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:36:22'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:36:23'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:36:24'!
PASSED!
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:37:12' prior: 50883179!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:37:23' prior: 50883194!
test03PortofolioWithManyAccount

	| portfolio myAccount myAccount2 myAccount3 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Miguel'.

	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount.
	portfolio add: myAccount2.
	portfolio add: myAccount3.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Cuenta de Juan'.
	message add: '   Cuenta de Miguel'.


	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:37:32' prior: 50883135!
test04PortofolioContainsPortfolio

	| portfolio portfolio2 myAccount myAccount2 myAccount3  message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Angeles'.

	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Portfolio de hijos'.
	message add: '      Cuenta de Juan'.
	message add: '      Cuenta de Angeles'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:37:44' prior: 50883381!
acountReport: aReport withSize: aSize
	| message|
	message := ''.

	aSize timesRepeat: [ message := message ,'   '. ].
	aReport printName: message, self name.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:37:53' prior: 50883362!
acountReport: aReport	 withSize: aSize
	| message|
	message := ''.
	aSize timesRepeat: [ message := message ,'   '. ].
	^aReport printName: message, self name.
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:38:02'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:38:02'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:38:02'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:38:02'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:41:19' prior: 50883472!
acountReport: aReport withSize: aSize
	| message|
	message := ''.
	aSize timesRepeat: [ message := message ,'   '. ].
	aReport printName: message, self name.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:42:10' prior: 50883483!
acountReport: aReport	 withSize: aSize	
	^aReport printName: (self identarMessage: aSize, self name).

! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:43:00' prior: 50883516!
acountReport: aReport	 withSize: aSize	
	^aReport printName: self name withSize: aSize.

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:43:33' prior: 50883505!
acountReport: aReport withSize: aSize
	
	aReport printName: self name withSize: aSize.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:43:37' prior: 50883529!
acountReport: aReport withSize: aSize
	aReport printName: self name withSize: aSize.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:44:23'!
printName: aName withSize: aSize
	|identar|
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: message, aName
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:44:26'!
FAILURE!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:44:26'!
FAILURE!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:44:26'!
FAILURE!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:44:26'!
FAILURE!

!methodRemoval: PortfolioEstruct #printName: stamp: 'Ms 5/31/2023 21:44:42'!
printName: aName
	message add: aName
!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:45:24'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:45:24'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:46:24' prior: 50883538!
acountReport: aReport withSize: aSize
	aReport printName: (self name) withSize: aSize.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/31/2023 21:46:25'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 21:46:33'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 21:46:34'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 21:46:36'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 21:46:39'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 21:46:39'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 21:46:39'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 21:46:39'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 21:46:39'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 21:46:39'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:46:46'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:46:46'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:47:51' prior: 50883578!
acountReport: aReport withSize: aSize
	aReport printName: name withSize: aSize.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: aSize + 1
	].
! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/31/2023 21:47:52'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 21:48:02' prior: 50883523!
acountReport: aReport	 withSize: aSize	
	^aReport printName: name withSize: aSize.

! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:48:10'!
FAILURE!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:48:10'!
FAILURE!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:48:51' prior: 50883546!
printName: aName withSize: aSize
	|identar|
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar, aName
! !

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:48:54'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 21:48:54'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 21:48:54'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 21:48:54'!
PASSED!

Reporte subclass: #PortfolioEstructWithTransactions
	instanceVariableNames: 'message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioEstructWithTransactions category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 21:54:38'!
Reporte subclass: #PortfolioEstructWithTransactions
	instanceVariableNames: 'message'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioEstructWithTransactions methodsFor: 'nil' stamp: 'Ms 5/31/2023 21:55:11' overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account acountReport: self withSize: 0.
! !
!PortfolioEstructWithTransactions methodsFor: 'nil' stamp: 'Ms 5/31/2023 21:55:22' overrides: 16902254!
value! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:55:26' prior: 50883803 overrides: 16902254!
value
	^message! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:55:57' prior: 50883795 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
! !

TestCase subclass: #ReportPortfolioTransactionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportPortfolioTransactionsTest category: 'Portfolio-Solucion' stamp: 'Ms 5/31/2023 21:56:15'!
TestCase subclass: #ReportPortfolioTransactionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportPortfolioTransactionsTest methodsFor: 'nil' stamp: 'Ms 5/31/2023 21:56:38'!
test01PortofolioNotHaveAccounts

	| portfolio message |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:59:03' prior: 50883808 overrides: 16902254!
value
	^'Portfolio de la familia'! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:59:15'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:59:15'!
FAILURE!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:59:38' prior: 50883847 overrides: 16902254!
value
	^message add:'Portfolio de la familia'! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:59:40'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 21:59:40'!
FAILURE!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:59:52' prior: 50883860 overrides: 16902254!
value
	message add:'Portfolio de la familia'
	^message! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 21:59:54' prior: 50883874 overrides: 16902254!
value
	message add:'Portfolio de la familia'.
	^message! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 22:00:05'!
PASSED!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 22:00:58'!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 22:02:02' prior: 50883813 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account acountReport: self withSize: 0.
! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 22:02:20' prior: 50883881 overrides: 16902254!
value
	^message! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 22:02:23'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 22:02:23'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 22:02:23'!
ERROR!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 22:02:41'!
printName: aName withSize: aSize
	|identar|
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar, aName
! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 22:02:45'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 22:02:45'!
PASSED!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 22:05:27'!
test03PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 22:05:28'!
FAILURE!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 22:08:03' prior: 50883907 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account acountReportTransactions: self withSize: 0.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 22:09:09'!
acountReportTransactions: aReport withSize: aSize
	aReport printName: name withSize: aSize.	
	accounts do: [ :acc |  
		acc acountReportTransactions: aReport	 withSize: aSize + 1
	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 22:09:38'!
acountReportTransactions: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize.
	

! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 22:12:23' prior: 50883989!
acountReportTransactions: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize.
	
	

! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 22:13:36' prior: 50883996!
acountReportTransactions: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize.
	self processReport: aReport

	
	

! !

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 22:13:48'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 22:13:48'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 22:14:22'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 22:14:22'!
FAILURE!

----SNAPSHOT----(31 May 2023 22:15:08) CuisUniversity-5706.image priorSource: 17626389!

----STARTUP---- (31 May 2023 22:54:56) as C:\windows64\CuisUniversity-5706.image!


!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 22:55:08'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 22:55:10'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 22:55:13'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 22:55:13'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:08:08' prior: 50883890!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:08:12'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:08:18'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:08:19'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:08:24'!
ERROR!
!PortfolioEstructWithTransactions methodsFor: 'nil' stamp: 'Ms 5/31/2023 23:09:04'!
printBalance: aValue
	^message add: 'Balance = ', aValue asString.! !

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:09:14'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:09:14'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:15:30'!
PASSED!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:16:29' prior: 50884049!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Balance = 0'.

	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:16:31'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:16:31'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:17:23' prior: 50884096!
test02PortofolioWithOneAccount

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Balance = 0'.
	message add: '   Balance = 0'.

	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:17:35' prior: 50883833!
test01PortofolioNotHaveAccounts

	| portfolio message |
	portfolio := Portfolio named: 'Portfolio de la familia'.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Balance = 0'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:17:46' prior: 50883946!
test03PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.

	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:17:51' prior: 50884153!
test03PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:23:00'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:23:58'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:25:30' prior: 50883980!
acountReportTransactions: aReport withSize: aSize
	aReport printName: name withSize: aSize.	
	accounts do: [ :acc |  
		acc acountReportTransactions: aReport	 withSize: aSize + 1
	].
	aReport printBalance: 	self balance.

! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:25:35'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:25:35'!
FAILURE!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:27:42'!
printBalance: aBalance withSize: aSize
	|identar|
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar, (self printBalance: aBalance).
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:28:15' prior: 50884206!
acountReportTransactions: aReport withSize: aSize
	aReport printName: name withSize: aSize.	
	accounts do: [ :acc |  
		acc acountReportTransactions: aReport	 withSize: aSize + 1
	].
	aReport printBalance: self balance aSize


! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:28:22' prior: 50884233!
acountReportTransactions: aReport withSize: aSize
	aReport printName: name withSize: aSize.	
	accounts do: [ :acc |  
		acc acountReportTransactions: aReport	 withSize: aSize + 1
	].
	aReport printBalance: self balance withSize:  aSize


! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:28:23' prior: 50884244!
acountReportTransactions: aReport withSize: aSize
	aReport printName: name withSize: aSize.	
	accounts do: [ :acc |  
		acc acountReportTransactions: aReport	 withSize: aSize + 1
	].
	aReport printBalance: self balance withSize: aSize


! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 5/31/2023 23:28:24'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:28:30'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:28:30'!
ERROR!

!methodRemoval: PortfolioEstruct #printBalance:withSize: stamp: 'Ms 5/31/2023 23:28:58'!
printBalance: aBalance withSize: aSize
	|identar|
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar, (self printBalance: aBalance).
!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:29:02'!
printBalance: aBalance withSize: aSize
	|identar|
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar, (self printBalance: aBalance).
! !

!methodRemoval: PortfolioEstructWithTransactions #printBalance: stamp: 'Ms 5/31/2023 23:29:08'!
printBalance: aValue
	^message add: 'Balance = ', aValue asString.!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:29:41'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:29:41'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 23:29:41'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 23:29:41'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:29:42'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:29:42'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:29:42'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:29:46'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:29:46'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:29:46'!
FAILURE!
!PortfolioEstruct methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:32:02'!
printBalance: aBalance
	
	message add: 'Balance = ', aBalance
! !

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 23:32:15'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 23:32:16'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 23:32:16'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 23:32:16'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 23:32:16'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 23:32:16'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 5/31/2023 23:32:18'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 5/31/2023 23:32:18'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 5/31/2023 23:32:18'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 5/31/2023 23:32:18'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 5/31/2023 23:32:18'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 5/31/2023 23:32:18'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 5/31/2023 23:32:23'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 5/31/2023 23:32:23'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 5/31/2023 23:32:23'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 5/31/2023 23:32:23'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 5/31/2023 23:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 23:32:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 23:32:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 23:32:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 23:32:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 23:32:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 23:32:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 23:32:33'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:32:34'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:32:34'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 5/31/2023 23:32:34'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 5/31/2023 23:32:34'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:32:35'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:32:35'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:32:35'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:32:37'!
ERROR!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:33:13' prior: 50884339!
printBalance: aBalance withSize: aSize
	|identar|
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar, 'Balance = ', aBalance.
! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:33:14'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:33:14'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:33:14'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:33:16'!
ERROR!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:33:56' prior: 50884536!
printBalance: aBalance withSize: aSize
	|identar|
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar, 'Balance = ', aBalance asString .
! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:33:57'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:33:57'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:33:57'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:33:59'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:34:43' prior: 50884255!
acountReportTransactions: aReport withSize: aSize
	aReport printName: name withSize: aSize.	
	accounts do: [ :acc |  
		acc acountReportTransactions: aReport	 withSize: aSize + 1
	].
	aReport printBalance: self balance withSize: aSize + 1


! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:34:48'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:34:50'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:34:50'!
ERROR!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:43:20'!
addDepositWithValue: aValue withSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: 'Deposito por ', aValue asString.! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:43:36'!
addWithdrawWithValue: aValue withSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: 'Extraccion por ', aValue asString.! !
!Account methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:46:14'!
processReport: aReport with: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance withSize: aSize
	

! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 23:46:51' prior: 50884003!
acountReportTransactions: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize.
	self processReport: aReport with: aSize

	
	

! !
!Account methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:48:23' prior: 50884624!
processReport: aReport with: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:48:53'!
addTransactionToReport: aReport	 withSize: aSize
	^ aReport addDepositWithValue: self value withSize: aSize! !
!Withdraw methodsFor: 'category-name' stamp: 'Ms 5/31/2023 23:49:16'!
addTransactionToReport: aReport	 withSize: aSize
   ^ aReport addWithdrawWithValue: self value withSize: aSize
! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 5/31/2023 23:49:26'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:49:28'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:49:28'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 23:50:28' prior: 50884633!
acountReportTransactions: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize + 1.
	self processReport: aReport with: aSize + 1

	
	

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/31/2023 23:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 23:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/31/2023 23:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/31/2023 23:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/31/2023 23:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/31/2023 23:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/31/2023 23:50:29'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 23:50:33' prior: 50884674!
acountReportTransactions: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize.
	self processReport: aReport with: aSize

	
	

! !

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:50:49'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:50:49'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 23:51:34' prior: 50884708!
acountReportTransactions: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize.
	self processReport: aReport with: aSize + 1

	
	

! !

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 5/31/2023 23:51:47'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:51:49'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:51:49'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:52:19'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:52:19'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:53:35' prior: 50884176!
test03PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:53:36'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:53:46' prior: 50884752!
test03PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:55:26' prior: 50884584!
acountReportTransactions: aReport withSize: aSize
	aReport printName: name withSize: aSize.	
	accounts do: [ :acc |  
		acc acountReportTransactions: aReport	 withSize: (aSize + 1)
	].
	aReport printBalance: self balance withSize: (aSize + 1)

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:55:31' prior: 50883681!
acountReport: aReport withSize: aSize
	aReport printName: name withSize: aSize.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: (aSize + 1)
	].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 5/31/2023 23:55:38' prior: 50884723!
acountReportTransactions: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize.
	self processReport: aReport with: (aSize + 1)

	
	

! !

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:55:43'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:55:43'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/31/2023 23:57:34' prior: 50884780!
test03PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 5/31/2023 23:57:35'!
FAILURE!
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:00:10' prior: 50884606!
addDepositWithValue: aValue withSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar , 'Deposito por ',  aValue asString.! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:00:17' prior: 50884615!
addWithdrawWithValue: aValue withSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar ,'Extraccion por ', aValue asString.! !

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 6/1/2023 00:00:22'!
PASSED!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:01:41'!
test04PortofolioWithOneAccountWithWithdrawTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:01:56'!
test03PortofolioWithOneAccountWithDepostitTransaction

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Balance = 100'.
	message add: '   Balance = 100'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:01:57'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:02:03' prior: 50884916!
test03PortofolioWithOneAccountWithDepostitTransaction

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Balance = 100'.
	message add: '   Balance = 100'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:02:04'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:02:04'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:02:04'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:02:04'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 6/1/2023 00:02:04'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:02:04'!
PASSED!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:02:09'!
test04PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!methodRemoval: ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithTransactions stamp: 'Ms 6/1/2023 00:02:11'!
test03PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	!

!methodRemoval: ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithTransactions stamp: 'Ms 6/1/2023 00:02:23'!
test04PortofolioWithOneAccountWithTransactions

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:02:47'!
test05PortofolioWithOneAccountWithLegDepositTransaction

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:02:55' prior: 50885059!
test05PortofolioWithOneAccountWithLegDepositTransaction

	| portfolio myAccount message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Balance = 80'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:05:31' prior: 50885083!
test05PortofolioWithOneAccountWithLegDepositTransaction

	| portfolio myAccount myAccount2 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	Transference register: 10  from: myAccount2  to: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Balance = 90'.
	message add: '   Balance = 90'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!LegDepositTransfer methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:08:08'!
addTransactionToReport: aReport	 withSize: aSize
   ^ aReport addLegDepositWithValue: self value withSize: aSize
! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:08:45'!
addLegDepositWithValue: aValue withSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar ,'Entrada por transferencia de ', aValue asString.! !

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:08:57'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:08:57'!
ERROR!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:09:26' prior: 50885107!
test05PortofolioWithOneAccountWithLegDepositTransaction

	| portfolio myAccount myAccount2 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount new.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	Transference register: 10  from: myAccount2  to: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Balance = 90'.
	message add: '   Balance = 90'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:09:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:09:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:09:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:09:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:09:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:09:27'!
PASSED!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:11:43'!
test06PortofolioWithOneAccountWithLegWithdrawTransaction

	| portfolio myAccount myAccount2 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount new.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	Transference register: 10  from: myAccount2  to: myAccount.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Salida por transferencia de 5'.
	message add: '      Balance = 85'.
	message add: '   Balance = 85'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!LegWithdrawTransfer methodsFor: 'category-name' stamp: 'Ms 6/1/2023 00:12:52'!
addTransactionToReport: aReport withSize: aSize
   ^ aReport addLegWithdrawWithValue: self value  withSize: aSize

! !
!LegWithdrawTransfer methodsFor: 'category-name' stamp: 'Ms 6/1/2023 00:12:59' prior: 50885243!
addTransactionToReport: aReport withSize: aSize
   ^ aReport addLegWithdrawWithValue: self value withSize: aSize

! !
!PortfolioEstructWithTransactions methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:13:15'!
addLegWithdrawWithValue: aValue withSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar ,'Salida por transferencia de ', aValue asString.! !

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:13:21'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:13:21'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:13:41' prior: 50885213!
test06PortofolioWithOneAccountWithLegWithdrawTransaction

	| portfolio myAccount myAccount2 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount new.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	Transference register: 10  from: myAccount2  to: myAccount.
	Transference register: 5  from: myAccount2  to: myAccount2.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Salida por transferencia de 5'.
	message add: '      Balance = 85'.
	message add: '   Balance = 85'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:13:42'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:13:48' prior: 50885276!
test06PortofolioWithOneAccountWithLegWithdrawTransaction

	| portfolio myAccount myAccount2 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount new.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	Transference register: 10  from: myAccount2  to: myAccount.
	Transference register: 5  from: myAccount to: myAccount2.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Salida por transferencia de 5'.
	message add: '      Balance = 85'.
	message add: '   Balance = 85'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:13:48'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:13:48'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:13:48'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:13:48'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:13:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:13:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:13:49'!
PASSED!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:14:37'!
test07PortofolioContainsOtherPortfolioWithManyTransactions

	| portfolio myAccount myAccount2 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount new.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	Transference register: 10  from: myAccount2  to: myAccount.
	Transference register: 5  from: myAccount to: myAccount2.
	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Salida por transferencia de 5'.
	message add: '      Balance = 85'.
	message add: '   Balance = 85'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:18:24' prior: 50885374!
test07PortofolioContainsOtherPortfolioWithManyTransactions

	| portfolio  portfolio2 myAccount myAccount2 myAccount3 myAccount4 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	
	myAccount2 := ReceptiveAccount new.
	Deposit register: 40 on: myAccount2.
	Withdraw register: 10 on: myAccount.
	
	myAccount3 := ReceptiveAccount new.
	Transference register: 5  from: myAccount3  to: myAccount4.
	
	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.
	
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Salida por transferencia de 5'.
	message add: '      Balance = 85'.
	message add: '   Balance = 85'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:18:52' prior: 50885407!
test07PortofolioContainsOtherPortfolioWithManyTransactions

	| portfolio  portfolio2 myAccount myAccount2 myAccount3 myAccount4 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 40 on: myAccount2.
	Withdraw register: 10 on: myAccount.
	
	myAccount3 := ReceptiveAccount new.
	Transference register: 5  from: myAccount3  to: myAccount4.
	
	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.
	
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Salida por transferencia de 5'.
	message add: '      Balance = 85'.
	message add: '   Balance = 85'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:19:22' prior: 50885447!
test07PortofolioContainsOtherPortfolioWithManyTransactions

	| portfolio  portfolio2 myAccount myAccount2 myAccount3 myAccount4 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 40 on: myAccount2.
	Withdraw register: 10 on: myAccount.
	
	myAccount4 := ReceptiveAccount new.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Angeles'.
	Transference register: 5  from: myAccount3  to: myAccount4.
	
	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.
	
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Entrada por transferencia de 10'.
	message add: '      Salida por transferencia de 5'.
	message add: '      Balance = 85'.
	message add: '   Balance = 85'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:22:49' prior: 50885488!
test07PortofolioContainsOtherPortfolioWithManyTransactions

	| portfolio  portfolio2 myAccount myAccount2 myAccount3 myAccount4 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 40 on: myAccount2.
	Withdraw register: 10 on: myAccount.
	
	myAccount4 := ReceptiveAccount new.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Angeles'.
	Transference register: 5  from: myAccount3  to: myAccount4.
	
	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.
	
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Portfolio de hijos'.
	message add: '      Cuenta de Juan'.
	message add: '         Deposito por 40'.
	message add: '         Extraccion por 10'.
	message add: '         Balance = 30'.
	message add: '      Cuenta de Angeles'.
	message add: '         Salida por transferencia de 5'.
	message add: '         Balance = -5'.
	message add: '      Balance = 25'.
	message add: '   Balance = 105'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:22:51'!
FAILURE!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:23:02'!
FAILURE!
!ReportPortfolioTransactionsTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:24:05' prior: 50885531!
test07PortofolioContainsOtherPortfolioWithManyTransactions

	| portfolio  portfolio2 myAccount myAccount2 myAccount3 myAccount4 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 40 on: myAccount2.
	Withdraw register: 10 on: myAccount2.
	
	myAccount4 := ReceptiveAccount new.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Angeles'.
	Transference register: 5  from: myAccount3  to: myAccount4.
	
	portfolio2 := Portfolio named: 'Portfolio de hijos'.
	portfolio2 add: myAccount2.
	portfolio2 add: myAccount3.

	portfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.
	portfolio add: portfolio2.
	
	
	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '      Deposito por 100'.
	message add: '      Extraccion por 20'.
	message add: '      Balance = 80'.
	message add: '   Portfolio de hijos'.
	message add: '      Cuenta de Juan'.
	message add: '         Deposito por 40'.
	message add: '         Extraccion por 10'.
	message add: '         Balance = 30'.
	message add: '      Cuenta de Angeles'.
	message add: '         Salida por transferencia de 5'.
	message add: '         Balance = -5'.
	message add: '      Balance = 25'.
	message add: '   Balance = 105'.
	
	self assert: message equals: (PortfolioEstructWithTransactions of: portfolio) value
	! !

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:24:09'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:24:12'!
PASSED!

----SNAPSHOT----(1 June 2023 00:24:21) CuisUniversity-5706.image priorSource: 17676024!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:25:57' prior: 50882231 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	balance := 0.
	account processReport: self with: 0.
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:26:03' prior: 50882207 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account processReport: self with: 0.
! !

!methodRemoval: Account #processReport: stamp: 'Ms 6/1/2023 00:26:09'!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance.
!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 00:26:14'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 00:26:14'!
PASSED!
!Account methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:27:10'!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	].
	aReport printBalance: self balance
	

! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:28:54' prior: 50885654 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	balance := 0.
	account processReport: self.
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'Ms 6/1/2023 00:29:05' prior: 50885662 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account processReport: self.! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:29:12'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 00:29:13'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 00:37:00'!
PASSED!

!methodRemoval: Deposit #printOnSummaryMessage: stamp: 'Ms 6/1/2023 00:37:30'!
printOnSummaryMessage: aSummary
	^ aSummary printDepositWithValue: self value.!

!methodRemoval: LegWithdrawTransfer #printOnSummaryMessage: stamp: 'Ms 6/1/2023 00:39:46'!
printOnSummaryMessage: aSummary
	^ aSummary printLegWithdrawWithValue: self value.!

!methodRemoval: LegDepositTransfer #printOnSummaryMessage: stamp: 'Ms 6/1/2023 00:40:06'!
printOnSummaryMessage: aSummary
	^ aSummary printLegDepositWithValue: self value.!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 00:40:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 00:40:10'!
PASSED!

!methodRemoval: Withdraw #printOnSummaryMessage: stamp: 'Ms 6/1/2023 00:41:20'!
printOnSummaryMessage: aSummary
	^ aSummary printWithdrawWithValue: self value.!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:50:23'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 00:50:24'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 00:54:07' overrides: 50884641!
processReport: aReport with: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

! !

!methodRemoval: Account #processReport:with: stamp: 'Ms 6/1/2023 00:54:17'!
processReport: aReport with: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 00:54:19'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 00:54:20'!
PASSED!

----SNAPSHOT----(1 June 2023 00:59:53) CuisUniversity-5706.image priorSource: 17727968!
!Account methodsFor: 'process' stamp: 'Ms 6/1/2023 01:01:15' prior: 50885866!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: 0].
	aReport printBalance: self balance
	

! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:01:26'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:01:26'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:01:26'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:01:26'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:01:26'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:01:26'!
ERROR!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:01:26'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:01:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:01:27'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:01:27'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:01:27'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:01:27'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:01:27'!
PASSED!
!TransferNet methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:03:00'!
addLegWithdrawWithValue: aValue withSize: aSize
	balance := balance - aValue	 ! !
!TransferNet methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:03:11' prior: 50880824 overrides: 50880789!
addLegWithdrawWithValue: aValue
	balance := balance - aValue	 ! !

!methodRemoval: TransferNet #addLegWithdrawWithValue:withSize: stamp: 'Ms 6/1/2023 01:03:16'!
addLegWithdrawWithValue: aValue withSize: aSize
	balance := balance - aValue	 !
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:04:31'!
addDepositWithValue: aValue withSize: aSize
	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar ,'Deposito por ', aValue asString.
	! !

!methodRemoval: AccountSummary #addDepositWithValue: stamp: 'Ms 6/1/2023 01:04:40'!
addDepositWithValue: aValue
	^message add: 'Deposito por ', aValue asString.!
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:04:59'!
addLegDepositWithValue: aValue withSize: aSize
	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar ,'Entrada por transferencia de ', aValue asString.
	! !

!methodRemoval: AccountSummary #addLegDepositWithValue: stamp: 'Ms 6/1/2023 01:05:14'!
addLegDepositWithValue: aValue
	^message add:  'Entrada por transferencia de ', aValue asString.!
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:05:24'!
addLegWithdrawWithValue: aValue withSize: aSize
	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar ,'Salida por transferencia de ', aValue asString.
	! !

!methodRemoval: AccountSummary #addLegWithdrawWithValue: stamp: 'Ms 6/1/2023 01:05:29'!
addLegWithdrawWithValue: aValue
	^message add:  'Salida por transferencia de ', aValue asString.!
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:05:40'!
addWithdrawWithValue: aValue withSize: aSize
	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	
	message add: identar ,'Extraccion por ', aValue asString.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:05:41'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:05:49'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:05:49'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:05:49'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:05:49'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:05:49'!
PASSED!
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:07:44'!
identarSize: aSize
	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	^identar
! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:08:12' prior: 50884878!
addWithdrawWithValue: aValue withSize: aSize

	
	message add: (self identarSize: aSize),'Extraccion por ', aValue asString.! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:08:15' prior: 50887377!
addWithdrawWithValue: aValue withSize: aSize
	
	message add: (self identarSize: aSize),'Extraccion por ', aValue asString.! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:08:37' prior: 50885257!
addLegWithdrawWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize),'Salida por transferencia de ', aValue asString.! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:08:59' prior: 50885141!
addLegDepositWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize), 'Entrada por transferencia de ', aValue asString.! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:09:16' prior: 50884868!
addDepositWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize), 'Deposito por ', aValue asString.! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:09:17'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:09:17'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:09:17'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:09:17'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:09:17'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:09:17'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:09:18'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:09:18'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:09:18'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:09:18'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:09:18'!
PASSED!
!PortfolioEstructWithTransactions methodsFor: 'message' stamp: 'Ms 6/1/2023 01:10:02' prior: 50884560!
printBalance: aBalance withSize: aSize

	message add: (self identarSize: aSize), 'Balance = ', aBalance asString .
! !
!PortfolioEstructWithTransactions methodsFor: 'message' stamp: 'Ms 6/1/2023 01:10:11' prior: 50883931!
printName: aName withSize: aSize

	message add: (self identarSize: aSize), aName
! !
!Reporte methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:11:09'!
identarSize: aSize
	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	^identar
! !

!methodRemoval: PortfolioEstructWithTransactions #identarSize: stamp: 'Ms 6/1/2023 01:11:09'!
identarSize: aSize
	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	^identar
!
!PortfolioEstruct methodsFor: 'message' stamp: 'Ms 6/1/2023 01:11:27' prior: 50883760!
printName: aName withSize: aSize
	message add: (self identarSize: aSize), aName
! !
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:12:11' prior: 50887139!
addWithdrawWithValue: aValue withSize: aSize
	
	message add: (self identarSize: aSize) ,'Extraccion por ', aValue asString.
	! !
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:12:18' prior: 50887124!
addLegWithdrawWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize) ,'Salida por transferencia de ', aValue asString.
	! !
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:12:26' prior: 50887109!
addLegDepositWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize) ,'Entrada por transferencia de ', aValue asString.
	! !
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:12:34' prior: 50887095!
addDepositWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize) ,'Deposito por ', aValue asString.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:12:37'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:12:38'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:12:38'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:12:38'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:12:38'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:12:38'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:12:38'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:12:38'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:12:38'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:12:38'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:12:38'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:12:38'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 01:13:32' prior: 50883747!
acountReport: aReport	 withSize: aSize	
	aReport printName: name withSize: aSize.

! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:13:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:13:35'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:13:35'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:13:35'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:13:35'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:13:35'!
PASSED!

!methodRemoval: Portfolio #getMessageTransaction stamp: 'Ms 6/1/2023 01:17:11'!
getMessageTransaction
	^'Deposito por ', self value asString.!

!methodRemoval: ReceptiveAccount #showMessageSummary: stamp: 'Ms 6/1/2023 01:18:37'!
showMessageSummary: aSummary

	transactions do: [ :trans |  trans printOnSummaryMessage: aSummary	].
	aSummary printBalance: self balance.
!

!methodRemoval: ReceptiveAccount #getMessageTransaction stamp: 'Ms 6/1/2023 01:18:56'!
getMessageTransaction
	^'Deposito por ', self value asString.!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 01:21:13' prior: 50887859!
acountReport: aReport	 withSize: aSize	
	self printNameInReport: aReport  withSize: aSize.
	aReport printName: name withSize: aSize.

! !
!Portfolio methodsFor: 'report' stamp: 'Ms 6/1/2023 01:22:46' prior: 50884814!
acountReport: aReport withSize: aSize
	self printNameInReport: aReport  withSize: aSize.

	accounts do: [ :acc |  
		acc acountReport: aReport	 withSize: (aSize + 1)
	].
! !
!Account methodsFor: 'process' stamp: 'Ms 6/1/2023 01:23:12'!
printNameInReport: aReport  withSize: aSize.
	aReport printName: name withSize: aSize.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 01:23:16' prior: 50888072!
acountReport: aReport	 withSize: aSize	
	self printNameInReport: aReport  withSize: aSize.

! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:23:20'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:23:20'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:23:20'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:23:20'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:23:20'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:23:20'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:23:21'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:23:21'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:23:21'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:23:21'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:23:21'!
PASSED!
!Portfolio methodsFor: 'report' stamp: 'Ms 6/1/2023 01:24:19' prior: 50884803!
acountReportTransactions: aReport withSize: aSize
	self printNameInReport: aReport  withSize: aSize.
	accounts do: [ :acc |  
		acc acountReportTransactions: aReport	 withSize: (aSize + 1)
	].
	aReport printBalance: self balance withSize: (aSize + 1)

! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 01:24:36' prior: 50884823!
acountReportTransactions: aReport	 withSize: aSize	
	self printNameInReport: aReport  withSize: aSize.
	self processReport: aReport with: (aSize + 1)

	
	

! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:24:38'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:24:39'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:24:39'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:24:39'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:24:39'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:24:39'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 01:25:42' prior: 50888300!
acountReportTransactions: aReport	 withSize: aSize	
	self printNameInReport: aReport  withSize: aSize.
	self processReport: aReport with: aSize + 1

	
	

! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:25:44'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:25:44'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:25:44'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:25:44'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:25:44'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:25:45'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:25:45'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:25:45'!
PASSED!
!Account methodsFor: 'process' stamp: 'Ms 6/1/2023 01:27:27'!
processReport: aReport withSize: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: 0].
	aReport printBalance: self balance withSize: 0
	

! !
!Account methodsFor: 'process' stamp: 'Ms 6/1/2023 01:27:44' prior: 50888697!
processReport: aReport withSize: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize.
	

! !

!methodRemoval: Account #processReport: stamp: 'Ms 6/1/2023 01:27:58'!
processReport: aReport

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: 0].
	aReport printBalance: self balance
	

!
!Portfolio methodsFor: 'report' stamp: 'Ms 6/1/2023 01:28:47' prior: 50888289!
acountReportTransactions: aReport withSize: aSize
	self printNameInReport: aReport  withSize: aSize.
	accounts do: [ :acc |  	acc acountReportTransactions: aReport	 withSize: (aSize + 1)].
	aReport printBalance: self balance withSize: (aSize + 1)

! !
!Portfolio methodsFor: 'report' stamp: 'Ms 6/1/2023 01:29:01' prior: 50888079!
acountReport: aReport withSize: aSize
	self printNameInReport: aReport  withSize: aSize.

	accounts do: [ :acc |  	acc acountReport: aReport	 withSize: (aSize + 1)	].
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:29:42'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:29:42'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:29:43'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:29:43'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:29:43'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:29:43'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:29:43'!
ERROR!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:29:43'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:29:43'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 01:30:28' overrides: 50888706!
processReport: aReport withSize: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

! !

!methodRemoval: ReceptiveAccount #processReport:with: stamp: 'Ms 6/1/2023 01:30:33'!
processReport: aReport with: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 01:30:54' prior: 50888499!
acountReportTransactions: aReport	 withSize: aSize	
	self printNameInReport: aReport  withSize: aSize.
	self processReport: aReport withSize: aSize + 1

	
	

! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'Ms 6/1/2023 01:31:28' prior: 50888932 overrides: 50888706!
processReport: aReport withSize: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ms 6/1/2023 01:31:43'!
processReport: aReport with: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

! !

!methodRemoval: ReceptiveAccount #processReport:with: stamp: 'Ms 6/1/2023 01:31:45'!
processReport: aReport with: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

!

!methodRemoval: ReceptiveAccount #processReport:withSize: stamp: 'Ms 6/1/2023 01:32:42'!
processReport: aReport withSize: aSize

	self transactions do: [ :trans |  trans addTransactionToReport: aReport	 withSize: aSize].
	aReport printBalance: self balance withSize: aSize
	

!

!methodRemoval: Deposit #addTransactionToReport: stamp: 'Ms 6/1/2023 01:33:06'!
addTransactionToReport: aReport
	^ aReport addDepositWithValue: self value.!

!methodRemoval: LegDepositTransfer #addTransactionToReport: stamp: 'Ms 6/1/2023 01:33:14'!
addTransactionToReport: aReport
   ^ aReport addLegDepositWithValue: self value.!

!methodRemoval: LegWithdrawTransfer #addTransactionToReport: stamp: 'Ms 6/1/2023 01:33:31'!
addTransactionToReport: aReport
   ^ aReport addLegWithdrawWithValue: self value.!

!methodRemoval: Withdraw #addTransactionToReport: stamp: 'Ms 6/1/2023 01:33:39'!
addTransactionToReport: aReport
   ^ aReport addWithdrawWithValue: self value.!
!ReportPortfolioTest methodsFor: 'test' stamp: 'Ms 6/1/2023 01:34:04' prior: 50883420!
test03PortofolioWithManyAccount

	| portfolio myAccount myAccount2 myAccount3 message |
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	myAccount2 := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount3 := ReceptiveAccount named: 'Cuenta de Miguel'.

	portfolio := Portfolio named: 'Portfolio de la familia'.
	portfolio add: myAccount.
	portfolio add: myAccount2.
	portfolio add: myAccount3.

	message := OrderedCollection new.
	message add: 'Portfolio de la familia'.
	message add: '   Cuenta mia'.
	message add: '   Cuenta de Juan'.
	message add: '   Cuenta de Miguel'.
	
	self assert: message equals: (PortfolioEstruct of: portfolio) value
	! !

!methodRemoval: AccountSummary #addWithdrawWithValue: stamp: 'Ms 6/1/2023 01:34:36'!
addWithdrawWithValue: aValue
	^message add: 'Extraccion por ', aValue asString.!
!AccountSummary methodsFor: 'initialize' stamp: 'Ms 6/1/2023 01:34:44' prior: 50885882 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	message := OrderedCollection new.
	account processReport: self withSize: 0.! !
!TransferNet methodsFor: 'initialize' stamp: 'Ms 6/1/2023 01:35:56' prior: 50885875 overrides: 50882201!
intializeWithAccount: anAccount
	account := anAccount.
	balance := 0.
	account processReport: self withSize: 0.
! !
!TransferNet methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:36:23'!
addDepositWithValue: aValue withSize: aSize
	 ! !

!methodRemoval: TransferNet #addDepositWithValue: stamp: 'Ms 6/1/2023 01:36:24'!
addDepositWithValue: aValue
	 !
!TransferNet methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:36:29'!
addLegDepositWithValue: aValue withSize: aSize
	balance := balance + aValue	 ! !

!methodRemoval: TransferNet #addLegDepositWithValue: stamp: 'Ms 6/1/2023 01:36:30'!
addLegDepositWithValue: aValue
	balance := balance + aValue	 !
!TransferNet methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:36:35'!
addLegWithdrawWithValue: aValue withSize: aSize
	balance := balance - aValue	 ! !

!methodRemoval: TransferNet #addLegWithdrawWithValue: stamp: 'Ms 6/1/2023 01:36:36'!
addLegWithdrawWithValue: aValue
	balance := balance - aValue	 !
!TransferNet methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:36:38'!
addWithdrawWithValue: aValue withSize: aSize
	 ! !

!methodRemoval: TransferNet #addWithdrawWithValue: stamp: 'Ms 6/1/2023 01:36:40'!
addWithdrawWithValue: aValue
	 !
!Reporte methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:36:53'!
addDepositWithValue: aValue withSize: aSize
	self subclassResponsibility ! !

!methodRemoval: Reporte #addDepositWithValue: stamp: 'Ms 6/1/2023 01:36:55'!
addDepositWithValue: aValue
	self subclassResponsibility !
!Reporte methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:37:00'!
addLegDepositWithValue: aValue withSize: aSize
	self subclassResponsibility ! !

!methodRemoval: Reporte #addLegDepositWithValue: stamp: 'Ms 6/1/2023 01:37:02'!
addLegDepositWithValue: aValue
	self subclassResponsibility !
!Reporte methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:37:05'!
addLegWithdrawWithValue: aValue withSize: aSize
	self subclassResponsibility ! !

!methodRemoval: Reporte #addLegWithdrawWithValue: stamp: 'Ms 6/1/2023 01:37:06'!
addLegWithdrawWithValue: aValue
	self subclassResponsibility !
!Reporte methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:37:13'!
addWithdrawWithValue: aValue withSize: aSize
	self subclassResponsibility ! !

!methodRemoval: Reporte #addWithdrawWithValue: stamp: 'Ms 6/1/2023 01:37:14'!
addWithdrawWithValue: aValue
	self subclassResponsibility !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:37:44'!
ERROR!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:37:44'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:37:52'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:38:33'!
ERROR!
!AccountSummary methodsFor: 'message' stamp: 'Ms 6/1/2023 01:38:46'!
printBalance: aValue withSize: aSize
	^message add: 'Balance = ', aValue asString.! !

!methodRemoval: AccountSummary #printBalance: stamp: 'Ms 6/1/2023 01:38:48'!
printBalance: aValue
	^message add: 'Balance = ', aValue asString.!
!PortfolioEstruct methodsFor: 'message' stamp: 'Ms 6/1/2023 01:38:52'!
printBalance: aBalance withSize: aSize
	
	message add: 'Balance = ', aBalance
! !

!methodRemoval: PortfolioEstruct #printBalance: stamp: 'Ms 6/1/2023 01:38:54'!
printBalance: aBalance
	
	message add: 'Balance = ', aBalance
!
!TransferNet methodsFor: 'message' stamp: 'Ms 6/1/2023 01:39:03'!
printBalance: aValue withSize: aSize
	^'Balance = ', aValue asString.! !

!methodRemoval: TransferNet #printBalance: stamp: 'Ms 6/1/2023 01:39:25'!
printBalance: aValue
	^'Balance = ', aValue asString.!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:39:35'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:39:39'!
PASSED!

----STARTUP---- (1 June 2023 01:48:47) as C:\windows64\CuisUniversity-5706.image!


!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:48:59'!
PASSED!
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:49:59'!
identarSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	! !
!Reporte methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:50:13'!
identarSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	! !

!methodRemoval: PortfolioEstructWithTransactions #identarSize: stamp: 'Ms 6/1/2023 01:50:13'!
identarSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	!
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:50:32' prior: 50884868!
addDepositWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize), 'Deposito por ',  aValue asString.! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:50:34'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:50:34'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:50:34'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:50:34'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:50:34'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:50:34'!
ERROR!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:50:34'!
ERROR!
!Reporte methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:50:48' prior: 50889938!
identarSize: aSize

	| identar |
	identar := ''.
	aSize timesRepeat: [ identar := identar ,'   '. ].
	^identar 
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 01:50:54'!
PASSED!
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:51:09' prior: 50885141!
addLegDepositWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize) ,'Entrada por transferencia de ', aValue asString.! !

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 01:51:09'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 01:51:09'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 01:51:09'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 01:51:09'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 01:51:09'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 01:51:09'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 01:51:09'!
PASSED!
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:51:19' prior: 50885257!
addLegWithdrawWithValue: aValue withSize: aSize
	
	message add: (self identarSize: aSize) ,'Salida por transferencia de ', aValue asString.! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 01:51:26' prior: 50884878!
addWithdrawWithValue: aValue withSize: aSize
	
	message add: (self identarSize: aSize) ,'Extraccion por ', aValue asString.! !
!PortfolioEstruct methodsFor: 'message' stamp: 'Ms 6/1/2023 01:51:38' prior: 50883760!
printName: aName withSize: aSize
	
	message add: (self identarSize: aSize), aName
! !
!PortfolioEstructWithTransactions methodsFor: 'message' stamp: 'Ms 6/1/2023 01:56:44' prior: 50883931!
printName: aName withSize: aSize
	
	message add: (self identarSize: aSize), aName
! !
!PortfolioEstructWithTransactions methodsFor: 'message' stamp: 'Ms 6/1/2023 01:56:49' prior: 50884560!
printBalance: aBalance withSize: aSize

	message add: (self identarSize: aSize), 'Balance = ', aBalance asString .
! !
!AccountSummary methodsFor: 'message' stamp: 'Ms 6/1/2023 01:59:40' prior: 50880042!
printBalance: aValue
	message add: 'Balance = ', aValue asString.! !
!PortfolioEstruct methodsFor: 'message' stamp: 'Ms 6/1/2023 01:59:42' prior: 50884389!
printBalance: aBalance
	message add: 'Balance = ', aBalance
! !
!AccountSummary methodsFor: 'message' stamp: 'Ms 6/1/2023 02:00:56'!
balanceWithValue: aValue
	^'Balance = ', aValue asString.! !
!Reporte methodsFor: 'message' stamp: 'Ms 6/1/2023 02:01:05'!
balanceWithValue: aValue
	^'Balance = ', aValue asString.! !

!methodRemoval: AccountSummary #balanceWithValue: stamp: 'Ms 6/1/2023 02:01:05'!
balanceWithValue: aValue
	^'Balance = ', aValue asString.!
!PortfolioEstructWithTransactions methodsFor: 'message' stamp: 'Ms 6/1/2023 02:01:46' prior: 50890249!
printBalance: aBalance withSize: aSize

	message add: (self identarSize: aSize), (self balanceWithValue: aBalance).
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 02:01:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 02:01:49'!
PASSED!
!TransferNet methodsFor: 'message' stamp: 'Ms 6/1/2023 02:02:37' prior: 50880830!
printBalance: aValue
	^self balanceWithValue: aValue
! !
!PortfolioEstruct methodsFor: 'message' stamp: 'Ms 6/1/2023 02:03:02' prior: 50890261!
printBalance: aBalance
	self balanceWithValue: aBalance

! !
!AccountSummary methodsFor: 'message' stamp: 'Ms 6/1/2023 02:03:08' prior: 50890256!
printBalance: aValue
	self balanceWithValue: aValue
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:03:09'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:03:09'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:03:09'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:03:09'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:03:09'!
FAILURE!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:03:09'!
FAILURE!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:03:10'!
FAILURE!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:03:10'!
FAILURE!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:03:10'!
FAILURE!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:03:13'!
FAILURE!
!AccountSummary methodsFor: 'message' stamp: 'Ms 6/1/2023 02:03:18' prior: 50890487!
printBalance: aValue
	^self balanceWithValue: aValue
! !
!PortfolioEstruct methodsFor: 'message' stamp: 'Ms 6/1/2023 02:03:23' prior: 50890482!
printBalance: aBalance
	^self balanceWithValue: aBalance

! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:03:36'!
FAILURE!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 02:03:36'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:03:40'!
FAILURE!
!AccountSummary methodsFor: 'message' stamp: 'Ms 6/1/2023 02:04:54' prior: 50890555!
printBalance: aValue
	message add: (self balanceWithValue: aValue)
! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 02:04:58'!
PASSED!
!Reporte methodsFor: 'message' stamp: 'Ms 6/1/2023 02:05:49'!
depositWithValue: aValue
	^'Deposito por ', aValue asString.! !
!Reporte methodsFor: 'message' stamp: 'Ms 6/1/2023 02:06:38'!
withdrawWithValue: aValue
	^'Extraccion por ', aValue asString.! !
!Reporte methodsFor: 'message' stamp: 'Ms 6/1/2023 02:07:33'!
legWithdrawWithValue: aValue
	^'Salida por transferencia de ', aValue asString.! !
!Reporte methodsFor: 'message' stamp: 'Ms 6/1/2023 02:07:52'!
legDepositWithValue: aValue
	^'Entrada por transferencia de ', aValue asString.! !
!PortfolioEstruct methodsFor: 'message' stamp: 'Ms 6/1/2023 02:08:17' prior: 50890237!
printName: aName withSize: aSize
	message add: (self identarSize: aSize), aName
! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 02:08:58' prior: 50889951!
addDepositWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize), (self depositWithValue: aValue)! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 02:09:01'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 02:09:02'!
PASSED!
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 02:09:36' prior: 50890185!
addLegDepositWithValue: aValue withSize: aSize

	message add: (self identarSize: aSize) ,  (self legDepositWithValue: aValue)! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 02:09:47' prior: 50890222!
addLegWithdrawWithValue: aValue withSize: aSize
	
	message add: (self identarSize: aSize) ,  (self legWithdrawWithValue: aValue)! !
!PortfolioEstructWithTransactions methodsFor: 'adding' stamp: 'Ms 6/1/2023 02:09:57' prior: 50890230!
addWithdrawWithValue: aValue withSize: aSize
	
	message add: (self identarSize: aSize) ,  (self withdrawWithValue: aValue)! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:09:59'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:09:59'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:09:59'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:09:59'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:09:59'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:09:59'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 02:10:00'!
PASSED!
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 02:10:50' prior: 50880729 overrides: 50880779!
addDepositWithValue: aValue
	^message add:  (self depositWithValue: aValue)! !
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 02:11:00' prior: 50880740 overrides: 50880774!
addLegDepositWithValue: aValue
	^message add:  (self legDepositWithValue: aValue)! !
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 02:11:11' prior: 50880752 overrides: 50880789!
addLegWithdrawWithValue: aValue
	^message add:  (self legWithdrawWithValue: aValue)! !
!AccountSummary methodsFor: 'adding' stamp: 'Ms 6/1/2023 02:11:22' prior: 50880764 overrides: 50880784!
addWithdrawWithValue: aValue
	^message add:  (self withdrawWithValue: aValue)! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 02:11:43'!
PASSED!
!Reporte methodsFor: 'value' stamp: 'Ms 6/1/2023 02:12:31' overrides: 16902254!
value
	self subclassResponsibility ! !

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 02:15:20'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 02:15:21'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 02:15:21'!
PASSED!

!methodRemoval: ReceptiveAccount #getMessageTransaction stamp: 'Ms 6/1/2023 02:16:32'!
getMessageTransaction
	^'Deposito por ', self value asString.!

!methodRemoval: ReceptiveAccount #showMessageSummary: stamp: 'Ms 6/1/2023 02:16:35'!
showMessageSummary: aSummary

	transactions do: [ :trans |  trans printOnSummaryMessage: aSummary	].
	aSummary printBalance: self balance.
!
!Portfolio methodsFor: 'report' stamp: 'Ms 6/1/2023 02:17:10' prior: 50884814!
acountReport: aReport withSize: aSize
	aReport printName: name withSize: aSize.
	accounts do: [ :acc |  	acc acountReport: aReport	 withSize: (aSize + 1)].
! !
!Portfolio methodsFor: 'report' stamp: 'Ms 6/1/2023 02:17:20' prior: 50884803!
acountReportTransactions: aReport withSize: aSize
	aReport printName: name withSize: aSize.	
	accounts do: [ :acc |  	acc acountReportTransactions: aReport	 withSize: (aSize + 1) ].
	aReport printBalance: self balance withSize: (aSize + 1)

! !

!methodRemoval: Portfolio #getMessageTransaction stamp: 'Ms 6/1/2023 02:17:33'!
getMessageTransaction
	^'Deposito por ', self value asString.!

----SNAPSHOT----(1 June 2023 02:18:02) CuisUniversity-5706.image priorSource: 17767311!

!testRun: #AccountSummaryTest #test01AccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryWithDeposit stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryWithWithdraw stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryWithRecevingTransference stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryWithSendingTransference stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #AccountSummaryTest #test07ManyAccountSummaryWithManyTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #AccountSummaryTest #test08PortofolioAccountSummaryWithBalanceZero stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #AccountSummaryTest #test09PortofolioAccountSummaryWithManyAccounts stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTest #test03PortofolioWithManyAccount stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTest #test04PortofolioContainsPortfolio stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test01PortofolioNotHaveAccounts stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test02PortofolioWithOneAccount stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test03PortofolioWithOneAccountWithDepostitTransaction stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test04PortofolioWithOneAccountWithWithdrawTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test05PortofolioWithOneAccountWithLegDepositTransaction stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test06PortofolioWithOneAccountWithLegWithdrawTransaction stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #ReportPortfolioTransactionsTest #test07PortofolioContainsOtherPortfolioWithManyTransactions stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetWithRecevingTransference stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetWithSendingTransference stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferNetTest #test04MultipleTransferencesTransferNet stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetWithBalanceZero stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetWithMultipleAccount stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferenceTest #test01TransferAccountToAnotherAffectBalance stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferenceTest #test02AccountsHaveRegisterTransfer stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferenceTest #test03FirstAccountCanSearchSecondAccount stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!

!testRun: #TransferenceTest #test04SecondAccountCanSearchFirstAccount stamp: 'Ms 6/1/2023 02:18:06'!
PASSED!