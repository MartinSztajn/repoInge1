

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (27 April 2023 18:14:51) as C:\Users\mszta\Downloads\windows64\windows64\CuisUniversity-5706.image!


----End fileIn of C:\windows64\repoProfes\2023-1c\04-BabySteps\TDDBabyStepsGame.st----!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'MS 4/27/2023 18:20:23'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:21:48'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

$a!

$a!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:24:48'!
asRot13
	^$n! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:25:02'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:25:02'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:25:02'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:25:02'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:25:02'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:25:02'!
FAILURE!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:26:59' prior: 50605780!
asRot13
	self value == $a ifTrue: [^$n] ifFalse: [^$z]! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:27:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:27:03'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:27:03'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:27:03'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:27:03'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:27:03'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:27:03'!
FAILURE!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:33:04' prior: 50605818!
asRot13
	(self value between: $a and: $m) ifTrue: [self value == $a ifTrue: [^$n] ifFalse: [^$z]] ifFalse: [^$a]
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:33:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:33:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:33:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:36:47'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:36:47'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:36:47'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:37:05'!
ERROR!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:38:01' prior: 50605861!
asRot13
	(self value between: $a and: $m) ifFalse: [self value == $a ifTrue: [^$n] ifFalse: [^$z]] ifTrue: [^$a]
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:38:08'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:38:08'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:38:08'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:38:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:38:55'!
ERROR!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:40:38' prior: 50605898!
asRot13
	(self value between: $a and: $m) ifTrue: [self value == $a ifTrue: [^$n] ifFalse: [^$z]] ifFalse: [^$a]
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:40:46'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:40:46'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:40:46'!
ERROR!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:41:19' prior: 50605927!
asRot13
	(self value between: $a asciiValue and: $m asciiValue) ifTrue: [self value == $a ifTrue: [^$n] ifFalse: [^$z]] ifFalse: [^$a]
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:41:26'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:41:26'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:41:26'!
ERROR!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:42:08' prior: 50605947!
asRot13
	((self value asciiValue) between: ($a asciiValue) and: ($m asciiValue)) ifTrue: [self value == $a ifTrue: [^$n] ifFalse: [^$z]] ifFalse: [^$a]
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:14'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:42:14'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:14'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:14'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:42:14'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:14'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:22'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:42:22'!
FAILURE!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:43:33' prior: 50605968!
asRot13
	((self value asciiValue) between: ($a asciiValue) and: ($m asciiValue)) 
			ifTrue: [self value == $a ifTrue: [^$n] ifFalse: [^$z]] 
			ifFalse: [self value == $n ifTrue: [^$a] ifFalse: [^$m]]
! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:43:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:43:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:43:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:43:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:43:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:43:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:43:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:43:41'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:43:41'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:43:41'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:43:41'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:43:41'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:43:41'!
FAILURE!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:44:13' prior: 50606054!
asRot13
	((self value asciiValue) between: ($a asciiValue) and: ($m asciiValue)) 
			ifTrue: [self value == $a ifTrue: [^$n] ifFalse: [^$z]] 
			ifFalse: [self value == $n ifTrue: [^$a] ifFalse: [^$m]]
		^self value
! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:44:17'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:44:17'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:44:17'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:44:17'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:44:17'!
ERROR!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:44:30' prior: 50606123!
asRot13
	((self value asciiValue) between: ($a asciiValue) and: ($m asciiValue)) 
			ifTrue: [self value == $a ifTrue: [^$n] ifFalse: [^$z]] 
			ifFalse: [self value == $n ifTrue: [^$a] ifFalse: [^$m]].
		^self value
! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:44:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:44:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:44:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:44:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:44:32'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:44:32'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:45:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:45:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:45:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:45:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:45:02'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:45:02'!
FAILURE!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:52:32' prior: 50606154!
asRot13
	((self value asciiValue) between: ($a asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self asciiValue + 13].
	((self value asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self asciiValue - 13].
		^self value

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:52:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:52:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:52:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:52:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:52:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:52:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:52:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:52:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:52:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:52:39'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:52:39'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:52:39'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:52:39'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:52:59' prior: 50606214!
asRot13
	((self value asciiValue) between: ($a asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self asciiValue + 13].
	((self value asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self asciiValue - 13].
		^$`

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:53:02'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:53:02'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:53:02'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:53:02'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:53:02'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:53:02'!
FAILURE!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:53:14' prior: 50606283!
asRot13
	((self value asciiValue) between: ($a asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self asciiValue + 13].
	((self value asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self asciiValue - 13].
		^self value

! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:53:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:53:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:53:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:53:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:53:22'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:53:22'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:22'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:22'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:53:22'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:53:22'!
FAILURE!

$m asciiValue !

$m asciiValue !

$m asciiValue !

$a asciiValue !

$a asciiValue !

$n asciiValue !

$A asciiValue !

$N asciiValue !

$a asLowercase !

$N asLowercase !
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 18:59:20' prior: 50606340!
asRot13
	((self value asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self asciiValue + 13].
	((self value asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self asciiValue - 13].
		^self value

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:59:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:59:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 18:59:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 18:59:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:28'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:59:28'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:28'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:28'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 18:59:28'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 18:59:28'!
FAILURE!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 19:04:05' prior: 50606444!
asRot13
	((self value asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self asciiValue + 13].
	((self value asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self asciiValue - 13].
		^self value

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:04:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:04:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:04:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:04:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:04:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:04:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:04:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:04:52'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:04:52'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:04:52'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:04:52'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:04:52'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:04:52'!
ERROR!

''!

''!

''!

''!

78!

''!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:09:52'!
asRot13
	^''! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:09:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:10:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:10:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:10:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:10:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:10:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:10:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:10:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:10:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:10:04'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:10:04'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:10:04'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:10:04'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:10:04'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:10:04'!
FAILURE!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:15:02' prior: 50606617!
asRot13
	((self value asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self asciiValue + 13].
	((self value asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self asciiValue - 13].
		^self value

! !
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:15:09' prior: 50606730!
asRot13
	((self value asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self value asciiValue + 13].
	((self value asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self value asciiValue - 13].
		^self value

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:15:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:15:15'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:15:15'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:15:22'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:15:47'!
ERROR!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:17:09' prior: 50606743!
asRot13
	self value == ''
		 ifTrue: [^'']
		 ifFalse:[
	((self value asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self value asciiValue + 13].
	((self value asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self value asciiValue - 13].
		^self value
			]

! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:17:13'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:17:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:17:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:17:15'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:17:15'!
ERROR!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:17:37' prior: 50606803!
asRot13
	(self value = '')
		 ifTrue: [^'']
		 ifFalse:[
	((self value asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self value asciiValue + 13].
	((self value asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self value asciiValue - 13].
		^self value
			]

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:17:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:17:45'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:17:45'!
ERROR!

'' isAscii !

'' isAscii !

'' isAscii!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:19:17' prior: 50606862!
asRot13
	((self value asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self value asciiValue + 13].
	((self value asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self value asciiValue - 13].
		^self value
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:19:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:19:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:19:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:19:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:19:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:19:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:19:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:19:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:19:20'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:19:20'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:19:28'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:19:56'!
ERROR!

'' asciiValue!

'a' asciiValue!

'a' asciiValue!

'adsa' at: 'a'!

'adsa' at: 2!

'adsa' at: 1 !
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 19:24:20' prior: 50606548!
asRot13
	|val|
	val := self value at: 1.
	((val asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self asciiValue + 13].
	((val asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self asciiValue - 13].
		^self value

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:24:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:24:43'!
ERROR!
!Character methodsFor: 'converting' stamp: 'MS 4/27/2023 19:25:47' prior: 50606986!
asRot13
	((self value asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self asciiValue + 13].
	((self value asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self asciiValue - 13].
		^self value

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:25:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:25:49'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:25:49'!
ERROR!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:26:37' prior: 50606922!
asRot13
	|val|
	val := self value at: 1.
	((val asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self value asciiValue + 13].
	((val asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self value asciiValue - 13].
		^self value
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:26:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:26:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:26:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:26:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:26:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:26:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:26:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:26:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:26:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:26:43'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:26:46'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:26:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:27:02'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:27:15'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:27:33'!
ERROR!

'' at: 1!

'' size!

'a' size!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:29:42' prior: 50607093!
asRot13
	
	(self value size = 0) ifFalse: [
		|val|
		val := self value at: 1.
		((val asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^Character asciiValue: self value asciiValue + 13].
		((val asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^Character asciiValue: self value asciiValue - 13].
			^self value
		]
	ifTrue: [
		^self value.
		]
	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:29:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:29:47'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:29:47'!
ERROR!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:31:11' prior: 50607165!
asRot13
	
	(self value size = 0) ifFalse: [
		|val|
		val := self value at: 1.
		((val asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^(Character asciiValue: self value asciiValue + 13) asText ].
		((val asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^(Character asciiValue: self value asciiValue - 13) asText ].
			^self value
		]
	ifTrue: [
		^self value.
		]
	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:31:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:31:35'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:31:35'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:32:34'!
ERROR!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:32:52' prior: 50607225!
asRot13
	
	(self value size = 0) ifFalse: [
		|val|
		val := self value at: 1.
		((val asLowercase asciiValue) between: (($a) asciiValue) and: ($m asciiValue))  ifTrue: [	^(Character asciiValue: val asciiValue + 13) asText ].
		((val asLowercase asciiValue) between: ($n asciiValue) and: ($z asciiValue)) ifTrue: [	^(Character asciiValue: val asciiValue - 13) asText ].
			^self value
		]
	ifTrue: [
		^self value.
		]
	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:33:03'!
PASSED!

----SNAPSHOT----(27 April 2023 19:33:13) CuisUniversity-5706.image priorSource: 8713034!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:33:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:33:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:33:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:33:17'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:33:17'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:33:17'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:33:17'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:33:17'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:33:17'!
FAILURE!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:36:59' prior: 50607289!
asRot13
	(self isEmpty) ifFalse: [^String with: (self at: 1) asRot13 ] 
			

! !
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:37:02' prior: 50607413!
asRot13
	(self isEmpty) ifFalse: [^String with: (self at: 1) asRot13 ] s
			

! !
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:37:23' prior: 50607418!
asRot13
	(self isEmpty) ifFalse: [^String with: (self at: 1) asRot13] ifTrue: [^'']
			

! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'MS 4/27/2023 19:37:24'!
PASSED!

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'MS 4/27/2023 19:37:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:37:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:37:41'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:37:41'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:38:20'!
PASSED!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:42:12' prior: 50607423!
asRot13
	(self size = 0) ifTrue: [^''].
	(self size = 1) ifTrue: [^String with: (self at: 1) asRot13].
	(self size = 2) ifTrue: [^(String with: (self at: 1) asRot13) appendToString: (String with: (self at: 2) asRot13)].

	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:42:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:42:22'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:42:22'!
FAILURE!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:43:12' prior: 50607595!
asRot13
	(self size = 0) ifTrue: [^''].
	(self size = 1) ifTrue: [^String with: (self at: 1) asRot13].
	(self size = 2) ifTrue: [^(String with: (self at: 2) asRot13) appendToString: (String with: (self at: 1) asRot13)].

	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:43:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:43:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:43:27'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:43:27'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:43:27'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:43:27'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:43:27'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:43:27'!
FAILURE!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:51:29' prior: 50607653!
asRot13
	|temp|
	(self size = 0) ifTrue: [^''].
	(self size = 1) ifTrue: [^String with: (self at: 1) asRot13].
	temp := (String with: (self at: 1) asRot13).
	self size timesRepeat: [temp := temp appendToString: (String with: (self at: 1) asRot13)].
	^temp
	
	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:51:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:51:46'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:51:46'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:51:53'!
FAILURE!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:52:08' prior: 50607778!
asRot13
	|temp|
	(self size = 0) ifTrue: [^''].
	(self size = 1) ifTrue: [^String with: (self at: 1) asRot13].
	temp := (String with: (self at: 1) asRot13).
	self size -1 timesRepeat: [temp := temp appendToString: (String with: (self at: 1) asRot13)].
	^temp
	
	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:52:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:52:12'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:52:12'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:52:14'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:52:24'!
FAILURE!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:55:48' prior: 50607841!
asRot13
	|temp|
	(self size = 0) ifTrue: [^''].
	(self size = 1) ifTrue: [^String with: (self at: 1) asRot13].
	self collect:[:aChar | aChar asRot13]
	
	
	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:55:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:55:56'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:55:56'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:56:00'!
FAILURE!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:57:34' prior: 50607908!
asRot13
	
	(self size = 0) ifTrue: [^''].
	(self size = 1) ifTrue: [^String with: (self at: 1) asRot13].
	(self size = 2): [^(String with: (self at: 2) asRot13) appendToString: (String with: (self at: 1) asRot13)].
	self collect:[:aChar | aChar asRot13]
	
			

! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'MS 4/27/2023 19:57:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:57:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:57:48'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:57:48'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:57:53'!
ERROR!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:58:14' prior: 50607967!
asRot13
	
	(self size = 0) ifTrue: [^''].
	(self size = 1) ifTrue: [^String with: (self at: 1) asRot13].
	(self size = 2) ifTrue: [^(String with: (self at: 2) asRot13) appendToString: (String with: (self at: 1) asRot13)].
	self collect:[:aChar | aChar asRot13]
	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:58:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:58:21'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:58:21'!
FAILURE!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 19:58:52' prior: 50608087!
asRot13
	
	(self size = 0) ifTrue: [^''].
	(self size = 1) ifTrue: [^String with: (self at: 1) asRot13].
	(self size = 2) ifTrue: [^(String with: (self at: 2) asRot13) appendToString: (String with: (self at: 1) asRot13)].
	^self collect:[:aChar | aChar asRot13]
	
			

! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:59:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:59:09'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'MS 4/27/2023 19:59:09'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 19:59:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 19:59:20'!
PASSED!

----SNAPSHOT----(27 April 2023 19:59:33) CuisUniversity-5706.image priorSource: 8822238!
!String methodsFor: 'copying' stamp: 'MS 4/27/2023 20:21:15' prior: 50608150!
asRot13
	^self collect:[:aChar | aChar asRot13]
	
			

! !

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'MS 4/27/2023 20:26:09'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'MS 4/27/2023 20:26:16'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'MS 4/27/2023 20:28:17'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:28:31'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

1 !
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:29:31'!
factorize
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:29:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:29:43'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:29:43'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:29:43'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:29:43'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:29:43'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:29:43'!
FAILURE!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:30:51' prior: 50608363!
factorize
	self value = 1 ifTrue: [^Bag new].
	^Bag with: 2.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:30:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:30:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:30:59'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:30:59'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:30:59'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:30:59'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:30:59'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:30:59'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:30:59'!
FAILURE!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:32:12' prior: 50608401!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value]! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:32:17'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:32:17'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:32:17'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:32:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:32:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:32:20'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:32:20'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:32:20'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:32:20'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:32:20'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:32:20'!
FAILURE!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:37:27' prior: 50608448!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	^Bag with: 2 with: 2! !
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:39:47' prior: 50608507!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [ ^(Bag with: 2) add: self / 2 factorize].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:39:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:39:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:39:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:39:51'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:39:51'!
ERROR!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:40:13' prior: 50608514!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [ ^(Bag with: 2) add: self value / 2 factorize].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:40:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:40:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:40:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:40:20'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:40:20'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:40:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:40:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:40:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:40:28'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:40:28'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:41:06'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:42:03'!
ERROR!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:42:49' prior: 50608543!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [ ^(Bag with: 2) addAll: self value / 2 factorize].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:42:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:42:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:42:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:42:54'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:42:54'!
ERROR!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:43:31' prior: 50608601!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [ ^(Bag with: 2) addAll: (self value / 2) factorize].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:43:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:43:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:43:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:43:51'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:43:51'!
FAILURE!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:44:21' prior: 50608630!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [ ^(Bag with: 2) with: (self value / 2) factorize].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:44:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:44:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:44:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:44:28'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:44:28'!
ERROR!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:44:55' prior: 50608659!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [ ^(Bag with: 2) with: (self value / 2)].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:44:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:44:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:44:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:44:58'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:44:58'!
ERROR!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:45:35' prior: 50608688!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [ ^Bag with: 2 with: (self value / 2)].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:46:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:46:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:46:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:46:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:46:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:46:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:46:16'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:46:16'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:46:16'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 20:46:16'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 20:46:16'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:46:16'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 20:46:16'!
FAILURE!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:48:44' prior: 50608717!
factorize
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [ ^(Bag with: 2) addAll: ((self value / 2) factorize)].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:49:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:49:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:49:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:49:01'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 20:49:01'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:49:09'!
FAILURE!

Bag with: 2!

Bag with: 2!

Bag with: 2 with: 2 !

Bag with: 2 with: 2 !

(Bag with: 2) addAll: (Bag with: 2) !

(Bag with: 2) add: (Bag with: 2)!

(Bag with: 2) + (Bag with: 2)!

(Bag with: 2) collect: (Bag with: 2)!

(Bag with: 2) collect: [Bag with: 2]!

(Bag with: 2) add: (Bag with: 2)!

(Bag with: 2) withAll: (Bag with: 2)!

(Bag with: 2) withAll: (2)!

(Bag with: 2) withAll: (Bag with: 2)!

(Bag with: 2) addAll: (Bag with: 2)!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 20:59:13' prior: 50608790!
factorize
	| bag |
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [
		bag := (self value / 2) factorize.
		bag add: 2.
		^bag.
	].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:59:27'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:59:27'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:59:27'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:59:27'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 20:59:27'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 20:59:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:59:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 20:59:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 20:59:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 20:59:38'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:59:38'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'MS 4/27/2023 20:59:38'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'MS 4/27/2023 20:59:38'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 20:59:38'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'MS 4/27/2023 20:59:38'!
FAILURE!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 21:00:20' prior: 50608838!
factorize
	| bag |
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	(self value isDivisibleBy: 2) ifTrue: [
		bag := (self value / 2) factorize.
		bag add: 2.
		^bag.
	].
	(self value isDivisibleBy: 3) ifTrue: [
		bag := (self value / 3) factorize.
		bag add: 3.
		^bag.
	].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 21:00:25'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:00:25'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:00:25'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 21:00:25'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 21:00:25'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'MS 4/27/2023 21:00:25'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 21:00:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:00:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:00:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 21:00:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 21:00:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'MS 4/27/2023 21:00:29'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:00:29'!
testExtraToCheckGeneralizationOnKata
	
	self assert: (Bag with: 2 with: 2 with: 3 with: 3 with: 5 with: 13) equals: (2*2*3*3*5*13) factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:00:29'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 21:00:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:00:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:00:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 21:00:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 21:00:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'MS 4/27/2023 21:00:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:00:49'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:00:49'!
ERROR!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 21:04:53' prior: 50608923!
factorize
	| bag prime |
	prime := 2.
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	
	(self value isDivisibleBy: prime) whileFalse: [ prime := prime nextPrime ].
		bag := (self value / prime) factorize.
		bag add: prime.
		^bag.


	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 21:04:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:04:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:04:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 21:04:58'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 21:04:58'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'MS 4/27/2023 21:04:58'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:04:58'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 21:05:06'!
ERROR!
!SmallInteger methodsFor: 'printing' stamp: 'MS 4/27/2023 21:06:41' prior: 50609031!
factorize
	| bag prime |
	prime := 2.
	self value = 1 ifTrue: [^Bag new].
	self value isPrime ifTrue: [^Bag with: self value].
	
	[self value isDivisibleBy: prime] whileFalse: [ prime := prime nextPrime ].
		bag := (self value / prime) factorize.
		bag add: prime.
		^bag.


	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'MS 4/27/2023 21:07:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:07:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'MS 4/27/2023 21:07:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'MS 4/27/2023 21:07:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'MS 4/27/2023 21:07:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'MS 4/27/2023 21:07:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:07:00'!
PASSED!

----SNAPSHOT----(27 April 2023 21:07:07) CuisUniversity-5706.image priorSource: 8853403!

TDDBabyStepsGameAnagrams start!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'MS 4/27/2023 21:07:49'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:08:26'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:09:09'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:09:09'!
ERROR!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:09:18'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:10:06' prior: 50609144!
anagrams
	^Set with: ''.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:10:10'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:10:15'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:10:15'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:10:15'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:10:15'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:10:15'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:10:15'!
FAILURE!

'asd' size!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:13:45' prior: 50609148!
anagrams
	(self = '') ifTrue: [ ^Set with: ''. ].
	^Set with: self.! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:13:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:13:56'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:13:56'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:14:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:14:07'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:14:07'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:14:07'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:14:07'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:14:07'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:14:07'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:16:49' prior: 50609192!
anagrams
	(self = '') ifTrue: [ ^Set with: ''. ].
	^(Set with: self with: (self reversed)).! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:16:52'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:16:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:16:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:16:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:16:55'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:16:55'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:16:55'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:16:55'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:16:55'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:16:55'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:16:55'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:16:55'!
FAILURE!

'asd' at: 1 !

'sadsad' substrings !

'asd' replaceFrom: 1 to: 1 with: ''!

'asd' copyReplaceFrom: 1 to: 1 with: ''!

Set with: 'asd'!

'asd' copyReplaceFrom: 1 to: 1 with: ''!

'asd' copyReplaceFrom: 1 to: 1 with: ''!

'as' appendToString: 'asda'!

'123' appendToString: '456'!

'123' appendToString: '456'!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:42:48' prior: 50609253!
anagrams

	| letra indice substring |
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	indice := 1.
	(indice <= self size) whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		^substring collect: [ :each | each appendToString:  letra]
	].! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:43:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:43:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:43:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:43:02'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:43:02'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:44:00'!
ERROR!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:44:27' prior: 50609349!
anagrams

	| letra indice substring |
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	indice := 1.
	(indice <= self size) whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		^substring collect: [ :each | each appendToString:  letra]
	].

! !
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:46:02' prior: 50609391!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	(indice <= self size) whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		substring collect: [ :each | each appendToString:  letra].
		set union: substring.
	].
	! !
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:46:41' prior: 50609406!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	(indice <= self size) whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set union: (substring collect: [ :each | each appendToString:  letra]).
	].
	! !
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:46:46' prior: 50609422!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	(indice <= self size) whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set union: (substring collect: [ :each | each appendToString:  letra]).
	].
	^set.! !
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:46:47' prior: 50609438!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	(indice <= self size) whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set union: (substring collect: [ :each | each appendToString:  letra]).
	].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:46:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:46:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:46:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:46:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:46:57'!
ERROR!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:47:17' prior: 50609454!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	[indice <= self size] whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set union: (substring collect: [ :each | each appendToString:  letra]).
	].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:47:22'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:47:22'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:47:22'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:47:22'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:47:22'!
ERROR!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:47:51' prior: 50609493!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	[indice <= self size] whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set union: (substring collect: [ :each | each appendToString:  (letra) asText]).
	].
	^set.
	! !
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:48:00' prior: 50609532!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	[indice <= self size] whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set union: (substring collect: [ :each | each appendToString:  (letra asText)]).
	].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:48:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:48:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:48:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:48:31'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:48:31'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:48:31'!
PASSED!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:49:09' prior: 50609549!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	[indice <= self size] whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set union: (substring collect: [ :each | each appendToString:  (letra asText)]).
	indice := indice + 1.
	].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:49:15'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:49:15'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:49:15'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:49:16'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:49:16'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:50:30' prior: 50609593!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	[indice <= self size] whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set := set union: (substring collect: [ :each | each appendToString: (letra asText)]).
		indice := indice + 1.
	].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:51:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:51:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:51:09'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:51:09'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:51:09'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:51:09'!
PASSED!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:51:09'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:52:16' prior: 50609633!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	[indice <= 3] whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set := set union: (substring collect: [ :each | each appendToString: (letra asText)]).
		indice := indice + 1.
	].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:52:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:52:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:52:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:52:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:52:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:52:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:52:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:52:29'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:52:29'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:52:29'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:52:29'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:52:29'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:52:29'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:52:46' prior: 50609731!
anagrams

	| letra indice substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	indice := 1.
	[indice <= self size] whileTrue: [
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set := set union: (substring collect: [ :each | each appendToString: (letra asText)]).
		indice := indice + 1.
	].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:52:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:52:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:52:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:52:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:52:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:53:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:53:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:53:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:53:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:53:02'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'MS 4/27/2023 21:53:02'!
testExtraToCheckGeneralizationOnKata

	self assert: 40320 equals:`'abcdefgh' anagrams` size.
	
	self assert: (`'abcdefgh' anagrams`) includes: 'cghdbeaf'.
	
	self assert: 10080 equals: `'abcdefab' anagrams` size
	! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:53:33'!
PASSED!

----SNAPSHOT----(27 April 2023 21:53:41) CuisUniversity-5706.image priorSource: 8878903!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:56:55' prior: 50609852!
anagrams

	| letra substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.


	1 to: self size do: [:indice |  
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set := set union: (substring collect: [ :each | each appendToString: (letra asText)]).]
	^set.
	! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'MS 4/27/2023 21:56:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:57:22'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:57:22'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:57:22'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:57:22'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:57:22'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:57:22'!
PASSED!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:57:41' prior: 50609933!
anagrams

	| letra substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.


	(1 to: self size) do: [:indice |  
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set := set union: (substring collect: [ :each | each appendToString: (letra asText)]).]
	^set.
	! !
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:58:08' prior: 50610033!
anagrams

	| letra substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	(1 to: self size) do: [:indice |  
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set := set union: (substring collect: [ :each | each appendToString: (letra asText)]).].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:58:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:58:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:58:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:58:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:58:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:58:14'!
PASSED!
!String methodsFor: 'category-name' stamp: 'MS 4/27/2023 21:58:24' prior: 50610049!
anagrams

	| letra substring set|
	
	(self = '') ifTrue: [ ^Set with: ''. ].
	(self size <= 2) ifTrue: [	^(Set with: self with: (self reversed)). ].
	
	set := Set new.
	
	1 to: self size do: [:indice |  
		letra := self at: indice.
		substring := (self copyReplaceFrom: indice to: indice with: '') anagrams.
		set := set union: (substring collect: [ :each | each appendToString: (letra asText)]).].
	^set.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:58:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:58:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:58:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:58:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:58:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:58:33'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'MS 4/27/2023 21:58:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'MS 4/27/2023 21:58:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'MS 4/27/2023 21:58:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'MS 4/27/2023 21:58:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'MS 4/27/2023 21:58:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'MS 4/27/2023 21:58:43'!
PASSED!

'asd' copyFrom: 3 to:3 !

'asd' copyFrom: 2 to: 3  !

'asd' copyWithout: 2!

'asd' copyWithout: 1!

----SNAPSHOT----(27 April 2023 22:00:44) CuisUniversity-5706.image priorSource: 8904914!