

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (25 June 2023 17:47:41) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!


----End fileIn of C:\windows64\repoProfes\2023-1c\10-CustomerImporter\CustomerImporter.st----!
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624420!
town

	^town! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624398!
province

	^province! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624408!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624430!
zipCode: aZipCode

	zipCode := aZipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624412!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624416!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624427!
zipCode

	^zipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624405!
streetName

	^streetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624401!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624423!
town: aTown

	town := aTown! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624491 overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624467!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624457!
firstName

	^firstName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624450!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624481!
identificationType

	^identificationType ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624485!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624460!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624464!
lastName

	^lastName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624475!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624454!
addresses

	^ addresses! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624471!
identificationNumber

	^identificationNumber ! !
!Customer class methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624504!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624589!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624617!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624623!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624569!
close

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624602!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624573!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624596!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624584!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624579!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624559!
beginTransaction

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624606!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624563!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession class methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624637!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624380!
test01Import

	Customer importCustomers ! !

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 17:48:39'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 17:48:39'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 17:55:27'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 18:01:08'!
PASSED!
!Customer class methodsFor: 'importing' stamp: 'Ms 6/25/2023 18:25:08' prior: 50624745!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth.
			newCustomer addAddress: newAddress.].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 18:25:12'!
PASSED!
!Customer class methodsFor: 'importing' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624881!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'Ms 6/25/2023 21:08:20'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:09:46' prior: 50624867!
test01Import
	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
! !

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 21:09:48'!
PASSED!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'Ms 6/25/2023 21:10:29'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:10:28' overrides: 16961394!
setUp
	session2 := DataBaseSession for: (Array with: Address with: Customer).
	session2 beginTransaction.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:11:08' overrides: 16961402!
tearDown
	
	session2 commit.
	session2 close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:11:56' prior: 50624976!
test01Import
	
	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:12:09' prior: 50625037!
test01Import
	
	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session2 persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 21:12:10'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 21:12:10'!
PASSED!

----STARTUP---- (25 June 2023 22:58:15) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!


!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
TestCase subclass: #ImportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
TestCase subclass: #ImportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NR 6/22/2023 15:23:45'!
test01Import

	Customer importCustomers ! !

!classDefinition: #Address category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
province

	^province! !
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetName

	^streetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
town

	^town! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
town: aTown

	town := aTown! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode

	^zipCode! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode: aZipCode

	zipCode := aZipCode! !

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
addresses

	^ addresses! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
firstName

	^firstName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
lastName

	^lastName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationType

	^identificationType ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !

!classDefinition: 'Customer class' category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Customer class
	instanceVariableNames: ''!

!classDefinition: 'Customer class' category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Customer class
	instanceVariableNames: ''!
!Customer class methodsFor: 'importing' stamp: 'NR 6/22/2023 15:24:06'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 00:19:29'!
beginTransaction

	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 19:17:36'!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'closing' stamp: 'HAW 5/22/2022 00:19:29'!
close

	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 19:29:06'!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29'!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'id' stamp: 'HAW 5/22/2022 00:19:29'!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 5/22/2022 00:19:29'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
DataBaseSession class
	instanceVariableNames: ''!

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
DataBaseSession class
	instanceVariableNames: ''!
!DataBaseSession class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 00:19:29'!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625175!
town

	^town! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625153!
province

	^province! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625163!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625185!
zipCode: aZipCode

	zipCode := aZipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625167!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625171!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625182!
zipCode

	^zipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625160!
streetName

	^streetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625156!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625178!
town: aTown

	town := aTown! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625248 overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625224!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625214!
firstName

	^firstName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625207!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625238!
identificationType

	^identificationType ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625242!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625217!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625221!
lastName

	^lastName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625232!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625211!
addresses

	^ addresses! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625228!
identificationNumber

	^identificationNumber ! !
!Customer class methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625262!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625350!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625378!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625384!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625330!
close

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625363!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625334!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625357!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625345!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625340!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625320!
beginTransaction

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625367!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625324!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession class methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625399!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625132!
test01Import

	Customer importCustomers ! !
!Customer class methodsFor: 'importing' stamp: 'Ms 6/25/2023 18:25:08' prior: 50625504!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth.
			newCustomer addAddress: newAddress.].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!Customer class methodsFor: 'importing' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625631!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:09:46' prior: 50625626!
test01Import
	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:10:28' overrides: 16961394!
setUp
	session2 := DataBaseSession for: (Array with: Address with: Customer).
	session2 beginTransaction.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:11:08' overrides: 16961402!
tearDown
	
	session2 commit.
	session2 close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:11:56' prior: 50625726!
test01Import
	
	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:12:09' prior: 50625784!
test01Import
	
	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session2 persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !

TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:00:34'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:00:40' prior: 50625779 overrides: 16961402!
tearDown
	
	session commit.
	session close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:00:44' prior: 50625772 overrides: 16961394!
setUp
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:00:48' prior: 50625820!
test01Import
	
	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:03:43' prior: 50625882!
test01Import
	
	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	CustomerImporter importToSession: session theCustomers: self getCustomersFromStream.  
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:05:54' prior: 50625918!
test01Import
	
	"
	self importCustomers
	
	'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'

	"
	| inputStream  newCustomer line |


	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	CustomerImporter importToSession: session theCustomers: self getCustomersFromStream.  
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:06:14'!
getCustomersFromStream

'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:06:35' prior: 50626001!
getCustomersFromStream

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
					A,San Martin,3322,Olivos,1636,BsAs
					A,Maipu,888,Florida,1122,Buenos Aires
					C,Juan,Perez,C,23-25666777-9
					A,Alem,1122,CABA,1001,CABA'
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:07:01'!
ERROR!
!CustomerImporter class methodsFor: 'initialization' stamp: 'ms] 6/25/2023 23:07:24'!
importToSession: aSession theCustomers: aRenameMe1 
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'initialization' stamp: 'ms] 6/25/2023 23:08:06' prior: 50626023!
importToSession: aSession theCustomers: aCustomers 
	^self new initializeWithSession: aSession theCustomers: aCustomers.! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:08:08'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:08:08'!
ERROR!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:08:18'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:08:18'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'intialization' stamp: 'ms] 6/25/2023 23:08:18'!
initializeWithSession: aSession theCustomers: aCustomers 
	self shouldBeImplemented.
	session := aSession.
	customers := aCustomers.! !
!CustomerImporter methodsFor: 'intialization' stamp: 'ms] 6/25/2023 23:08:32' prior: 50626056!
initializeWithSession: aSession theCustomers: aCustomers 
	session := aSession.
	customers := aCustomers.! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:08:49'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session customers input'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'intialization' stamp: 'ms] 6/25/2023 23:08:48' prior: 50626064!
initializeWithSession: aSession theCustomers: aCustomers
	session := aSession.
	input := aCustomers.! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session  input'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:08:57'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session input'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:09:14' prior: 50625957!
test01Import
	
	"
	self importCustomers
	
	'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'

	"
	| inputStream  newCustomer line |


	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!CustomerImporter methodsFor: 'nil' stamp: 'ms] 6/25/2023 23:09:42'!
import
	| newCustomer line |

	line := input nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := input nextLine. ].

	input close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:11:44' prior: 50626098!
test01Import
	
	| inputStream  |


	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:11:54' prior: 50626174!
test01Import
	
	| inputStream  |


	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:11:59' prior: 50626184!
test01Import
	
	

	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:12:01'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:12:01'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:12:37' prior: 50626194!
test01Import
	
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	self assert: 2 equals: (session selectAllOfType: Customer).
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:12:38'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:12:44' prior: 50626206!
test01Import
	
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:12:45'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:13:08'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:16:08' prior: 50626010!
getCustomersFromStream

	^ReadStream on:'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:16:09'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:16:14'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:16:15'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:18:08' prior: 50626218!
test01Import
	
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:18:31'!
importCusomers

	^ (CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:18:31' prior: 50626249!
test01Import
	
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:24:52' prior: 50626265!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444 ]  
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:24:57' prior: 50626272!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444]
	  
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:26:14' prior: 50626282!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444].
	self assert: pepe firstName equals: 'Pepe'.
	  
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:26:17'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:27:06' prior: 50626292!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444].
	self assert: pepe firstName equals: 'Pepe'.
	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:27:34' prior: 50626306!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444] ofType: Customer.
	self assert: pepe firstName equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:27:35'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:28:09' prior: 50626318!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444] ofType: Customer.
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:28:10'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:28:27' prior: 50626333!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444] ofType: Customer).
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:28:28'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:28:47' prior: 50626348!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer).
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:28:49'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:29:21' prior: 50626363!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer).
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:29:35'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:29:45'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:30:48'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:32:00'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:33:51' prior: 50626378!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) first.
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:33:57'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:34:20' prior: 50626400!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:34:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:34:22'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:35:09' prior: 50626415!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.

	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName ) equals: 'Sanche'.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe firstName) equals: 'Pepe'.

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:35:10'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:35:15' prior: 50626433!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.

	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName ) equals: 'Sanchez'.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe firstName) equals: 'Pepe'.

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:35:17'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:35:17'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:44:09' prior: 50626453!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.

	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:45:10'!
assertCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:45:10' prior: 50626475!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assertCustomers.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.

	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:46:17' prior: 50626495!
test01Import
	
	| pepe |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'Sanchez'.

	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:46:19'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:47:13' prior: 50626508!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:16'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:17'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:47:26' prior: 50626525!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Pepe'.
	self assert: (Juan lastName) equals: 'Sanchez'.
	self assert: (Juan identificationType) equals: 'D'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:27'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:47:40' prior: 50626553!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'CABA'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:41'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:47:50' prior: 50626579!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:51'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:52'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:48:52' prior: 50626605!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:59:01' prior: 50626633!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:59:32' prior: 50626656!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	self assert: pepeAdress1 streetNumber equals: '3322'.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:59:42'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'ms] 6/25/2023 23:59:48'!
getAdressOnStreet: aRenameMe1 
	self shouldBeImplemented.! !
!Customer methodsFor: 'addresses' stamp: 'ms] 6/26/2023 00:00:37' prior: 50626710!
getAdressOnStreet: aStreetName 
	^addresses detect: [ :anAdress | 	anAdress streetName = aStreetName]! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:00:39'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:00:39'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:00:53' prior: 50626681!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	self assert: pepeAdress1 streetNumber equals: 3322.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:00:54'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:00:55'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:05:34'!
pepeSanchez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Pepe'.
	customer lastName: 'Sanchez'.
	customer identificationType: 'D'.
	customer identificationNumber: '22333444'.
	^customer.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:07:39' prior: 50626727!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: pepe equals: self pepeSanchez.
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	self assert: pepeAdress1 streetNumber equals: 3322.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:07:40'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:07:51'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:14'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:24'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:24'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:29'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:49'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:27:16' prior: 50626768!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	self assert: pepeAdress1 streetNumber equals: 3322.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:27:20'!
ERROR!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:27:27'!
compareCustomer: pepe with: aRenameMe1 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:27:42' prior: 50626835!
compareCustomer: aCustomer1 with: aCustomer2 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:28:01' prior: 50626840!
compareCustomer: aCustomer1 with: aCustomer2 
	^ (aCustomer1 firstName = aCustomer2 firstName) &
	  (aCustomer1 lastName = aCustomer2 lastName) &
	  (aCustomer1 identificationType = aCustomer2 identificationType) &
	  (aCustomer1 identificationNumber = aCustomer2 identificationNumber)
! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:28:02'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:28:42' prior: 50626809!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:29:05'!
juanPerez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Juan'.
	customer lastName: 'Perez'.
	customer identificationType: 'C'.
	customer identificationNumber: '23-25666777-9'.
	^customer.
! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:29:13'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:29:14'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:30:22' prior: 50626860!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	(session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:30:51'!
selectCustomerWithIdentificationNumber: aNumber

	^(session select: [ :aCustomer | 	aCustomer identificationNumber = aNumber] ofType: Customer) atRandom.
	



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:31:09' prior: 50626893!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:31:10'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:31:11'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:41:41' prior: 50626878!
juanPerez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Juan'.
	customer lastName: 'Perez'.
	customer identificationType: 'C'.
	customer identificationNumber: '23-25666777-9'.
	customer addAddress: self streetAlem1122.

	^customer.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:41:46' prior: 50626941!
juanPerez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Juan'.
	customer lastName: 'Perez'.
	customer identificationType: 'C'.
	customer identificationNumber: '23-25666777-9'.
	customer addAddress: self streetAlem1122.
	^customer.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:42:49'!
streetAlem1122
	
	
	| address |

	address := Address new.
	address streetName: 'Alem'.
	address streetNumber: 1122.
	address town: 'CABA'.
	address zipCode: 1001.
	address province: 'CABA'.
	^address.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:43:05'!
streetMaipu888
	
	| address |
	
	address := Address new.
	address streetName: 'Maipu'.
	address streetNumber: 888.
	address town: 'Florida'.
	address zipCode: 1122.
	address province: 'Buenos Aires'.
	^address! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:43:18'!
streetSanMartin3322
	
	| address|
	
	address := Address new.
	address streetName: 'San Martin'.
	address streetNumber: 3322.
	address town: 'Olivos'.
	address zipCode: 1636.
	address province: 'BsAs'.
	
	^address.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:43:59' prior: 50626758!
pepeSanchez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Pepe'.
	customer lastName: 'Sanchez'.
	customer identificationType: 'D'.
	customer identificationNumber: '22333444'.
	customer addAddress: self streetMaipu888 .
	customer addAddress: self streetSanMartin3322 .

	^customer.
! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:44:02'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:45:07' prior: 50626921!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	self assert: (self compareAdressOf: pepe addresses with: self pepeSanchez addresses ).

	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:45:09'!
ERROR!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:45:15'!
compareAdressOf: aRenameMe1 with: aRenameMe2 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:46:12' prior: 50627027!
compareAdressOf: aAdresses with: aAdresses1
	 
	! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:48:42' prior: 50627032!
compareAdressOf: aAdresses with: aAdresses1

	
	 aAdresses1 do: [ :add | aAdresses includes: add].
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:48:44'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:48:45'!
ERROR!

!methodRemoval: ImportTest #compareCustomer:with: stamp: 'ms] 6/26/2023 00:49:57'!
compareCustomer: aCustomer1 with: aCustomer2 
	^ (aCustomer1 firstName = aCustomer2 firstName) &
	  (aCustomer1 lastName = aCustomer2 lastName) &
	  (aCustomer1 identificationType = aCustomer2 identificationType) &
	  (aCustomer1 identificationNumber = aCustomer2 identificationNumber)
!

!methodRemoval: ImportTest #compareAdressOf:with: stamp: 'ms] 6/26/2023 00:49:59'!
compareAdressOf: aAdresses with: aAdresses1

	
	 aAdresses1 do: [ :add | aAdresses includes: add].
	!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:28:01'!
compareCustomer: aCustomer1 with: aCustomer2 
	^ (aCustomer1 firstName = aCustomer2 firstName) &
	  (aCustomer1 lastName = aCustomer2 lastName) &
	  (aCustomer1 identificationType = aCustomer2 identificationType) &
	  (aCustomer1 identificationNumber = aCustomer2 identificationNumber)
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:51:03' prior: 50627008!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:51:05'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:51:06'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:54:12' prior: 50627078!
test01Import
	
	| pepe Juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez).


	self importCusomers.  
	self assertCustomers.
	



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:54:45'!
assertAllExistingCustomers

	| pepe Juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:54:45' prior: 50627098!
test01Import
	
	self assertAllExistingCustomers.


	self importCusomers.  
	self assertCustomers.
	



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:54:51' prior: 50627126!
test01Import
	
	self importCusomers.  
	self assertCustomers.
	self assertAllExistingCustomers.
	



	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:54:52'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:54:53'!
PASSED!
!ImportTest methodsFor: 'setUp - tearDown' stamp: 'ms] 6/26/2023 00:59:15' prior: 50625875 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.! !
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:06:57' prior: 50627113!
assertAllExistingCustomers

	| pepe Juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	self assert: (self assertStreetName: self streetSanMartin3322 isContainsIn: pepe addresses).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez)! !
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:07:43' prior: 50627152!
assertAllExistingCustomers

	| pepe juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	self assert: (self assertStreetName: self streetSanMartin3322 isContainsIn: pepe addresses).
	self assert: (self assertStreetName: self streetMaipu888 isContainsIn: pepe addresses).

	
	juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: juan with: self juanPerez)	.
	self assert: (self assertStreetName: self streetAlem1122 isContainsIn: juan addresses).
! !
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:07:49' prior: 50627168!
assertAllExistingCustomers

	| pepe juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	self assert: (self assertStreetName: self streetSanMartin3322 isContainsIn: pepe addresses).
	self assert: (self assertStreetName: self streetMaipu888 isContainsIn: pepe addresses).

	
	juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: juan with: self juanPerez)	.
	self assert: (self assertStreetName: self streetAlem1122 isContainsIn: juan addresses).
! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:07:56'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:07:57'!
ERROR!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 01:08:05'!
assertStreetName: aRenameMe1 isContainsIn: aRenameMe2 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 01:08:22' prior: 50627216!
assertStreetName: aAddress isContainsIn: aAddressExpected 
	self shouldBeImplemented.! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:08:56'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:08:56'!
ERROR!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 01:11:45' prior: 50627222!
assertStreetName: aAddress isContainsIn: aAddressExpected 
	aAddressExpected anySatisfy: [ :add | self assertAdress: add isEquals: aAddress ].! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:11:48'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:11:49'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:11:53'!
assertAdress: add isEquals: aAddress 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:12:11' prior: 50627245!
assertAdress: add isEquals: aAddress 
	^ add streetName = aAddress streetName &
	  add streetNumber = aAddress streetNumber &
	  add zipCode = aAddress zipCode &
	  add town = aAddress town &
	  add province = aAddress province! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:12:13'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:12:13'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:12:22'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:13:09' prior: 50627233!
assertStreetName: aAddress isContainsIn: aAddressExpected 
	^aAddressExpected anySatisfy: [ :add | self assertAdress: add isEquals: aAddress ].! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:13:10'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:13:20'!
PASSED!