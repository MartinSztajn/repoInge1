

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (25 June 2023 17:47:41) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!


----End fileIn of C:\windows64\repoProfes\2023-1c\10-CustomerImporter\CustomerImporter.st----!
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624420!
town

	^town! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624398!
province

	^province! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624408!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624430!
zipCode: aZipCode

	zipCode := aZipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624412!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624416!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624427!
zipCode

	^zipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624405!
streetName

	^streetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624401!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624423!
town: aTown

	town := aTown! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624491 overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624467!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624457!
firstName

	^firstName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624450!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624481!
identificationType

	^identificationType ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624485!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624460!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624464!
lastName

	^lastName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624475!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624454!
addresses

	^ addresses! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624471!
identificationNumber

	^identificationNumber ! !
!Customer class methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624504!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624589!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624617!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624623!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624569!
close

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624602!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624573!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624596!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624584!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624579!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624559!
beginTransaction

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624606!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624563!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession class methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624637!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624380!
test01Import

	Customer importCustomers ! !

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 17:48:39'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 17:48:39'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 17:55:27'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 18:01:08'!
PASSED!
!Customer class methodsFor: 'importing' stamp: 'Ms 6/25/2023 18:25:08' prior: 50624745!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth.
			newCustomer addAddress: newAddress.].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 18:25:12'!
PASSED!
!Customer class methodsFor: 'importing' stamp: 'Ms 6/25/2023 17:48:20' prior: 50624881!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'Ms 6/25/2023 21:08:20'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:09:46' prior: 50624867!
test01Import
	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
! !

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 21:09:48'!
PASSED!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'Ms 6/25/2023 21:10:29'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:10:28' overrides: 16961394!
setUp
	session2 := DataBaseSession for: (Array with: Address with: Customer).
	session2 beginTransaction.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:11:08' overrides: 16961402!
tearDown
	
	session2 commit.
	session2 close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:11:56' prior: 50624976!
test01Import
	
	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:12:09' prior: 50625037!
test01Import
	
	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session2 persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 21:12:10'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'Ms 6/25/2023 21:12:10'!
PASSED!

----STARTUP---- (25 June 2023 22:58:15) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!


!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
TestCase subclass: #ImportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
TestCase subclass: #ImportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NR 6/22/2023 15:23:45'!
test01Import

	Customer importCustomers ! !

!classDefinition: #Address category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
province

	^province! !
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetName

	^streetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
town

	^town! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
town: aTown

	town := aTown! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode

	^zipCode! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode: aZipCode

	zipCode := aZipCode! !

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
addresses

	^ addresses! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
firstName

	^firstName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
lastName

	^lastName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationType

	^identificationType ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !

!classDefinition: 'Customer class' category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Customer class
	instanceVariableNames: ''!

!classDefinition: 'Customer class' category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Customer class
	instanceVariableNames: ''!
!Customer class methodsFor: 'importing' stamp: 'NR 6/22/2023 15:24:06'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 00:19:29'!
beginTransaction

	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 19:17:36'!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'closing' stamp: 'HAW 5/22/2022 00:19:29'!
close

	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 19:29:06'!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29'!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'id' stamp: 'HAW 5/22/2022 00:19:29'!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 5/22/2022 00:19:29'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
DataBaseSession class
	instanceVariableNames: ''!

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
DataBaseSession class
	instanceVariableNames: ''!
!DataBaseSession class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 00:19:29'!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625175!
town

	^town! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625153!
province

	^province! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625163!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625185!
zipCode: aZipCode

	zipCode := aZipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625167!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625171!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625182!
zipCode

	^zipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625160!
streetName

	^streetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625156!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625178!
town: aTown

	town := aTown! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625248 overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625224!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625214!
firstName

	^firstName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625207!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625238!
identificationType

	^identificationType ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625242!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625217!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625221!
lastName

	^lastName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625232!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625211!
addresses

	^ addresses! !
!Customer methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625228!
identificationNumber

	^identificationNumber ! !
!Customer class methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625262!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625350!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625378!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625384!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625330!
close

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625363!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625334!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625357!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625345!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625340!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625320!
beginTransaction

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625367!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625324!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession class methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625399!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625132!
test01Import

	Customer importCustomers ! !
!Customer class methodsFor: 'importing' stamp: 'Ms 6/25/2023 18:25:08' prior: 50625504!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth.
			newCustomer addAddress: newAddress.].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!Customer class methodsFor: 'importing' stamp: 'Ms 6/25/2023 17:48:20' prior: 50625631!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
Object subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:09:46' prior: 50625626!
test01Import
	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms] 6/25/2023 22:58:27'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:10:28' overrides: 16961394!
setUp
	session2 := DataBaseSession for: (Array with: Address with: Customer).
	session2 beginTransaction.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:11:08' overrides: 16961402!
tearDown
	
	session2 commit.
	session2 close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:11:56' prior: 50625726!
test01Import
	
	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'Ms 6/25/2023 21:12:09' prior: 50625784!
test01Import
	
	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session2 persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !

TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:00:34'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:00:40' prior: 50625779 overrides: 16961402!
tearDown
	
	session commit.
	session close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:00:44' prior: 50625772 overrides: 16961394!
setUp
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:00:48' prior: 50625820!
test01Import
	
	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:03:43' prior: 50625882!
test01Import
	
	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	CustomerImporter importToSession: session theCustomers: self getCustomersFromStream.  
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:05:54' prior: 50625918!
test01Import
	
	"
	self importCustomers
	
	'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'

	"
	| inputStream  newCustomer line |


	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	CustomerImporter importToSession: session theCustomers: self getCustomersFromStream.  
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:06:14'!
getCustomersFromStream

'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:06:35' prior: 50626001!
getCustomersFromStream

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
					A,San Martin,3322,Olivos,1636,BsAs
					A,Maipu,888,Florida,1122,Buenos Aires
					C,Juan,Perez,C,23-25666777-9
					A,Alem,1122,CABA,1001,CABA'
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:07:01'!
ERROR!
!CustomerImporter class methodsFor: 'initialization' stamp: 'ms] 6/25/2023 23:07:24'!
importToSession: aSession theCustomers: aRenameMe1 
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'initialization' stamp: 'ms] 6/25/2023 23:08:06' prior: 50626023!
importToSession: aSession theCustomers: aCustomers 
	^self new initializeWithSession: aSession theCustomers: aCustomers.! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:08:08'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:08:08'!
ERROR!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:08:18'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:08:18'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'intialization' stamp: 'ms] 6/25/2023 23:08:18'!
initializeWithSession: aSession theCustomers: aCustomers 
	self shouldBeImplemented.
	session := aSession.
	customers := aCustomers.! !
!CustomerImporter methodsFor: 'intialization' stamp: 'ms] 6/25/2023 23:08:32' prior: 50626056!
initializeWithSession: aSession theCustomers: aCustomers 
	session := aSession.
	customers := aCustomers.! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:08:49'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session customers input'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'intialization' stamp: 'ms] 6/25/2023 23:08:48' prior: 50626064!
initializeWithSession: aSession theCustomers: aCustomers
	session := aSession.
	input := aCustomers.! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session  input'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms] 6/25/2023 23:08:57'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session input'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:09:14' prior: 50625957!
test01Import
	
	"
	self importCustomers
	
	'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'

	"
	| inputStream  newCustomer line |


	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].
	inputStream close.
	! !
!CustomerImporter methodsFor: 'nil' stamp: 'ms] 6/25/2023 23:09:42'!
import
	| newCustomer line |

	line := input nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := input nextLine. ].

	input close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:11:44' prior: 50626098!
test01Import
	
	| inputStream  |


	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:11:54' prior: 50626174!
test01Import
	
	| inputStream  |


	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:11:59' prior: 50626184!
test01Import
	
	

	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:12:01'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:12:01'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:12:37' prior: 50626194!
test01Import
	
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	self assert: 2 equals: (session selectAllOfType: Customer).
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:12:38'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:12:44' prior: 50626206!
test01Import
	
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:12:45'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:13:08'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:16:08' prior: 50626010!
getCustomersFromStream

	^ReadStream on:'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:16:09'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:16:14'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:16:15'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:18:08' prior: 50626218!
test01Import
	
	
	(CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:18:31'!
importCusomers

	^ (CustomerImporter importToSession: session theCustomers: self getCustomersFromStream) import! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:18:31' prior: 50626249!
test01Import
	
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:24:52' prior: 50626265!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444 ]  
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:24:57' prior: 50626272!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444]
	  
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:26:14' prior: 50626282!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444].
	self assert: pepe firstName equals: 'Pepe'.
	  
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:26:17'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:27:06' prior: 50626292!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444].
	self assert: pepe firstName equals: 'Pepe'.
	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:27:34' prior: 50626306!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444] ofType: Customer.
	self assert: pepe firstName equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:27:35'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:28:09' prior: 50626318!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444] ofType: Customer.
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:28:10'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:28:27' prior: 50626333!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = 22333444] ofType: Customer).
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:28:28'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:28:47' prior: 50626348!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer).
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:28:49'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:29:21' prior: 50626363!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer).
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:29:35'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:29:45'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:30:48'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:32:00'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:33:51' prior: 50626378!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) first.
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:33:57'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:34:20' prior: 50626400!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: (pepe firstName) equals: 'Pepe'.
	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:34:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:34:22'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:35:09' prior: 50626415!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.

	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName ) equals: 'Sanche'.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe firstName) equals: 'Pepe'.

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:35:10'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:35:15' prior: 50626433!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.

	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName ) equals: 'Sanchez'.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe firstName) equals: 'Pepe'.

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:35:17'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:35:17'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:44:09' prior: 50626453!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.

	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:45:10'!
assertCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:45:10' prior: 50626475!
test01Import
	
	| pepe |
	
	self importCusomers.  
	
	self assertCustomers.
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.

	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:46:17' prior: 50626495!
test01Import
	
	| pepe |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'Sanchez'.

	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:46:19'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:47:13' prior: 50626508!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:16'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:17'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:47:26' prior: 50626525!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Pepe'.
	self assert: (Juan lastName) equals: 'Sanchez'.
	self assert: (Juan identificationType) equals: 'D'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:27'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:47:40' prior: 50626553!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'CABA'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:41'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:47:50' prior: 50626579!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.


	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:51'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:47:52'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:48:52' prior: 50626605!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:59:01' prior: 50626633!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/25/2023 23:59:32' prior: 50626656!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	self assert: pepeAdress1 streetNumber equals: '3322'.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/25/2023 23:59:42'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'ms] 6/25/2023 23:59:48'!
getAdressOnStreet: aRenameMe1 
	self shouldBeImplemented.! !
!Customer methodsFor: 'addresses' stamp: 'ms] 6/26/2023 00:00:37' prior: 50626710!
getAdressOnStreet: aStreetName 
	^addresses detect: [ :anAdress | 	anAdress streetName = aStreetName]! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:00:39'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:00:39'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:00:53' prior: 50626681!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (pepe firstName) equals: 'Pepe'.
	self assert: (pepe lastName) equals: 'Sanchez'.
	self assert: (pepe identificationType) equals: 'D'.
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	self assert: pepeAdress1 streetNumber equals: 3322.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:00:54'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:00:55'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:05:34'!
pepeSanchez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Pepe'.
	customer lastName: 'Sanchez'.
	customer identificationType: 'D'.
	customer identificationNumber: '22333444'.
	^customer.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:07:39' prior: 50626727!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: pepe equals: self pepeSanchez.
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	self assert: pepeAdress1 streetNumber equals: 3322.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:07:40'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:07:51'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:14'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:24'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:24'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:29'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:08:49'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:27:16' prior: 50626768!
test01Import
	
	| pepe Juan pepeAdress1 |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	pepeAdress1 := pepe getAdressOnStreet: 'San Martin'.
	self assert: pepeAdress1 streetNumber equals: 3322.
	
	

	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (Juan firstName) equals: 'Juan'.
	self assert: (Juan lastName) equals: 'Perez'.
	self assert: (Juan identificationType) equals: 'C'.


	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:27:20'!
ERROR!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:27:27'!
compareCustomer: pepe with: aRenameMe1 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:27:42' prior: 50626835!
compareCustomer: aCustomer1 with: aCustomer2 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:28:01' prior: 50626840!
compareCustomer: aCustomer1 with: aCustomer2 
	^ (aCustomer1 firstName = aCustomer2 firstName) &
	  (aCustomer1 lastName = aCustomer2 lastName) &
	  (aCustomer1 identificationType = aCustomer2 identificationType) &
	  (aCustomer1 identificationNumber = aCustomer2 identificationNumber)
! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:28:02'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:28:42' prior: 50626809!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := (session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:29:05'!
juanPerez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Juan'.
	customer lastName: 'Perez'.
	customer identificationType: 'C'.
	customer identificationNumber: '23-25666777-9'.
	^customer.
! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:29:13'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:29:14'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:30:22' prior: 50626860!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	(session select: [ :aCustomer | 	aCustomer identificationNumber = '22333444'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := (session select: [ :aCustomer | 	aCustomer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom.
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:30:51'!
selectCustomerWithIdentificationNumber: aNumber

	^(session select: [ :aCustomer | 	aCustomer identificationNumber = aNumber] ofType: Customer) atRandom.
	



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:31:09' prior: 50626893!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:31:10'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:31:11'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:41:41' prior: 50626878!
juanPerez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Juan'.
	customer lastName: 'Perez'.
	customer identificationType: 'C'.
	customer identificationNumber: '23-25666777-9'.
	customer addAddress: self streetAlem1122.

	^customer.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:41:46' prior: 50626941!
juanPerez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Juan'.
	customer lastName: 'Perez'.
	customer identificationType: 'C'.
	customer identificationNumber: '23-25666777-9'.
	customer addAddress: self streetAlem1122.
	^customer.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:42:49'!
streetAlem1122
	
	
	| address |

	address := Address new.
	address streetName: 'Alem'.
	address streetNumber: 1122.
	address town: 'CABA'.
	address zipCode: 1001.
	address province: 'CABA'.
	^address.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:43:05'!
streetMaipu888
	
	| address |
	
	address := Address new.
	address streetName: 'Maipu'.
	address streetNumber: 888.
	address town: 'Florida'.
	address zipCode: 1122.
	address province: 'Buenos Aires'.
	^address! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:43:18'!
streetSanMartin3322
	
	| address|
	
	address := Address new.
	address streetName: 'San Martin'.
	address streetNumber: 3322.
	address town: 'Olivos'.
	address zipCode: 1636.
	address province: 'BsAs'.
	
	^address.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:43:59' prior: 50626758!
pepeSanchez
	
	
	| customer |

	customer := Customer new.
	customer firstName: 'Pepe'.
	customer lastName: 'Sanchez'.
	customer identificationType: 'D'.
	customer identificationNumber: '22333444'.
	customer addAddress: self streetMaipu888 .
	customer addAddress: self streetSanMartin3322 .

	^customer.
! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:44:02'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:45:07' prior: 50626921!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	self assert: (self compareAdressOf: pepe addresses with: self pepeSanchez addresses ).

	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:45:09'!
ERROR!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:45:15'!
compareAdressOf: aRenameMe1 with: aRenameMe2 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:46:12' prior: 50627027!
compareAdressOf: aAdresses with: aAdresses1
	 
	! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:48:42' prior: 50627032!
compareAdressOf: aAdresses with: aAdresses1

	
	 aAdresses1 do: [ :add | aAdresses includes: add].
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:48:44'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:48:45'!
ERROR!

!methodRemoval: ImportTest #compareCustomer:with: stamp: 'ms] 6/26/2023 00:49:57'!
compareCustomer: aCustomer1 with: aCustomer2 
	^ (aCustomer1 firstName = aCustomer2 firstName) &
	  (aCustomer1 lastName = aCustomer2 lastName) &
	  (aCustomer1 identificationType = aCustomer2 identificationType) &
	  (aCustomer1 identificationNumber = aCustomer2 identificationNumber)
!

!methodRemoval: ImportTest #compareAdressOf:with: stamp: 'ms] 6/26/2023 00:49:59'!
compareAdressOf: aAdresses with: aAdresses1

	
	 aAdresses1 do: [ :add | aAdresses includes: add].
	!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 00:28:01'!
compareCustomer: aCustomer1 with: aCustomer2 
	^ (aCustomer1 firstName = aCustomer2 firstName) &
	  (aCustomer1 lastName = aCustomer2 lastName) &
	  (aCustomer1 identificationType = aCustomer2 identificationType) &
	  (aCustomer1 identificationNumber = aCustomer2 identificationNumber)
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:51:03' prior: 50627008!
test01Import
	
	| pepe Juan |
	
	self importCusomers.  
	self assertCustomers.
	
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez).



	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:51:05'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:51:06'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:54:12' prior: 50627078!
test01Import
	
	| pepe Juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez).


	self importCusomers.  
	self assertCustomers.
	



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:54:45'!
assertAllExistingCustomers

	| pepe Juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:54:45' prior: 50627098!
test01Import
	
	self assertAllExistingCustomers.


	self importCusomers.  
	self assertCustomers.
	



	

	 
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms] 6/26/2023 00:54:51' prior: 50627126!
test01Import
	
	self importCusomers.  
	self assertCustomers.
	self assertAllExistingCustomers.
	



	

	 
	
	
	! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:54:52'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 00:54:53'!
PASSED!
!ImportTest methodsFor: 'setUp - tearDown' stamp: 'ms] 6/26/2023 00:59:15' prior: 50625875 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.! !
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:06:57' prior: 50627113!
assertAllExistingCustomers

	| pepe Juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	self assert: (self assertStreetName: self streetSanMartin3322 isContainsIn: pepe addresses).
	
	Juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: Juan with: self juanPerez)! !
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:07:43' prior: 50627152!
assertAllExistingCustomers

	| pepe juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	self assert: (self assertStreetName: self streetSanMartin3322 isContainsIn: pepe addresses).
	self assert: (self assertStreetName: self streetMaipu888 isContainsIn: pepe addresses).

	
	juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: juan with: self juanPerez)	.
	self assert: (self assertStreetName: self streetAlem1122 isContainsIn: juan addresses).
! !
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:07:49' prior: 50627168!
assertAllExistingCustomers

	| pepe juan |
	
	pepe := self selectCustomerWithIdentificationNumber: '22333444'. 
	self assert: (self compareCustomer: pepe with: self pepeSanchez).
	self assert: (self assertStreetName: self streetSanMartin3322 isContainsIn: pepe addresses).
	self assert: (self assertStreetName: self streetMaipu888 isContainsIn: pepe addresses).

	
	juan := self selectCustomerWithIdentificationNumber: '23-25666777-9'. 
	self assert: (self compareCustomer: juan with: self juanPerez)	.
	self assert: (self assertStreetName: self streetAlem1122 isContainsIn: juan addresses).
! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:07:56'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:07:57'!
ERROR!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 01:08:05'!
assertStreetName: aRenameMe1 isContainsIn: aRenameMe2 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 01:08:22' prior: 50627216!
assertStreetName: aAddress isContainsIn: aAddressExpected 
	self shouldBeImplemented.! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:08:56'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:08:56'!
ERROR!
!ImportTest methodsFor: 'accesing' stamp: 'ms] 6/26/2023 01:11:45' prior: 50627222!
assertStreetName: aAddress isContainsIn: aAddressExpected 
	aAddressExpected anySatisfy: [ :add | self assertAdress: add isEquals: aAddress ].! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:11:48'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:11:49'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:11:53'!
assertAdress: add isEquals: aAddress 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:12:11' prior: 50627245!
assertAdress: add isEquals: aAddress 
	^ add streetName = aAddress streetName &
	  add streetNumber = aAddress streetNumber &
	  add zipCode = aAddress zipCode &
	  add town = aAddress town &
	  add province = aAddress province! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:12:13'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:12:13'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:12:22'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'ms] 6/26/2023 01:13:09' prior: 50627233!
assertStreetName: aAddress isContainsIn: aAddressExpected 
	^aAddressExpected anySatisfy: [ :add | self assertAdress: add isEquals: aAddress ].! !

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:13:10'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms] 6/26/2023 01:13:20'!
PASSED!

----STARTUP---- (26 June 2023 17:24:05) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!


----End fileIn of C:\windows64\repoInge1\10-CustomerImporter\CustomerImporter.st----!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 17:25:07'!
PASSED!

TestCase subclass: #ImportTest2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest2 category: 'CustomerImporter' stamp: 'ms 6/26/2023 17:51:42'!
TestCase subclass: #ImportTest2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest2 methodsFor: 'no messages' stamp: 'ms 6/26/2023 17:52:22'!
hola
	| pepe |
	pepe := 'asdadasdasdsad asaddas asdsadas asdsad'.
		! !
!ImportTest2 methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 17:52:34'!
hola: texto
	| pepe |
	pepe := 'asdadasdasdsad asaddas asdsadas asdsad'.
		! !

!methodRemoval: ImportTest2 #hola stamp: 'ms 6/26/2023 17:52:34'!
hola
	| pepe |
	pepe := 'asdadasdasdsad asaddas asdsadas asdsad'.
		!
!ImportTest2 methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 17:52:34' prior: 50627787!
hola: texto
	| pepe |
	pepe := texto.
		! !

----STARTUP---- (26 June 2023 18:21:07) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!


----End fileIn of C:\windows64\repoInge1\10-CustomerImporter\CustomerImporter.st----!

!classDefinition: #StreetAlem category: 'CustomerImporter' stamp: 'ms 6/26/2023 18:23:15'!
Object subclass: #StreetAlem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!StreetAlem methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 18:23:15'!
hola
	
	
	| address |

	address := Address new.
	address streetName: 'Alem'.
	address streetNumber: 1122.
	address town: 'CABA'.
	address zipCode: 1001.
	address province: 'CABA'.
	^address.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 18:23:15' prior: 50627892!
streetAlem1122
	^(StreetAlem new) hola! !

!classRemoval: #StreetAlem stamp: 'ms 6/26/2023 18:50:28'!
Object subclass: #StreetAlem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #DataBaseSession stamp: 'ms 6/26/2023 18:50:29'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #CustomerImporter stamp: 'ms 6/26/2023 18:50:29'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session input'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Customer stamp: 'ms 6/26/2023 18:50:29'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Address stamp: 'ms 6/26/2023 18:50:29'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #ImportTest stamp: 'ms 6/26/2023 18:50:29'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

----End fileIn of C:\windows64\repoProfes\2023-1c\10-CustomerImporter\Step1\SoluStep1\CustomerImporter-35.st----!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:09:58' prior: 50628614 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: data second.
			newCustomer lastName: data third.
			newCustomer identificationType: data fourth.
			newCustomer identificationNumber: data fifth.
			session persist: newCustomer ].
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber .
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 19:10:02'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:12:03' prior: 50628767 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: data second.
			newCustomer lastName: data third.
			newCustomer identificationType: data fourth.
			newCustomer identificationNumber: data fifth.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber .
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:18:25' prior: 50628798 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer1 line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer1 := Customer new.
			newCustomer1 firstName: data second.
			newCustomer1 lastName: data third.
			newCustomer1 identificationType: data fourth.
			newCustomer1 identificationNumber: data fifth.
			session persist: newCustomer1 ].
		
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer1 addAddress: newAddress.
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber .
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth ].

		line := readStream nextLine. ].

	! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 6/26/2023 19:18:35'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:19:05' prior: 50628827 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: data second.
			newCustomer lastName: data third.
			newCustomer identificationType: data fourth.
			newCustomer identificationNumber: data fifth.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber .
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:19:50'!
createNewCustomer: data

	newCustomer firstName: data second.
			newCustomer lastName: data third.
			newCustomer identificationType: data fourth.
			newCustomer identificationNumber: data fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:19:50' prior: 50628870 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: data ].
		
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber .
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:20:22' prior: 50628898!
createNewCustomer: aCustomer

	newCustomer firstName: aCustomer second.
	newCustomer lastName: aCustomer third.
	newCustomer identificationType: aCustomer fourth.
	newCustomer identificationNumber: aCustomer fifth.
	session persist: newCustomer! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 19:21:00'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:22:23' prior: 50628909 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: data ].
		
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			self createNewAdress: newAddress withData: data. 
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber .
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:22:26' prior: 50628946 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: data ].
		
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			self createNewAdress: newAddress withData: data. 
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber .
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 19:22:27'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 19:22:27'!
ERROR!
!CustomerImporter methodsFor: 'create' stamp: 'ms 6/26/2023 19:22:35'!
createNewAdress: newAddress withData: data 
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:23:17' prior: 50628971 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: data ].
		
		(line beginsWith: 'A') ifTrue: [ 
			self createNewAdresswithData: data. 
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'create' stamp: 'ms 6/26/2023 19:23:24'!
createNewAdresswithData: data 
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'create' stamp: 'ms 6/26/2023 19:23:31'!
createNewAdressWithData: data 
	self shouldBeImplemented.! !

!methodRemoval: CustomerImporter #createNewAdresswithData: stamp: 'ms 6/26/2023 19:23:34'!
createNewAdresswithData: data 
	self shouldBeImplemented.!

!methodRemoval: CustomerImporter #createNewAdress:withData: stamp: 'ms 6/26/2023 19:23:35'!
createNewAdress: newAddress withData: data 
	self shouldBeImplemented.!
!CustomerImporter methodsFor: 'create' stamp: 'ms 6/26/2023 19:24:13' prior: 50629024!
createNewAdressWithData: data 

		| newAddress |
		newAddress := Address new.
		newCustomer addAddress: newAddress.
		newAddress streetName: data second.
		newAddress streetNumber: data third asNumber .
		newAddress town: data fourth.
		newAddress zipCode: data fifth asNumber .
		newAddress province: data sixth ! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:24:26' prior: 50629005 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: data ].
		
		(line beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: data. 
			].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 19:24:27'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:26:10' prior: 50629053 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		| data |
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: data ].
	
		(line beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: data. 
			].

		line := readStream nextLine. ].

	! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 6/26/2023 19:26:21'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:26:56' prior: 50629071 overrides: 16902254!
value

	"
	self importCustomers
	"

	line2 := readStream nextLine.
	[ line2 notNil ] whileTrue: [
		| data |
		data := line2 findTokens: $,.
		(line2 beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: data ].
	
		(line2 beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: data. 
			].

		line2 := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:27:37'!
newParameter

	^ line2 findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:27:37' prior: 50629106 overrides: 16902254!
value

	"
	self importCustomers
	"

	line2 := readStream nextLine.
	[ line2 notNil ] whileTrue: [
		| data |
		data := self newParameter.
		(line2 beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: data ].
	
		(line2 beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: data. 
			].

		line2 := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:27:48' prior: 50629125 overrides: 16902254!
value

	"
	self importCustomers
	"

	line2 := readStream nextLine.
	[ line2 notNil ] whileTrue: [
		(line2 beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: self newParameter ].
	
		(line2 beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: self newParameter. 
			].

		line2 := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 19:27:50'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:28:04' prior: 50629140 overrides: 16902254!
value

	"
	self importCustomers
	"

	line2 := readStream nextLine.
	[ line2 notNil ] whileTrue: [
		(line2 beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: self newParameter ].
	
		(line2 beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: self newParameter. 
			].

		line2 := readStream nextLine. ].

	! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line line2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 6/26/2023 19:28:32'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line2 line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:28:29' prior: 50629157 overrides: 16902254!
value

	"
	self importCustomers
	"

	line2 := readStream nextLine.
	[ line2 notNil ] whileTrue: [
		(line2 beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: self newParameter ].
	
		(line2 beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: self newParameter. 
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:28:38' prior: 50629192 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			self createNewCustomer: self newParameter ].
	
		(line beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: self newParameter. 
			].

		line := readStream nextLine. ].

	! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:29:04' prior: 50629120!
newParameter

	^ line findTokens: $,! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer  line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 19:30:38'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:33:51' prior: 50629207 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ 
			self createNewCustomer: self newParameter ].
	
		(line beginsWith: 'A') ifTrue: [ 
			self createNewAdressWithData: self newParameter. 
			].
	line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'create' stamp: 'ms 6/26/2023 19:33:59' prior: 50628932!
createNewCustomer: aCustomer

	newCustomer := Customer new.
	newCustomer firstName: aCustomer second.
	newCustomer lastName: aCustomer third.
	newCustomer identificationType: aCustomer fourth.
	newCustomer identificationNumber: aCustomer fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'create' stamp: 'ms 6/26/2023 19:40:47' prior: 50629039!
createNewAdressWithData: data 

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth ! !

'gola' start!

'gola' beginsWith: 'g'!

'gola'!

'gola'!

'gola'!

gola!

'gola' indexOf: 'a'!

'gola' indexOf: 'o'!
!CustomerImporter methodsFor: 'create' stamp: 'ms 6/26/2023 19:50:25'!
createNewCustomer

	newCustomer := Customer new.
	newCustomer firstName: (self newParameter) second.
	newCustomer lastName: (self newParameter) third.
	newCustomer identificationType: (self newParameter) fourth.
	newCustomer identificationNumber: (self newParameter) fifth.
	session persist: newCustomer! !

!methodRemoval: CustomerImporter #createNewCustomer: stamp: 'ms 6/26/2023 19:50:29'!
createNewCustomer: aCustomer

	newCustomer := Customer new.
	newCustomer firstName: aCustomer second.
	newCustomer lastName: aCustomer third.
	newCustomer identificationType: aCustomer fourth.
	newCustomer identificationNumber: aCustomer fifth.
	session persist: newCustomer!
!CustomerImporter methodsFor: 'create' stamp: 'ms 6/26/2023 19:50:38'!
createNewAdress

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: (self newParameter) second.
	newAddress streetNumber: (self newParameter) third asNumber .
	newAddress town: (self newParameter) fourth.
	newAddress zipCode: (self newParameter) fifth asNumber .
	newAddress province: (self newParameter) sixth ! !

!methodRemoval: CustomerImporter #createNewAdressWithData: stamp: 'ms 6/26/2023 19:50:43'!
createNewAdressWithData: data 

	| newAddress |
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: data second.
	newAddress streetNumber: data third asNumber .
	newAddress town: data fourth.
	newAddress zipCode: data fifth asNumber .
	newAddress province: data sixth !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:50:52' prior: 50629245 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ 
			self createNewCustomer ].
	
		(line beginsWith: 'A') ifTrue: [ 
			self createNewAdress. 
			].
	line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 19:50:54'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:52:49'!
importCustomerLie

	^ (line beginsWith: 'C') ifTrue: [ 
			self createNewCustomer ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:52:49' prior: 50629338 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self importCustomerLie.
	
		(line beginsWith: 'A') ifTrue: [ 
			self createNewAdress. 
			].
	line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:53:02'!
importAdressLine

	^ (line beginsWith: 'A') ifTrue: [ 
			self createNewAdress. 
			]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:53:02' prior: 50629359 overrides: 16902254!
value

	"
	self importCustomers
	"

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self importCustomerLie.
	
		self importAdressLine.
	line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:53:20' prior: 50629376 overrides: 16902254!
value

	
	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [
		self importCustomerLie.
		self importAdressLine.
		
	line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:53:37'!
nextLine

	^ line := readStream nextLine! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:53:37' prior: 50629386 overrides: 16902254!
value

	
	self nextLine.
	
	[ line notNil ] whileTrue: [
		self importCustomerLie.
		self importAdressLine.
		
	line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:53:37' prior: 50629399 overrides: 16902254!
value

	
	self nextLine.
	
	[ line notNil ] whileTrue: [
		self importCustomerLie.
		self importAdressLine.
		
	self nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:53:46' prior: 50629408 overrides: 16902254!
value

	
	self nextLine.
	
	[ line notNil ] whileTrue: [
		self importCustomerLie.
		self importAdressLine.
		self nextLine. ].

	! !

!classRemoval: #DataBaseSession stamp: 'ms 6/26/2023 19:54:48'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #CustomerImporter stamp: 'ms 6/26/2023 19:54:48'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line2 line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Customer stamp: 'ms 6/26/2023 19:54:49'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Address stamp: 'ms 6/26/2023 19:54:49'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #ImportTest stamp: 'ms 6/26/2023 19:54:50'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

----End fileIn of C:\windows64\repoProfes\2023-1c\10-CustomerImporter\CustomerImporter.st----!

!classRemoval: #DataBaseSession stamp: 'ms 6/26/2023 19:55:11'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Customer stamp: 'ms 6/26/2023 19:55:12'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Address stamp: 'ms 6/26/2023 19:55:12'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #ImportTest stamp: 'ms 6/26/2023 19:55:13'!
TestCase subclass: #ImportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

----End fileIn of C:\windows64\repoProfes\2023-1c\10-CustomerImporter\Step1\SoluStep1\CustomerImporter-35.st----!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 19:55:46' prior: 50630027 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 6/26/2023 19:55:46'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 19:55:56' prior: 50630180 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 6/26/2023 19:55:56'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 19:59:24' prior: 50630221 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData records |
			records := line findTokens: $,.
	customerData := records.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:00:54' prior: 50630262 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		|  records |
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: records second.
			newCustomer lastName: records third.
			newCustomer identificationType: records fourth.
			newCustomer identificationNumber: records fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: records.
			newAddress streetName: records second.
			newAddress streetNumber: 
			 third asNumber .
			newAddress town: records fourth.
			newAddress zipCode: records fifth asNumber .
			newAddress province: records sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:01:03' prior: 50630295 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		|  records |
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: records second.
			newCustomer lastName: records third.
			newCustomer identificationType: records fourth.
			newCustomer identificationNumber: records fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: records.
			newAddress streetName: records second.
			newAddress streetNumber: records	 third asNumber .
			newAddress town: records fourth.
			newAddress zipCode: records fifth asNumber .
			newAddress province: records sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:01:24' prior: 50630323 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		|  records |
		records := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: records second.
			newCustomer lastName: records third.
			newCustomer identificationType: records fourth.
			newCustomer identificationNumber: records fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: records.
			newAddress streetName: records second.
			newAddress streetNumber: records	 third asNumber .
			newAddress town: records fourth.
			newAddress zipCode: records fifth asNumber .
			newAddress province: records sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:01:26'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:01:59' prior: 50630351 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
		|  records |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		records := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: records second.
			newCustomer lastName: records third.
			newCustomer identificationType: records fourth.
			newCustomer identificationNumber: records fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: records.
			newAddress streetName: records second.
			newAddress streetNumber: records	 third asNumber .
			newAddress town: records fourth.
			newAddress zipCode: records fifth asNumber .
			newAddress province: records sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:02:01'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:02:24' prior: 50630383 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
		|  records |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		records := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: records second.
			newCustomer lastName: records third.
			newCustomer identificationType: records fourth.
			newCustomer identificationNumber: records fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: records second.
			newAddress streetNumber: records	 third asNumber .
			newAddress town: records fourth.
			newAddress zipCode: records fifth asNumber .
			newAddress province: records sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:02:26'!
PASSED!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:02:48' prior: 50630415 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		records := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: records second.
			newCustomer lastName: records third.
			newCustomer identificationType: records fourth.
			newCustomer identificationNumber: records fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: records second.
			newAddress streetNumber: records	 third asNumber .
			newAddress town: records fourth.
			newAddress zipCode: records fifth asNumber .
			newAddress province: records sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 6/26/2023 20:02:49'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:02:57' prior: 50630447 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		records := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: records second.
			newCustomer lastName: records third.
			newCustomer identificationType: records fourth.
			newCustomer identificationNumber: records fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: records second.
			newAddress streetNumber: records	 third asNumber .
			newAddress town: records fourth.
			newAddress zipCode: records fifth asNumber .
			newAddress province: records sixth ].

		line := readStream nextLine. ].

	! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:06:22' prior: 50629776!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:06:24'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:06:25'!
PASSED!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 6/26/2023 20:08:19'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:08:19' prior: 50630485 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record	 third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:12:26'!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:12:26' prior: 50630537 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := line findTokens: $,.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record	 third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:12:47'!
isAddressMethod

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:12:47' prior: 50630570 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := line findTokens: $,.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressMethod) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record	 third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:13:03'!
isAddressRecord

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:13:03' prior: 50630603 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := line findTokens: $,.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record	 third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #isAddressMethod stamp: 'ms 6/26/2023 20:13:03'!
isAddressMethod

	^ line beginsWith: 'A'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:13:12' prior: 50630637 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := line findTokens: $,.
		self isCustomerRecord ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record	 third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:13:14'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:14:59'!
createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:14:59' prior: 50630670 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self createRecord.
		self isCustomerRecord ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record	 third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:15:40'!
importCustomer

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:15:40' prior: 50630706 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self createRecord.
		self isCustomerRecord ifTrue: [ 
			self importCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record	 third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:16:25'!
importAddress

	| newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record	 third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:16:25' prior: 50630745 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self createRecord.
		self isCustomerRecord ifTrue: [ 
			self importCustomer ].

		self isAddressRecord ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:18:15' prior: 50630779 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self createRecord.
		self isCustomerRecord ifTrue: [ self importCustomer ].
		self isAddressRecord ifTrue: [ self importAddress ].
		
		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:18:24'!
importRecord

	self isCustomerRecord ifTrue: [ self importCustomer ].
		self isAddressRecord ifTrue: [ self importAddress ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:18:24' prior: 50630792 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self createRecord.
		self importRecord.
		
		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:19:23' prior: 50630811 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	[line := readStream nextLine.
		line notNil] whileTrue: [
		self createRecord.
		self importRecord.
		
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:19:24'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:21:47'!
hasLinesLeft

	line := readStream nextLine.
		line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:21:47' prior: 50630821 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	[self hasLinesLeft] whileTrue: [
		self createRecord.
		self importRecord.
		
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:21:50' prior: 50630837 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	[self hasLinesLeft] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:22:10' prior: 50630831!
hasLinesLeft

	line := readStream nextLine.
	^line notNil! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:22:12'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 20:22:35' prior: 50630845 overrides: 16902254!
value

	[self hasLinesLeft] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:37:21'!
test02CannotImportAnEmptyFile

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:38:34' prior: 50630865!
test02CannotImportAnEmptyFile

	self should: []
	       raise: []
	 	description: [].! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:39:14' prior: 50630875!
test02CannotImportAnEmptyFile

	self should: [	CustomerImporter valueFrom: '' into: session.]
	       raise: []
	 	description: [].! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:39:22' prior: 50630881!
test02CannotImportAnEmptyFile

	self should: [	CustomerImporter valueFrom: '' into: session.]
	       raise: []
	       description: [].! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:39:37' prior: 50630888!
test02CannotImportAnEmptyFile

	self should: [	CustomerImporter valueFrom: '' into: session.]
	       raise: [ Error - MessageNotUnderstood]
	       description: [].! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:40:37' prior: 50630895!
test02CannotImportAnEmptyFile

	self should: [	CustomerImporter valueFrom: '' into: session.]
	       raise: [ Error - MessageNotUnderstood]
	       description: [ self error: CustomerImporter cannotImportAnEmptyFile].! !
!CustomerImporter class methodsFor: 'importing' stamp: 'ms 6/26/2023 20:42:19' prior: 50630074!
valueFrom: aReadStream into: aSession
	(aReadStream = '') not ifTrue: [^'error'  ].
	^(self from: aReadStream into: aSession) value! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:42:20'!
FAILURE!
!CustomerImporter class methodsFor: 'importing' stamp: 'ms 6/26/2023 20:43:13' prior: 50630913!
valueFrom: aReadStream into: aSession
	(aReadStream = '') ifTrue: [^'error'  ].
	^(self from: aReadStream into: aSession) value! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:43:14'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:43:14'!
FAILURE!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:43:14'!
FAILURE!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:43:14'!
ERROR!
!CustomerImporter class methodsFor: 'importing' stamp: 'ms 6/26/2023 20:43:30' prior: 50630923!
valueFrom: aReadStream into: aSession
	(aReadStream = '') ifTrue: [^'error' ].
	^(self from: aReadStream into: aSession) value! !
!CustomerImporter class methodsFor: 'importing' stamp: 'ms 6/26/2023 20:44:17' prior: 50630942!
valueFrom: aReadStream into: aSession
	^(self from: aReadStream into: aSession) value! !
!CustomerImporter class methodsFor: 'importing' stamp: 'ms 6/26/2023 20:44:20' prior: 50630950!
valueFrom: aReadStream into: aSession
	^(self from: aReadStream into: aSession) value! !
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:44:39' prior: 50630021!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [^'error' ].

	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:44:45' prior: 50630962!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [^self ].

	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:45:00' prior: 50630970!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [^self class cannotImportAnEmptyFile].

	session := aSession.
	readStream := aReadStream.! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:45:02'!
PASSED!
!CustomerImporter class methodsFor: 'importing' stamp: 'ms 6/26/2023 20:45:23'!
cannotImportAnEmptyFile	
	^'El input es vacio'! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:45:25'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:45:25'!
FAILURE!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:45:25'!
FAILURE!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:45:25'!
ERROR!
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:45:40' prior: 50630978!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [^self error: self class cannotImportAnEmptyFile].

	session := aSession.
	readStream := aReadStream.! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:45:41'!
PASSED!
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:46:13' prior: 50631005!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [^self class cannotImportAnEmptyFile].

	session := aSession.
	readStream := aReadStream.! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:46:14'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:46:15'!
FAILURE!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:46:15'!
FAILURE!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:46:15'!
ERROR!

----End fileIn of C:\windows64\repoInge1\08-MarsRover-ElRegreso\MarsRover-WithHeading.st----!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631485!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631525!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631473!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631559!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631469!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631497!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631506!
rotateRight
	
	head rotateRight.
	self updateHeadingObservers.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631578!
addObserver: anObserver
	observers add: anObserver.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631478!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	observers := OrderedCollection new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631587!
updatePositionObservers
	observers do: [ :obs | obs addPosition: position ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631521!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631551!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631582!
updateHeadingObservers
	observers do: [ :obs | obs addHeading: head name ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631542!
moveForward
	
	head moveForward.
	self updatePositionObservers.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631517!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631493!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631555!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631547!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631511!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631489!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631538!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631501!
rotateLeft
	
	head rotateLeft.
	self updateHeadingObservers.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631565!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631529!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631533!
moveBackward
	
	head moveBackward.
	self updatePositionObservers.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631601!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631624!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631641!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631620!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631628!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631637!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631646 overrides: 16903442!
name

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631633!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631659!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !
!MarsRoverHeadingAndPositionLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631898 overrides: 50631859!
addHeading: aHeading
	log addLast: aHeading! !
!MarsRoverHeadingAndPositionLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631903 overrides: 50631864!
addPosition: aPosition
	log addLast: aPosition ! !
!MarsRoverHeadingAndPositionWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50632012 overrides: 50631987!
addHeading: aHeading 
	heading := aHeading.! !
!MarsRoverHeadingAndPositionWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50632017 overrides: 50631992!
addPosition: aPosition 
	position := aPosition.! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631693 overrides: 50632223!
rotateRight
	
	^marsRover headSouth! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631688 overrides: 50632233!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631683 overrides: 50632243!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631698 overrides: 50632249!
name

	^'East'.! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631678 overrides: 50632254!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631921 overrides: 50631859!
addHeading: aHeading
	log addLast: aHeading! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631926 overrides: 50631864!
addPosition: aPosition! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631731 overrides: 50632223!
rotateRight
	
	^marsRover headEast! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631726 overrides: 50632233!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631721 overrides: 50632243!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631736 overrides: 50632249!
name

	^'North'.! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631716 overrides: 50632254!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631769 overrides: 50632223!
rotateRight
	
	^marsRover headWest! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631764 overrides: 50632233!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631759 overrides: 50632243!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631774 overrides: 50632249!
name

	^'South'.! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631754 overrides: 50632254!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631807 overrides: 50632223!
rotateRight
	
	^marsRover headNorth! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631802 overrides: 50632233!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631797 overrides: 50632243!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631812 overrides: 50632249!
name

	^'West'.! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631792 overrides: 50632254!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50632036 overrides: 50631987!
addHeading: aHeading 
	heading := aHeading.! !
!MarsRoverHeadingWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50632041 overrides: 50631992!
addPosition: aPosition ! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631828!
addHeading: aHeading
	self subclassResponsibility ! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631832!
addPosition: aPosition
	self subclassResponsibility ! !
!MarsRoverObserverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:03' prior: 50631048!
test01MarsRoverSupportsOneObserver

	| rover observer1 result |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	observer1 := MarsRoverHeadingAndPositionLog new.
	
	rover addObserver: observer1.
	
	rover process: 'fr'.
	
	result := OrderedCollection new.
	result add: 0@1.
	result add: 'East'.
	
	self assert: result equals: observer1 show.! !
!MarsRoverObserverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631063!
test02MarsRoverSupportsMultipleObservers

	| rover observer1 observer2 result |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	observer1 := MarsRoverHeadingAndPositionLog new.
	observer2 := MarsRoverHeadingAndPositionLog new.
	
	rover addObserver: observer1.
	rover addObserver: observer2.
	
	rover process: 'fr'.
	
	result := OrderedCollection new.
	result add: 0@1.
	result add: 'East'.
	
	self assert: result equals: observer1 show.
	self assert: result equals: observer2 show.! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631944 overrides: 50631859!
addHeading: aHeading! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631948 overrides: 50631864!
addPosition: aPosition
	log addLast: aPosition! !
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50632059 overrides: 50631987!
addHeading: aHeading ! !
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50632063 overrides: 50631992!
addPosition: aPosition 
	position := aPosition.! !
!MarsRoverStateLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631850!
show
	^log.! !
!MarsRoverStateLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631854 overrides: 16920235!
initialize
	log := OrderedCollection new.! !
!MarsRoverStateLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631859 overrides: 50632427!
addHeading: aHeading 
	self subclassResponsibility ! !
!MarsRoverStateLog methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631864 overrides: 50632432!
addPosition: aPosition
	self subclassResponsibility ! !
!MarsRoverStateLog class methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631878!
for: aLoggingOption 
	^self new initializeFor: aLoggingOption ! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631105!
test02MarsRoverLogsPositionWhenMovedForward

	| log rover result |

	log := MarsRoverHeadingAndPositionLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	rover process: 'f'.
	
	result := OrderedCollection new.
	result add: 0@1.
	
	self assert: result equals: log show.! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631157!
test06MarsRoverLogsHeadingWhenRotatedFullRight

	| log rover result |

	log := MarsRoverHeadingAndPositionLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	rover process: 'rrrr'.
	
	result := OrderedCollection new.
	result add: 'East'.
	result add: 'South'.
	result add: 'West'.
	result add: 'North'.
	
	self assert: result equals: log show.! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631189!
test08MarsRoverOnlyLogsPosition

	| log rover result |

	log := MarsRoverPositionLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	rover process: 'fr'.
	
	result := OrderedCollection new.
	result add: 0@1.
	
	self assert: result equals: log show.! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631118!
test03MarsRoverLogsPositionsWhenMovedBackward

	| log rover result |

	log := MarsRoverHeadingAndPositionLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	rover process: 'b'.
	
	result := OrderedCollection new.
	result add: 0@-1.
	
	self assert: result equals: log show.! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631095!
test01MarsRoverLogIsEmptyWhenInitialized

	| log rover |

	log := MarsRoverHeadingAndPositionLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	self assert: log show isEmpty.! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631202!
test09MarsRoverOnlyLogsHeading

	| log rover result |

	log := MarsRoverHeadingLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	rover process: 'fr'.
	
	result := OrderedCollection new.
	result add: 'East'.
	
	self assert: result equals: log show.! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631131!
test04MarsRoverLogsHeadingWhenRotatedRight

	| log rover result |

	log := MarsRoverHeadingAndPositionLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	rover process: 'r'.
	
	result := OrderedCollection new.
	result add: 'East'.
	
	self assert: result equals: log show.! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631144!
test05MarsRoverLogsHeadingWhenRotatedLeft

	| log rover result |

	log := MarsRoverHeadingAndPositionLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	rover process: 'l'.
	
	result := OrderedCollection new.
	result add: 'West'.
	
	self assert: result equals: log show.! !
!MarsRoverStateLogTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631173!
test07MarsRoverLogsHeadingWhenRotatedFullLeft

	| log rover result |

	log := MarsRoverHeadingAndPositionLog new.
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	
	rover addObserver: log.
	
	rover process: 'llll'.
	
	result := OrderedCollection new.
	result add: 'West'.
	result add: 'South'.
	result add: 'East'.
	result add: 'North'.
	
	self assert: result equals: log show.! !
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631967!
show
	| window |
	
	window := SystemWindow new.
	
	window setLabel: 'MarsRoverStateWindow'.
	
	window addMorph: (LabelMorph contents: ('Posición: ', position asString)).
	window addMorph: (LabelMorph contents: ('Apuntando al ', heading asString)).
	
	window openInWorld.! !
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631987 overrides: 50632427!
addHeading: aHeading
	self subclassResponsibility ! !
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631983!
position
	^position! !
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631979!
heading
	^heading! !
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631992 overrides: 50632432!
addPosition: aPosition
	self subclassResponsibility ! !
!MarsRoverStateWindowTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631264!
test04MarsRoverWindowOnlyTracksPosition

	| window rover |

	window := MarsRoverPositionWindow new.
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	rover addObserver: window.
	
	rover process: 'fr'.
	
	self assert: 1@2 equals: window position.! !
!MarsRoverStateWindowTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631275!
test05MarsRoverWindowOnlyTracksHeading

	| window rover |

	window := MarsRoverHeadingWindow new.
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	rover addObserver: window.
	
	rover process: 'fr'.
	
	self assert: 'East' equals: window heading.! !
!MarsRoverStateWindowTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631240!
test02MarsRoverWindowShowsLastPosition

	| window rover |

	window := MarsRoverHeadingAndPositionWindow new.
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	rover addObserver: window.
	
	rover process: 'f'.
	
	self assert: 1@2 equals: window position.! !
!MarsRoverStateWindowTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631228!
test01MarsRoverWindowIsEmptyWhenInitialized

	| window rover |

	window := MarsRoverHeadingAndPositionWindow new.
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	rover addObserver: window.
	
	self assert: window position isNil.
	self assert: window heading isNil.! !
!MarsRoverStateWindowTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631252!
test03MarsRoverWindowShowsLastHeading

	| window rover |

	window := MarsRoverHeadingAndPositionWindow new.
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	rover addObserver: window.
	
	rover process: 'lr'.
	
	self assert: 'North' equals: window heading.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631338!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631346!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631369!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631314!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631418!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631322!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631401!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631306!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631409!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631427!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631431!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631298!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631393!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631385!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631435!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631377!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631443!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631354!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631439!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 20:48:04' prior: 50631330!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:48:47' prior: 50630903!
test02CannotImportAnEmptyFile

	self should: [	CustomerImporter valueFrom: '' into: session.]
	       raise: [ Error - MessageNotUnderstood]
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAnEmptyFile. ]! !

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:48:49'!
FAILURE!
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:49:39' prior: 50631016!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [^self error: self class cannotImportAnEmptyFile].

	session := aSession.
	readStream := aReadStream.! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:49:40'!
PASSED!
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:49:48' prior: 50632933!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [^self error: self cannotImportAnEmptyFile].

	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:50:05' prior: 50632944!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [^self error: self class cannotImportAnEmptyFile].

	session := aSession.
	readStream := aReadStream.! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:50:06'!
PASSED!
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 6/26/2023 20:50:34' prior: 50632953!
initializeFrom: aReadStream into: aSession

	(aReadStream = '') ifTrue: [self error: self class cannotImportAnEmptyFile].

	session := aSession.
	readStream := aReadStream.! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:50:35'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:51:48' prior: 50632918!
test02CannotImportAnEmptyFile

	self should: [	CustomerImporter valueFrom: '' into: session.]
	       raise: [ Error - MessageNotUnderstood]
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAnEmptyFile. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:52:46' prior: 50632975!
test02CannotImportAnEmptyFile

	self should: [	CustomerImporter valueFrom: '' into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAnEmptyFile. ]! !

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:52:48'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 20:52:48'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 20:52:48'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:56:08'!
test03CannotImportAFileWithTwoComasTogether

	self should: [	CustomerImporter valueFrom: '' into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAnEmptyFile. ]! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 20:56:55'!
inValidImportDataWithComasTogether

	^ ReadStream on:
'C,,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 20:57:23' prior: 50633005!
test03CannotImportAFileWithTwoComasTogether

	self should: [	CustomerImporter valueFrom: self inValidImportDataWithComasTogether into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAnEmptyFile. ]! !

!testRun: #ImportTest #test03CannotImportAFileWithTwoComasTogether stamp: 'ms 6/26/2023 20:57:26'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:01:38' prior: 50630803!
importRecord

	self isCustomerRecord ifTrue: [ self importCustomer ].
	self isAddressRecord ifTrue: [ self importAddress ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:02:00' prior: 50630733!
importCustomer

	newCustomer := Customer new.
		newCustomer firstName: record second.
		newCustomer lastName: record third.
		newCustomer identificationType: record fourth.
		newCustomer identificationNumber: record fifth.
		session persist: newCustomer! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:03:28' prior: 50633016!
inValidImportDataWithComasTogether

	^ ReadStream on:
	'C,,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:05:20' prior: 50633056!
inValidImportDataWithComasTogether

	^ ReadStream on:
	'C,O,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:07:00'!
test03CannotImportAFileWithIncorrectNumberOfParameters

	self should: [	CustomerImporter valueFrom: self inValidImportDataWithComasTogether into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAnEmptyFile. ]! !

!methodRemoval: ImportTest #test03CannotImportAFileWithTwoComasTogether stamp: 'ms 6/26/2023 21:07:02'!
test03CannotImportAFileWithTwoComasTogether

	self should: [	CustomerImporter valueFrom: self inValidImportDataWithComasTogether into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAnEmptyFile. ]!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:07:33' prior: 50633067!
test03CannotImportAFileWithIncorrectNumberOfParameters

	CustomerImporter valueFrom: self inValidImportDataWithComasTogether into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:07:35'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:09:35' prior: 50633045!
importCustomer
	
	(record size = 5) ifFalse: [ ^'hola' ].
	
	newCustomer := Customer new.
		newCustomer firstName: record second.
		newCustomer lastName: record third.
		newCustomer identificationType: record fourth.
		newCustomer identificationNumber: record fifth.
		session persist: newCustomer! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:09:36'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:09:36'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:09:36'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:09:36'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:10:05'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:11:08' prior: 50633093!
test03CannotImportAFileWithIncorrectNumberOfParameters


	
		self should: [		CustomerImporter valueFrom: self inValidImportDataWithComasTogether into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:11:14' prior: 50633138!
test03CannotImportAFileWithIncorrectNumberOfParameters

		self should: [		CustomerImporter valueFrom: self inValidImportDataWithComasTogether into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!CustomerImporter class methodsFor: 'importing' stamp: 'ms 6/26/2023 21:11:30'!
cannotImportAFileWithIncorrectNumberOfParameters	
	^'El input tiene una cantidad equivocada de parametros'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:12:21' prior: 50633109!
importCustomer
	
	(record size = 5) ifFalse: [ self error: self class cannotImportAFileWithIncorrectNumberOfParameters ].
	
	newCustomer := Customer new.
		newCustomer firstName: record second.
		newCustomer lastName: record third.
		newCustomer identificationType: record fourth.
		newCustomer identificationNumber: record fifth.
		session persist: newCustomer! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:12:26'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:12:26'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:12:26'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:13:05' prior: 50630765!
importAddress
	| newAddress |

	(record size = 6) ifFalse: [ self error: self class cannotImportAFileWithIncorrectNumberOfParameters ].

	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.			newAddress streetNumber: record	 third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:13:07'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:13:07'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:13:07'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:16:36'!
test04CannotImportAFileWithIncorrectIdentificationType

		self should: [		CustomerImporter valueFrom: self inValidImportDataWithComasTogether into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:16:49' prior: 50633221!
test04CannotImportAFileWithIncorrectIdentificationType

		self should: [		CustomerImporter valueFrom: self inValidImportDataWithWrongIdentificationType into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:17:03' prior: 50633235!
test04CannotImportAFileWithIncorrectIdentificationType

		self should: [		CustomerImporter valueFrom: self invalidImportDataWithWrongIdentificationType into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:17:12'!
invalidImportDataWithWrongIdentificationType

	^ ReadStream on:
	'J,O,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:17:36' prior: 50633249!
test04CannotImportAFileWithIncorrectIdentificationType

	CustomerImporter valueFrom: self invalidImportDataWithWrongIdentificationType into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:17:37'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:19:18' prior: 50633269!
test04CannotImportAFileWithIncorrectIdentificationType

	
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithWrongIdentificationType into: session.]
	raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
		self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:19:23' prior: 50633285!
test04CannotImportAFileWithIncorrectIdentificationType

	
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithWrongIdentificationType into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:19:31' prior: 50633299!
test04CannotImportAFileWithIncorrectIdentificationType

	
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithWrongIdentificationType into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:19:45' prior: 50633313!
test04CannotImportAFileWithIncorrectIdentificationType

	
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithWrongIdentificationType into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectIdentificationType. ]! !
!CustomerImporter class methodsFor: 'error message' stamp: 'ms 6/26/2023 21:20:12'!
cannotImportAFileWithIncorrectIdentificationType	
	^'El Tipo de Indentificador no es valido'! !
!CustomerImporter class methodsFor: 'error message' stamp: 'ms 6/26/2023 21:20:20' prior: 50633341!
cannotImportAFileWithIncorrectIdentificationType	
	^'El tipo de identificador no es valido'! !

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:20:35'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:22:39' prior: 50633038!
importRecord

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].
	
	self error: self class cannotImportAFileWithIncorrectIdentificationType.! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:22:40'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:22:40'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:22:40'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:22:40'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:32:22' prior: 50629879!
validImportData

	^ ReadStream on:
	'C,Pepe,Sanchez,D,22333444
	A,San Martin,3322,Olivos,1636,BsAs
	A,Maipu,888,Florida,1122,Buenos Aires
	C,Juan,Perez,C,23-25666777-9
	A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:32:22'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:32:22'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:32:22'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:32:22'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:32:23'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:32:33'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:32:33'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:32:33'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:32:33'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:32:33'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:32:47'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:32:47'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:32:47'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:32:47'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:32:47'!
ERROR!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:33:03'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:33:03'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:33:03'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:33:03'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:33:03'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:33:03'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:33:09'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:33:09'!
ERROR!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:33:13'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:33:14'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:33:15'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:33:17'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:33:17'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:34:35' prior: 50633263!
invalidImportDataWithWrongIdentificationType

	^ ReadStream on:
	'J,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 18:08:08' prior: 50633380!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:35:01'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:35:01'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:35:01'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:35:01'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:36:27'!
test05CannotImportAdressBeforeCustomer

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:36:53'!
invalidImportDataWithAddressBeforeCustomer

	^ ReadStream on:
	'J,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:37:11' prior: 50633510!
invalidImportDataWithAddressBeforeCustomer

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:38:02' prior: 50633500!
test05CannotImportAdressBeforeCustomer

	CustomerImporter valueFrom: self invalidImportDataWithAddressBeforeCustomer into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/26/2023 21:38:05'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:38:53' prior: 50633526!
test05CannotImportAdressBeforeCustomer
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithWrongIdentificationType into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAdressBeforeCustomer. ]! !
!CustomerImporter class methodsFor: 'error message' stamp: 'ms 6/26/2023 21:40:19'!
cannotImportAdressBeforeCustomer	
	^'Address no tiene ningun customer asociado'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:41:08' prior: 50630860 overrides: 16902254!
value
	
	
	[self hasLinesLeft] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/26/2023 21:47:49'!
FAILURE!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/26/2023 21:47:49'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:48:52' prior: 50633541!
test05CannotImportAdressBeforeCustomer
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithAddressBeforeCustomer into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAdressBeforeCustomer. ]! !

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/26/2023 21:49:22'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:50:41' prior: 50633197!
importAddress
	| newAddress |

	(record size = 6) ifFalse: [ self error: self class cannotImportAFileWithIncorrectNumberOfParameters ].	
	(newCustomer isNil) ifTrue: [self error: self class cannotImportAFileWithIncorrectNumberOfParameters ].
	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.			newAddress streetNumber: record	 third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'ms 6/26/2023 21:50:48' prior: 50633590!
importAddress
	| newAddress |

	(record size = 6) ifFalse: [ self error: self class cannotImportAFileWithIncorrectNumberOfParameters ].	
	(newCustomer isNil) ifTrue: [self error: self class cannotImportAdressBeforeCustomer ].
	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.			newAddress streetNumber: record	 third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:50:50'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:50:50'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:50:50'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:50:50'!
PASSED!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/26/2023 21:50:50'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'ms 6/26/2023 21:52:41'!
assertImportedRightNumberOfCustomers: aNumber

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 21:52:41' prior: 50630513!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers: 2.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #assertImportedRightNumberOfCustomers stamp: 'ms 6/26/2023 21:52:41'!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 21:52:41' prior: 50633643!
assertImportedRightNumberOfCustomers: aNumber

	^ self assert: aNumber equals: (session selectAllOfType: Customer) size! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:52:53'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:52:54'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:52:55'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:52:55'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:52:55'!
PASSED!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/26/2023 21:52:55'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:53:06' prior: 50632986!
test02CannotImportAnEmptyFile

	self should: [	CustomerImporter valueFrom: '' into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 0.
			self assert: anError messageText equals: CustomerImporter cannotImportAnEmptyFile. ]! !

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:53:07'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/26/2023 21:53:07'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/26/2023 21:53:08'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:53:08'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/26/2023 21:53:08'!
PASSED!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/26/2023 21:53:08'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:56:26'!
invalidImportDataWithComasTogether

	^ ReadStream on:
	'C,O,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 21:56:26' prior: 50633152!
test03CannotImportAFileWithIncorrectNumberOfParameters

		self should: [		CustomerImporter valueFrom: self invalidImportDataWithComasTogether into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !

!methodRemoval: ImportTest #inValidImportDataWithComasTogether stamp: 'ms 6/26/2023 21:56:26'!
inValidImportDataWithComasTogether

	^ ReadStream on:
	'C,O,Pepe,Sanchez,D,22333444'!
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:57:11' prior: 50633723!
invalidImportDataWithComasTogether

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
C,O,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/26/2023 21:57:45'!
invalidImportDataWithMoreParameters

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
C,O,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 6/26/2023 21:57:45' prior: 50633729!
test03CannotImportAFileWithIncorrectNumberOfParameters

		self should: [		CustomerImporter valueFrom: self invalidImportDataWithMoreParameters into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !

!methodRemoval: ImportTest #invalidImportDataWithComasTogether stamp: 'ms 6/26/2023 21:57:45'!
invalidImportDataWithComasTogether

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
C,O,Pepe,Sanchez,D,22333444'!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:57:58' prior: 50633770!
test03CannotImportAFileWithIncorrectNumberOfParameters

		self should: [		CustomerImporter valueFrom: self invalidImportDataWithMoreParameters into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/26/2023 21:57:59'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/26/2023 21:58:39' prior: 50633573!
test05CannotImportAdressBeforeCustomer
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithAddressBeforeCustomer into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 2.
			self assertPepeSanchezWasImportedCorrecty.
			self assertJuanPerezWasImportedCorrectly.
			self assert: anError messageText equals: CustomerImporter cannotImportAdressBeforeCustomer. ]! !

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/26/2023 21:58:40'!
FAILURE!

----SNAPSHOT----(26 June 2023 21:58:59) CuisUniversity-5832.image priorSource: 9366758!

----SNAPSHOT----(26 June 2023 21:59:04) CuisUniversity-5832.image priorSource: 9669814!

----STARTUP---- (29 June 2023 12:56:05) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!

!ImportTest methodsFor: 'test data' stamp: 'ms 6/29/2023 13:00:38' prior: 50633473!
invalidImportDataWithWrongIdentificationType

	^ ReadStream on:
	
'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
C,O,Pepe,Sanchez,D,22333444
J,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:00:57' prior: 50633327!
test04CannotImportAFileWithIncorrectIdentificationType

	
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithWrongIdentificationType into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 2.
			self assertPepeSanchezWasImportedCorrecty.
			self assertJuanPerezWasImportedCorrectly.
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectIdentificationType. ]! !

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:00:58'!
FAILURE!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:01:11'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'ms 6/29/2023 13:01:40' prior: 50633842!
invalidImportDataWithWrongIdentificationType

	^ ReadStream on:
	
'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
J,Pepe,Sanchez,D,22333444'! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/29/2023 13:01:42'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/29/2023 13:01:42'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:01:42'!
FAILURE!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:01:42'!
FAILURE!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/29/2023 13:01:42'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:01:58'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:02:08'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:02:30'!
FAILURE!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:03:25'!
FAILURE!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:03:36'!
FAILURE!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:03:39'!
FAILURE!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:03:53'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'ms 6/29/2023 13:04:02' prior: 50633880!
invalidImportDataWithWrongIdentificationType

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
J,Pepe,Sanchez,D,22333444'! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/29/2023 13:04:03'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/29/2023 13:04:04'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:04:04'!
FAILURE!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:04:04'!
FAILURE!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/29/2023 13:04:04'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:04:10'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'ms 6/29/2023 13:05:47' prior: 50633933!
invalidImportDataWithWrongIdentificationType

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
J,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/29/2023 13:05:53' prior: 50633759!
invalidImportDataWithMoreParameters

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
C,O,Pepe,Sanchez,D,22333444'! !

!testRun: #ImportTest #test01Import stamp: 'ms 6/29/2023 13:06:00'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/29/2023 13:06:00'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:06:00'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/29/2023 13:06:02'!
FAILURE!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/29/2023 13:06:02'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:06:43' prior: 50633812!
test05CannotImportAdressBeforeCustomer
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithAddressBeforeCustomer into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 0.
			self assert: anError messageText equals: CustomerImporter cannotImportAdressBeforeCustomer. ]! !

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/29/2023 13:06:44'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/29/2023 13:06:45'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/29/2023 13:06:45'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:06:45'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:06:46'!
PASSED!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/29/2023 13:06:46'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:07:58'!
test06CannotImportCustomerWithDoubleValidPrefix
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithInvalidDoublePrefix into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 0.
			self assert: anError messageText equals: CustomerImporter cannotImportAdressBeforeCustomer. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:08:14' prior: 50634038!
test06CannotImportCustomerWithDoubleValidPrefix
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithInvalidDoublePrefix into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 0.
			self assert: anError messageText equals: CustomerImporter cannotImportDataWithInvalidDoublePrefix. ]! !
!ImportTest methodsFor: 'test data' stamp: 'ms 6/29/2023 13:08:26'!
invalidImportDataWithInvalidDoublePrefix

	^ ReadStream on:
'CC,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
J,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:10:10' prior: 50634053!
test06CannotImportCustomerWithDoubleValidPrefix
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithInvalidDoublePrefix into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 0.
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectIdentificationType. ]! !

!testRun: #ImportTest #test06CannotImportCustomerWithDoubleValidPrefix stamp: 'ms 6/29/2023 13:10:12'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:10:32' prior: 50634079!
test06CannotImportCustomerWithDoubleValidPrefix
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithInvalidDoublePrefix into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 2.
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectIdentificationType. ]! !

!testRun: #ImportTest #test06CannotImportCustomerWithDoubleValidPrefix stamp: 'ms 6/29/2023 13:10:36'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/29/2023 13:10:36'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/29/2023 13:10:37'!
PASSED!

!testRun: #ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:10:37'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:10:38'!
PASSED!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/29/2023 13:10:38'!
PASSED!

!testRun: #ImportTest #test06CannotImportCustomerWithDoubleValidPrefix stamp: 'ms 6/29/2023 13:10:39'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:12:15'!
test03CannotImportCustomerWithIncorrectNumberOfParameters

		self should: [		CustomerImporter valueFrom: self invalidImportDataWithMoreParameters into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:12:28'!
test03CannotImportAdressWithIncorrectNumberOfParameters
		
	self should: [			CustomerImporter valueFrom: self invalidImportDataWithInvalidDoublePrefix into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 2.
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectIdentificationType. ]! !

!methodRemoval: ImportTest #test03CannotImportAFileWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:12:40'!
test03CannotImportAFileWithIncorrectNumberOfParameters

		self should: [		CustomerImporter valueFrom: self invalidImportDataWithMoreParameters into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]!
!ImportTest methodsFor: 'test data' stamp: 'ms 6/29/2023 13:13:14'!
invalidImportAdressDataWithMoreParameters

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,B,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA
C,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:13:25' prior: 50634150!
test03CannotImportAdressWithIncorrectNumberOfParameters
		
	self should: [			CustomerImporter valueFrom: self invalidImportAdressDataWithMoreParameters into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 2.
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectIdentificationType. ]! !
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:13:28' prior: 50634191!
test03CannotImportAdressWithIncorrectNumberOfParameters
		
	self should: [			CustomerImporter valueFrom: self invalidImportAdressDataWithMoreParameters into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 1.
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectIdentificationType. ]! !

!testRun: #ImportTest #test03CannotImportAdressWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:13:31'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'ms 6/29/2023 13:14:11' prior: 50634207!
test03CannotImportAdressWithIncorrectNumberOfParameters
		
	self should: [			CustomerImporter valueFrom: self invalidImportAdressDataWithMoreParameters into: session.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assertImportedRightNumberOfCustomers: 1.
			self assert: anError messageText equals: CustomerImporter cannotImportAFileWithIncorrectNumberOfParameters. ]! !

!testRun: #ImportTest #test03CannotImportAdressWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:14:12'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 6/29/2023 13:14:13'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyFile stamp: 'ms 6/29/2023 13:14:13'!
PASSED!

!testRun: #ImportTest #test03CannotImportAdressWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:14:13'!
PASSED!

!testRun: #ImportTest #test03CannotImportCustomerWithIncorrectNumberOfParameters stamp: 'ms 6/29/2023 13:14:13'!
PASSED!

!testRun: #ImportTest #test04CannotImportAFileWithIncorrectIdentificationType stamp: 'ms 6/29/2023 13:14:14'!
PASSED!

!testRun: #ImportTest #test05CannotImportAdressBeforeCustomer stamp: 'ms 6/29/2023 13:14:15'!
PASSED!

!testRun: #ImportTest #test06CannotImportCustomerWithDoubleValidPrefix stamp: 'ms 6/29/2023 13:14:15'!
PASSED!