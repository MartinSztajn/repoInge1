

----STARTUP---- (2 July 2023 16:56:07) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!


!classRemoval: #DataBaseSession stamp: 'ms 7/2/2023 16:56:53'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #CustomerImporter stamp: 'ms 7/2/2023 16:56:53'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Customer stamp: 'ms 7/2/2023 16:56:53'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Address stamp: 'ms 7/2/2023 16:56:54'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #ImportTest stamp: 'ms 7/2/2023 16:56:54'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #MarsRoverPositionWindow stamp: 'ms 7/2/2023 16:57:00'!
MarsRoverStateWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWindow stamp: 'ms 7/2/2023 16:57:00'!
MarsRoverStateWindow subclass: #MarsRoverHeadingWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingAndPositionWindow stamp: 'ms 7/2/2023 16:57:00'!
MarsRoverStateWindow subclass: #MarsRoverHeadingAndPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverStateWindow stamp: 'ms 7/2/2023 16:57:00'!
MarsRoverObserver subclass: #MarsRoverStateWindow
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverPositionLog stamp: 'ms 7/2/2023 16:57:01'!
MarsRoverStateLog subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingLog stamp: 'ms 7/2/2023 16:57:01'!
MarsRoverStateLog subclass: #MarsRoverHeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingAndPositionLog stamp: 'ms 7/2/2023 16:57:01'!
MarsRoverStateLog subclass: #MarsRoverHeadingAndPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverStateLog stamp: 'ms 7/2/2023 16:57:01'!
MarsRoverObserver subclass: #MarsRoverStateLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverObserver stamp: 'ms 7/2/2023 16:57:01'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'ms 7/2/2023 16:57:01'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'ms 7/2/2023 16:57:02'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'ms 7/2/2023 16:57:02'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'ms 7/2/2023 16:57:02'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'ms 7/2/2023 16:57:02'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'ms 7/2/2023 16:57:02'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'ms 7/2/2023 16:57:02'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverStateWindowTest stamp: 'ms 7/2/2023 16:57:03'!
TestCase subclass: #MarsRoverStateWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverStateLogTest stamp: 'ms 7/2/2023 16:57:03'!
TestCase subclass: #MarsRoverStateLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverObserverTest stamp: 'ms 7/2/2023 16:57:03'!
TestCase subclass: #MarsRoverObserverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #QatarOnlineTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineTest category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 16:59:01'!
Object subclass: #QatarOnlineTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineGame category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 17:05:39'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #QatarOnlineGame stamp: 'ms 7/2/2023 17:05:58'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineGame category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 17:11:32'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!QatarOnlineTest methodsFor: 'nil' stamp: 'ms 7/2/2023 17:11:26'!
test01

	
	QatarOnlineGame 
		teams: { 'Defensor1', 'Mediocampista1' , 'Delantero1' ,  'Defensor2', 'Mediocampista2' , 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10, 5@10, 10@10, 19@10, 15@10, 11@10 }
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:13:13' prior: 50634478!
test01

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1', 'Mediocampista1' , 'Delantero1' ,  'Defensor2', 'Mediocampista2' , 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10, 5@10, 10@10, 19@10, 15@10, 11@10 }.
		
	self assert: (game postionOf: 'Defensor1' is: 2@10).
	
		
		
		! !

TestCase subclass: #QatarOnlineTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineTest category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 17:13:30'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:13:34'!
ERROR!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:13:34'!
ERROR!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:13:54'!
ERROR!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:14:26' prior: 50634489!
test01

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1'. 'Mediocampista1'. 'Delantero1'.  'Defensor2'. 'Mediocampista2'. 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 'Defensor1' is: 2@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:14:27'!
ERROR!
!QatarOnlineGame class methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:14:36'!
teams: aRenameMe1 courtExtension: aRenameMe2 ballStatingOn: aRenameMe3 startingOn: aRenameMe4 
	self shouldBeImplemented.! !
!QatarOnlineGame class methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:15:20' prior: 50634538!
teams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
	self shouldBeImplemented.! !
!QatarOnlineGame class methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:15:46' prior: 50634545!
teams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
	^self new initializeWithTeams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
! !

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:15:51'!
ERROR!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:15:51'!
ERROR!

!classDefinition: #QatarOnlineGame category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 17:16:02'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: 'teams'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineGame category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 17:16:03'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: 'teams courtExtension'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineGame category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 17:16:03'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: 'teams courtExtension ballPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineGame category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 17:16:03'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: 'teams courtExtension ballPosition playersInitialPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!QatarOnlineGame methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:16:03'!
initializeWithTeams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition 
	self shouldBeImplemented.
	teams := aTeams.
	courtExtension := aCourtExtension.
	ballPosition := aBallPosition.
	playersInitialPosition := aPlayersInitialPosition.! !
!QatarOnlineGame methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:16:08' prior: 50634603!
initializeWithTeams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition 
	teams := aTeams.
	courtExtension := aCourtExtension.
	ballPosition := aBallPosition.
	playersInitialPosition := aPlayersInitialPosition.! !

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:16:15'!
ERROR!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:16:39'!
postionOf: aRenameMe1 is: aRenameMe2 
	self shouldBeImplemented.! !
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:16:56' prior: 50634630!
postionOf: aPlayer is: aPosition 
	^true! !

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:16:57'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:17:35'!
test02

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1'. 'Mediocampista1'. 'Delantero1'.  'Defensor2'. 'Mediocampista2'. 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 'Defensor1' is: 2@1).
	
		
		
		! !

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:17:36'!
FAILURE!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:17:53'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:17:53'!
FAILURE!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:17:53'!
FAILURE!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:20:13' prior: 50634642!
test02

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1' -> 2@10. 'Mediocampista1'. 'Delantero1'.  'Defensor2'. 'Mediocampista2'. 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 'Defensor1' is: 2@1).
	
		
		
		! !

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:20:14'!
ERROR!

'Defensor1' -> 2@10!

2 -> 3!

2 -> 3!

2 -> 3!

2 -> 3!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:23:22'!
ERROR!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:23:41' prior: 50634665!
test02

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1' . 'Mediocampista1'. 'Delantero1'.  'Defensor2'. 'Mediocampista2'. 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 'Defensor1' is: 2@1).
	
		
		
		! !

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:23:42'!
FAILURE!

	^playersInitialPosition first = aPosition!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:24:26' prior: 50634635!
postionOf: aPlayer is: aPosition 
	^playersInitialPosition first = aPosition! !

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:24:27'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:24:27'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:25:03' prior: 50634522!
test01

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1'. 'Mediocampista1'. 'Delantero1'.  'Defensor2'. 'Mediocampista2'. 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 'Defensor2' is: 2@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:25:04'!
PASSED!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:25:04'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:25:04'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:25:25'!
test03

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1'. 'Mediocampista1'. 'Delantero1'.  'Defensor2'. 'Mediocampista2'. 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 'Defensor2' is: 5@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:25:26'!
FAILURE!

#(2@10 5@10 10@10 19@10 15@10 11@10)!

#(2@10 5@10 10@10 19@10 15@10 11@10) second!

#(2@10 5@10 10@10 19@10 15@10 11@10) first !

{ 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }!

{ 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } first !

{ 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } second !

{ 2@10. 5@10. 10@10. 19@10. 15@10. 11@10} at: 2!

{ 2@10. 5@10. 10@10. 19@10. 15@10. 11@10} at: 3!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:28:19' prior: 50634733!
test03

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1'. 'Mediocampista1'. 'Delantero1'.  'Defensor2'. 'Mediocampista2'. 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 'Defensor2' is: 5@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:29:09' prior: 50634761!
test03

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 'Defensor2' is: 5@10).
	
		
		
		! !
!QatarOnlineGame methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:29:15' prior: 50634616!
initializeWithTeams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition 
	courtExtension := aCourtExtension.
	ballPosition := aBallPosition.
	playersInitialPosition := aPlayersInitialPosition.! !
!QatarOnlineGame methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:29:24'!
initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition 
	courtExtension := aCourtExtension.
	ballPosition := aBallPosition.
	playersInitialPosition := aPlayersInitialPosition.! !

!methodRemoval: QatarOnlineGame #initializeWithTeams:courtExtension:ballStatingOn:startingOn: stamp: 'ms 7/2/2023 17:29:27'!
initializeWithTeams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition 
	courtExtension := aCourtExtension.
	ballPosition := aBallPosition.
	playersInitialPosition := aPlayersInitialPosition.!
!QatarOnlineGame class methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:29:40'!
courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
	^self new initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
! !

!methodRemoval: QatarOnlineGame class #teams:courtExtension:ballStatingOn:startingOn: stamp: 'ms 7/2/2023 17:29:42'!
teams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
	^self new initializeWithTeams: aTeams courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:29:55' prior: 50634713!
test01

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 1 is: 2@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:30:01' prior: 50634685!
test02

	| game |
	
	game := QatarOnlineGame 
		teams: { 'Defensor1' . 'Mediocampista1'. 'Delantero1'.  'Defensor2'. 'Mediocampista2'. 'Delantero3'}
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 1 is: 2@1).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:30:06' prior: 50634775!
test03

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 2 is: 5@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:30:07'!
FAILURE!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:30:29' prior: 50634702!
postionOf: aPlayer is: aPosition 
	^playersInitialPosition at: aPlayer = aPosition! !

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:30:30'!
ERROR!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:30:30'!
ERROR!

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:30:30'!
ERROR!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:30:42' prior: 50634875!
postionOf: aPlayer is: aPosition 
	^(playersInitialPosition at: aPlayer) = aPosition! !

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:30:43'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:30:43'!
ERROR!

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:30:43'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:30:43'!
ERROR!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:30:54' prior: 50634850!
test02

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 1 is: 2@1).
	
		
		
		! !

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:30:55'!
PASSED!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:30:55'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:30:55'!
PASSED!

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:30:55'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:31:17'!
test04

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 2 is: 1@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:31:18'!
PASSED!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:31:18'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:31:18'!
PASSED!

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:31:18'!
PASSED!

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:31:19'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:31:29' prior: 50634923!
test04

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 5 is: 15@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:31:31'!
FAILURE!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:31:42' prior: 50634945!
test04

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 5 is: 15@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:31:43'!
PASSED!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:31:43'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:31:43'!
PASSED!

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:31:43'!
PASSED!

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:31:43'!
PASSED!

!methodRemoval: QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:31:47'!
test04

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 5 is: 15@10).
	
		
		
		!

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:31:50'!
PASSED!

!testRun: #QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:31:50'!
PASSED!

!testRun: #QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:31:50'!
PASSED!

!testRun: #QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:31:50'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:32:35'!
test01AssertPositionOfOnePlayerIsCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 1 is: 2@10).
	
		
		
		! !

!methodRemoval: QatarOnlineTest #test01 stamp: 'ms 7/2/2023 17:32:38'!
test01

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 1 is: 2@10).
	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:32:53'!
test03AssertPositionOfOnePlayerIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 1 is: 2@1).
	
		
		
		! !

!methodRemoval: QatarOnlineTest #test02 stamp: 'ms 7/2/2023 17:32:53'!
test02

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 1 is: 2@1).
	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:33:04'!
test02AssertPositionOfOnePlayerIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 1 is: 2@1).
	
		
		
		! !

!methodRemoval: QatarOnlineTest #test03AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 17:33:04'!
test03AssertPositionOfOnePlayerIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionOf: 1 is: 2@1).
	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:33:30'!
test03AssertAllPositionsPlayerAreCorrectInitialized

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 2 is: 5@10).
	
		
		
		! !

!methodRemoval: QatarOnlineTest #test03 stamp: 'ms 7/2/2023 17:33:30'!
test03

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionOf: 2 is: 5@10).
	
		
		
		!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 17:33:32'!
PASSED!

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 17:33:32'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 17:33:32'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 17:33:32'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:34:12'!
test04

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionBall: 10@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:34:14'!
ERROR!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:34:46'!
postionBall: aRenameMe1 
	self shouldBeImplemented.! !
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:34:56' prior: 50635105!
postionBall: aPosition 
	^true! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 17:34:57'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 17:34:57'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 17:34:57'!
PASSED!

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:34:57'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:35:13'!
test05

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionBall: 8@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test05 stamp: 'ms 7/2/2023 17:35:14'!
FAILURE!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:35:32' prior: 50635110!
postionBall: aPosition 
	^aPosition = ballPosition ! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 17:35:32'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 17:35:32'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 17:35:32'!
PASSED!

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:35:32'!
PASSED!

!testRun: #QatarOnlineTest #test05 stamp: 'ms 7/2/2023 17:35:32'!
PASSED!

!testRun: #QatarOnlineTest #test05 stamp: 'ms 7/2/2023 17:36:51'!
PASSED!

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 17:36:51'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 17:36:51'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 17:36:51'!
PASSED!

!testRun: #QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:36:51'!
PASSED!

!testRun: #QatarOnlineTest #test05 stamp: 'ms 7/2/2023 17:36:51'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:39:27'!
test04InitialPositionBallIscorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionBall: 10@10).
	
		
		
		! !

!methodRemoval: QatarOnlineTest #test04 stamp: 'ms 7/2/2023 17:39:27'!
test04

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionBall: 10@10).
	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:39:40'!
test05AssertInitialPositionBallIscorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionBall: 8@10).
	
		
		
		! !

!methodRemoval: QatarOnlineTest #test05 stamp: 'ms 7/2/2023 17:39:40'!
test05

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionBall: 8@10).
	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:39:54'!
test05AssertInitialPositionBallIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionBall: 8@10).
	
		
		
		! !

!methodRemoval: QatarOnlineTest #test05AssertInitialPositionBallIscorrect stamp: 'ms 7/2/2023 17:39:54'!
test05AssertInitialPositionBallIscorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self deny: (game postionBall: 8@10).
	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:40:04'!
test04InitialPositionBallIsCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionBall: 10@10).
	
		
		
		! !

!methodRemoval: QatarOnlineTest #test04InitialPositionBallIscorrect stamp: 'ms 7/2/2023 17:40:04'!
test04InitialPositionBallIscorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.
		
	self assert: (game postionBall: 10@10).
	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:40:22' prior: 50635236!
test04InitialPositionBallIsCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }.

		
	self assert: (game postionBall: 10@10).
	
		
		
		! !
!QatarOnlineGame class methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:42:33'!
courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition dice: aDice 
	^self new initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:33' prior: 50635059!
test03AssertAllPositionsPlayerAreCorrectInitialized

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } dice: self.
		
	self assert: (game postionOf: 2 is: 5@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:33' prior: 50635037!
test02AssertPositionOfOnePlayerIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } dice: self.
		
	self deny: (game postionOf: 1 is: 2@1).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:33' prior: 50635215!
test05AssertInitialPositionBallIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } dice: self.
		
	self deny: (game postionBall: 8@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:33' prior: 50635257!
test04InitialPositionBallIsCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } dice: self.

		
	self assert: (game postionBall: 10@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:33' prior: 50634998!
test01AssertPositionOfOnePlayerIsCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } dice: self.
		
	self assert: (game postionOf: 1 is: 2@10).
	
		
		
		! !

!methodRemoval: QatarOnlineGame class #courtExtension:ballStatingOn:startingOn: stamp: 'ms 7/2/2023 17:42:33'!
courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
	^self new initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition
!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:37' prior: 50635314!
test04InitialPositionBallIsCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.

		
	self assert: (game postionBall: 10@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 17:42:38'!
PASSED!

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 17:42:38'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 17:42:38'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 17:42:38'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 17:42:38'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 17:42:38'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:49' prior: 50635291!
test02AssertPositionOfOnePlayerIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
		
	self deny: (game postionOf: 1 is: 2@1).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:52' prior: 50635279!
test03AssertAllPositionsPlayerAreCorrectInitialized

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }
		 dice: self.
		
	self assert: (game postionOf: 2 is: 5@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:53' prior: 50635391!
test03AssertAllPositionsPlayerAreCorrectInitialized

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 }
		dice: self.
		
	self assert: (game postionOf: 2 is: 5@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:42:57' prior: 50635303!
test05AssertInitialPositionBallIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
		
	self deny: (game postionBall: 8@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:43:26' prior: 50635415!
test05AssertInitialPositionBallIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game play.
		
	self deny: (game postionBall: 8@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 17:43:28'!
ERROR!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:43:37' prior: 50635427!
test05AssertInitialPositionBallIsNotCorrect

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	self deny: (game postionBall: 8@10).
	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:43:46'!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game play.
	
	self deny: (game postionBall: 8@10).
	
		
		
		! !

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 17:43:57'!
ERROR!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:44:02'!
play
	self shouldBeImplemented.! !

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 17:44:16'!
ERROR!
!QatarOnlineGame methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:44:55'!
initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition dice: aDice  
	courtExtension := aCourtExtension.
	ballPosition := aBallPosition.
	playersInitialPosition := aPlayersInitialPosition.! !
!QatarOnlineGame class methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:44:55' prior: 50635268!
courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition dice: aDice 
	^self new initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition dice: aDice
! !

!methodRemoval: QatarOnlineGame #initializeWithCourtExtension:ballStatingOn:startingOn: stamp: 'ms 7/2/2023 17:44:55'!
initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition 
	courtExtension := aCourtExtension.
	ballPosition := aBallPosition.
	playersInitialPosition := aPlayersInitialPosition.!
!QatarOnlineGame class methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:45:15' prior: 50635482!
courtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition dice: aDice 
	^self new initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition dice: aDice
! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 17:45:16'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 17:45:16'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 17:45:16'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 17:45:16'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 17:45:16'!
PASSED!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 17:45:16'!
ERROR!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 17:45:16'!
ERROR!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 17:45:28'!
ERROR!

!classDefinition: #QatarOnlineGame category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 17:45:50'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: 'teams courtExtension ballPosition playersInitialPosition dice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!QatarOnlineGame methodsFor: 'initialization' stamp: 'ms 7/2/2023 17:45:49' prior: 50635471!
initializeWithCourtExtension: aCourtExtension ballStatingOn: aBallPosition startingOn: aPlayersInitialPosition dice: aDice  
	courtExtension := aCourtExtension.
	ballPosition := aBallPosition.
	playersInitialPosition := aPlayersInitialPosition.
	dice := aDice.! !
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:46:57' prior: 50635465!
play
	| delta |
	delta := dice roll @ dice roll.
	
	! !
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:47:06' prior: 50635561!
play
	| delta |
	delta := dice roll @ dice roll.
	
	! !
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:48:05'!
play: aPlayer
	| delta |
	delta := dice roll @ dice roll.
	
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:48:05' prior: 50635453!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game play: nil.
	
	self deny: (game postionBall: 8@10).
	
		
		
		! !

!methodRemoval: QatarOnlineGame #play stamp: 'ms 7/2/2023 17:48:05'!
play
	| delta |
	delta := dice roll @ dice roll.
	
	!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:49:10'!
playMovePlayer: aPlayer
	| delta |
	delta := dice roll @ dice roll.
	
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:49:10' prior: 50635577!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: nil.
	
	self deny: (game postionBall: 8@10).
	
		
		
		! !

!methodRemoval: QatarOnlineGame #play: stamp: 'ms 7/2/2023 17:49:10'!
play: aPlayer
	| delta |
	delta := dice roll @ dice roll.
	
	!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 17:49:44'!
playMovePlayer: aPlayer toPosition: aPosition 
	| delta |
	delta := dice roll @ dice roll.
	
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:49:44' prior: 50635597!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: nil toPosition: nil.
	
	self deny: (game postionBall: 8@10).
	
		
		
		! !

!methodRemoval: QatarOnlineGame #playMovePlayer: stamp: 'ms 7/2/2023 17:49:44'!
playMovePlayer: aPlayer
	| delta |
	delta := dice roll @ dice roll.
	
	!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 17:51:02' prior: 50635619!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	
	self assert: (game postionOf: 1 is: 10@20).
	
		
		
		! !

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 17:51:03'!
ERROR!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 17:51:17'!
ERROR!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 17:51:22'!
ERROR!

(1+((10-1)*5/10)) @ (1+((20-1)*10/10))!

11/2@20 abs !

11/2@20 abs
!

11/2@20 asInteger 
!

11/2 asNumber !

11/2 asInteger !

11/2 abs !

11/2 lowBit !

11/2 negated !

11/2 isInteger !

11/2 isInteger !

11/2 asFloat !

11/2 asInteger!

11/2 asInteger  !

11/2  integerPart !

11/2  integerPart!

11/2 integerPart !

(1+((10-1)*5/10)) @ (1+((20-1)*10/10)) integerPart 
!

| expresion parte1 parte2 resultado |

expresion := (1+((10-1)*5/10)) @ (1+((20-1)*10/10)).
parte1 := expresion first integerPart.
parte2 := expresion second integerPart.
resultado := parte1 @ parte2.!

(1+((10-1)*5/10)) @ (1+((20-1)*10/10)) first!

| expresion parte12tpresion := (1+((10-1)*5/10)) @ (1+((20-1)*10/10)).!

(1+((10-1)*5/10)) @ (1+((20-1)*10/10))!

(1+((10-1)*5/10)) @ (1+((20-1)*10/10)) integerPart !

(1+((10-1)*5/10)) @ (1+((20-1)*10/10)) floor!

(1+((10-1)*5/10)) @ (1+((20-1)*10/10)) truncated !

(1+((10-1)*5/10)) @ (1+((20-1)*10/10)) truncated!

2@2 + 1@3!

2@2 + 1@3!

2@2 !

2@2 +  2@2 !

	| hola |
hola :=  2@2!

hola!

hola :=  2@2
!

hola!

hola + 1!

hola + 1@3!

hola + 1@3!

hola + (1@3)!


| hola hola2 |
hola :=  2@2.
hola2 :=  324@2.

hola + hola2!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 18:06:47' prior: 50635612!
playMovePlayer: aPlayer toPosition: aPosition 
	| delta newPosition |
	delta := dice roll @ dice roll.
	
	newPosition := playersInitialPosition at: 	aPlayer + (aPosition - playersInitialPosition at: 	aPlayer ) * delta.
	
	! !
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 18:06:53' prior: 50635691!
playMovePlayer: aPlayer toPosition: aPosition 
	| delta newPosition |
	delta := dice roll @ dice roll.
	
	newPosition := playersInitialPosition at: 	aPlayer + (aPosition - playersInitialPosition at: 	aPlayer ) * delta.
	
	! !
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 18:06:59' prior: 50635701!
playMovePlayer: aPlayer toPosition: aPosition 
	| delta newPosition |
	
	delta := dice roll @ dice roll.
	newPosition := playersInitialPosition at: 	aPlayer + (aPosition - playersInitialPosition at: 	aPlayer ) * delta.
	
	! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 18:08:09'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 18:08:09'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 18:08:09'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 18:08:09'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 18:08:09'!
PASSED!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:08:09'!
ERROR!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:08:09'!
ERROR!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 18:08:14'!
roll
	self shouldBeImplemented.! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 18:08:36' prior: 50635743!
roll
	^10/10! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 18:08:37'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 18:08:37'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 18:08:37'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 18:08:37'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 18:08:37'!
PASSED!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:08:37'!
ERROR!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:08:37'!
ERROR!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 18:08:45' prior: 50635748!
roll
	^1! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 18:08:47'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 18:08:47'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 18:08:47'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 18:08:47'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 18:08:47'!
PASSED!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:08:47'!
ERROR!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:08:47'!
ERROR!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:09:17'!
ERROR!
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 18:09:27' prior: 50635711!
playMovePlayer: aPlayer toPosition: aPosition 
	| delta newPosition |
	
	delta := dice roll @ dice roll.
	newPosition := (playersInitialPosition at: 	aPlayer) + (aPosition - playersInitialPosition at: 	aPlayer ) * delta.
	
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 18:10:29' prior: 50635774!
roll
	^0.5! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 18:10:30'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 18:10:30'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 18:10:30'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 18:10:30'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 18:10:30'!
PASSED!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:10:30'!
FAILURE!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:10:30'!
FAILURE!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 18:11:22' prior: 50635813!
roll
	^(10/5)! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 18:11:23'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 18:11:23'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 18:11:23'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 18:11:23'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 18:11:23'!
PASSED!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:11:23'!
FAILURE!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:11:23'!
FAILURE!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 18:11:27' prior: 50635839!
roll
	^1! !
!QatarOnlineGame methodsFor: 'category-name' stamp: 'ms 7/2/2023 18:11:51' prior: 50635802!
playMovePlayer: aPlayer toPosition: aPosition 
	| delta newPosition |
	
	delta := dice roll @ dice roll.
	newPosition := (playersInitialPosition at: 	aPlayer) + (aPosition - playersInitialPosition at: 	aPlayer ) * delta.
	
	playersInitialPosition at: 	aPlayer put: newPosition.
	
	! !

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 18:11:52'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 18:11:52'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 18:11:52'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 18:11:52'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 18:11:52'!
PASSED!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 18:11:52'!
PASSED!

----SNAPSHOT----(2 July 2023 18:12:01) CuisUniversity-5832.image priorSource: 9669903!

----STARTUP---- (2 July 2023 19:37:57) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!


!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 19:38:22'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:39:02' prior: 50635636!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 2 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 2 is: 10@20).

	
		
		
		! !

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 19:39:03'!
PASSED!

!testRun: #QatarOnlineTest #test01AssertPositionOfOnePlayerIsCorrect stamp: 'ms 7/2/2023 19:39:03'!
PASSED!

!testRun: #QatarOnlineTest #test02AssertPositionOfOnePlayerIsNotCorrect stamp: 'ms 7/2/2023 19:39:03'!
PASSED!

!testRun: #QatarOnlineTest #test03AssertAllPositionsPlayerAreCorrectInitialized stamp: 'ms 7/2/2023 19:39:03'!
PASSED!

!testRun: #QatarOnlineTest #test04InitialPositionBallIsCorrect stamp: 'ms 7/2/2023 19:39:03'!
PASSED!

!testRun: #QatarOnlineTest #test05AssertInitialPositionBallIsNotCorrect stamp: 'ms 7/2/2023 19:39:03'!
PASSED!

!testRun: #QatarOnlineTest #test06 stamp: 'ms 7/2/2023 19:39:03'!
PASSED!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:42:53'!
test06OnePlayerCanMoveToAPosition

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 2 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 2 is: 10@20).

	
		
		
		! !

!methodRemoval: QatarOnlineTest #test06 stamp: 'ms 7/2/2023 19:42:53'!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 2 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 2 is: 10@20).

	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:42:58' prior: 50635946!
test06OnePlayerCanMoveToAPosition

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).

	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:47:01'!
test07SeMueveUnaVezCadaEquipo

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 4 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).

	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:53:57' prior: 50635987!
test07SeMueveUnaVezCadaEquipo

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 1 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 4 is: 10@20).


	
		
		
		! !

!testRun: #QatarOnlineTest #test07SeMueveUnaVezCadaEquipo stamp: 'ms 7/2/2023 19:53:58'!
FAILURE!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:54:25' prior: 50636001!
test07SeMueveUnaVezCadaEquipo

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
		
		
	self diceRolls: #(10 10 10 10).
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 1 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 4 is: 10@20).


	
		
		
		! !

!testRun: #QatarOnlineTest #test07SeMueveUnaVezCadaEquipo stamp: 'ms 7/2/2023 19:54:31'!
ERROR!
!QatarOnlineTest methodsFor: 'category-name' stamp: 'ms 7/2/2023 19:54:38'!
diceRolls: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #QatarOnlineTest category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/2/2023 19:55:24'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'diceRolls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!QatarOnlineTest methodsFor: 'category-name' stamp: 'ms 7/2/2023 19:55:23' prior: 50636039!
diceRolls: aCollectionsOfRolls
	diceRolls := ReadStream on: aCollectionsOfRolls.
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:59:14' prior: 50635865!
roll
	^diceRolls next! !

!testRun: #QatarOnlineTest #test07SeMueveUnaVezCadaEquipo stamp: 'ms 7/2/2023 19:59:58'!
FAILURE!

!classRemoval: #QatarOnlineGame stamp: 'ms 7/2/2023 20:05:53'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: 'teams courtExtension ballPosition playersInitialPosition dice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #QatarOnlineTest stamp: 'ms 7/2/2023 20:05:54'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'diceRolls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

----End fileIn of C:\windows64\Parciales\2022-2c\2doParcial\ISW1-2022-2C-2doParcial.st----!
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636602 overrides: 50636580!
esDefensor

	^true! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636620 overrides: 50636568!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	^unJuego pelearPorPelotaConDelantero: unDelantero yDefensor: self! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636606 overrides: 50636557!
pelearPorPelotaCon: unJugador en: unJuego

	unJugador pelearPorPelotaConDefensor: self en: unJuego ! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636627 overrides: 50636574!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	unJuego pelearPorPelotaConDefensor: self yMediocampista: unMediocampista ! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636613 overrides: 50636562!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	unJuego pelearPorPelotaConDefensor: unDefensor yDefensor: self
! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636665 overrides: 50636568!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	unJuego pelearPorPelotaConDelantero: unDelantero yDelantero: self! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636651 overrides: 50636557!
pelearPorPelotaCon: otroJugador en: unJuego

	^otroJugador pelearPorPelotaConDelantero: self en: unJuego! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636672 overrides: 50636574!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	unJuego pelearPorPelotaConDelantero: self yMediocampista: unMediocampista ! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636658 overrides: 50636562!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	unJuego pelearPorPelotaConDelantero: self yDefensor: unDefensor ! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636647 overrides: 50636583!
esDelantero
	
	^true! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636580!
esDefensor
	
	^false! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636568!
pelearPorPelotaConDelantero: unDelantero en: unJuego
	
	self subclassResponsibility ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636557!
pelearPorPelotaCon: otraJugador en: unJuego

	self subclassResponsibility ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636574!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	self subclassResponsibility ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636586!
esMediocampista
	
	^false! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636562!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	self subclassResponsibility ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636583!
esDelantero
	
	^false! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636712 overrides: 50637122!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	unJuego pelearPorPelotaConDelantero: unDelantero yMediocampista: self! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636697 overrides: 50637128!
pelearPorPelotaCon: unJugador en: unJuego

	unJugador pelearPorPelotaConMediocampista: self en: unJuego ! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636692 overrides: 50637140!
esMediocampista

	^true! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636720 overrides: 50637134!
pelearPorPelotaConMediocampista: unMedioCampista en: unJuego 

	unJuego pelearPorPelotaConMediocampista: unMedioCampista yMediocampista: self
! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636704 overrides: 50637144!
pelearPorPelotaConDefensor: unDefensor en: unJuego

	unJuego pelearPorPelotaConDefensor: unDefensor yMediocampista: self! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636912!
assertEsPuntoEntero: posicionDestino

	^ posicionDestino isIntegerPoint ifFalse: [ self error: self posicionInvalidaErrorDescription ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636943!
jugadoresConPelota

	| jugadoresConPelota |
	
	jugadoresConPelota := OrderedCollection withAll: (self jugadoresConPelotaDe: equipo1).
	jugadoresConPelota addAll: (self jugadoresConPelotaDe: equipo2).
	
	^jugadoresConPelota! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636984!
pasarAProximoEquipo
	
	equipos next! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636988!
estaLaPelotaLibre
	
	^poseedorDePelota isNil! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636811!
initializeEquipos

	equipo1 := self crearEquipo1.
	equipo2 := self crearEquipo2.
	equipos := CircularReadStream on: { equipo1. equipo2 } moving: NullUnit new
	
		! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636858!
mediocampistaDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esMediocampista ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636959!
mover: jugadorAMover a: posicionDestino 
	
	| jugadoresConPelota |
	
	self con: jugadorAMover desde: (self posicionDe: jugadorAMover) a: posicionDestino hacer: [ :posicionDestinoReal |
		self equipoActual at: jugadorAMover put: posicionDestinoReal.
		(self poseedorDePelotaEs: jugadorAMover) ifTrue: [ posicionDePelota := posicionDestinoReal ].
		posicionDePelota = posicionDestinoReal ifTrue: [
			jugadoresConPelota := self jugadoresConPelota.
			jugadoresConPelota size = 2 ifTrue: [ jugadoresConPelota first pelearPorPelotaCon: jugadoresConPelota second en: self ]]]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636785!
crearEquipo1

	^ Dictionary new
		at: self crearDefensor put: 2@10;
		at: self crearMediocampista put: 5@10;
		at: self crearDelantero put: self posicionInicialDeDelanteroEquipo1;
		yourself! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636901!
afectarPosicion: posicionActual llendoA: posicionDestino
	
	| nuevoX nuevoY |
	
	nuevoX := self afectar: posicionActual x llendoA: posicionDestino x.
	nuevoY := self afectar: posicionActual y llendoA: posicionDestino y.
	
	^nuevoX @ nuevoY.
	! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50637012!
posicionDePelota
	
	^posicionDePelota! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50637020!
jugadorInvalidErrorDescription
	
	^'Jugador inválido'! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636827!
crearMediocampista
	
	^Mediocampista new! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636980!
equipoActual

	^ equipos current! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50637007!
poseedorDePelotaEs: unJugador

	^poseedorDePelota = unJugador ! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636869!
mediocampistaEquipo2

	^self mediocampistaDe: equipo2! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636850!
delanteroEquipo1
	
	^self delanteroDe: equipo1! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636775!
pelearPorPelotaConMediocampista: unMedioCampista yMediocampista: otroMediocampista

	dado tirar >= 7 ifTrue: [
		poseedorDePelota :=  poseedorDePelota = unMedioCampista 
			ifTrue: [ otroMediocampista ]
			ifFalse: [ unMedioCampista ]]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50636874!
posicionDe: unJugador

	^equipo1 
		at: unJugador 
		ifAbsent: [ 
			equipo2 
				at: unJugador
				ifAbsent: [self error: self jugadorInvalidErrorDescription ]]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636882!
posicionInicialDeDelanteroEquipo1
	
	^10@10! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50637025!
posicionInvalidaErrorDescription
	
	^'Posición inválida'! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636844!
delanteroDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esDelantero ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636992!
pasarPelotaA: posicionDestino 
	
	| jugadoresConPelota |
	
	self con: poseedorDePelota desde: posicionDePelota a: posicionDestino hacer: [ :posicionDestinoReal |
		posicionDePelota := posicionDestinoReal.
		jugadoresConPelota := self jugadoresConPelota.
		jugadoresConPelota isEmpty 
			ifTrue: [ poseedorDePelota := nil ]
			ifFalse: [ poseedorDePelota := jugadoresConPelota first ]]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636919!
assertEstaEnTablero: posicionDestino

	^ (posicionDestino between: 1@1 and: 20@20) ifFalse: [ self error: self posicionInvalidaErrorDescription ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636803!
initializeConDado: unDado 
	
	self initializeEquipos.
	
	dado := unDado.
	posicionDePelota := self posicionInicialDePelota.
	poseedorDePelota := self delanteroEquipo1! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636953!
jugadoresConPelotaDe: unEquipo

	^ (unEquipo select: [:unaPosicion | unaPosicion = posicionDePelota ]) keys! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50637016!
posicionInicialDePelota
	
	^10@10! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636854!
delanteroEquipo2
	
	^self delanteroDe: equipo2
	! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636819!
crearDefensor
	
	^Defensor new! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636886!
posicionInicialDeDelanteroEquipo2
	
	^11@10! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636890!
afectar: unEjeDePosicionOrigen llendoA: unEjeDePosicionDestino 
	
	| delta nuevoEje tiro |
	
	tiro := dado tirar.
	delta := (unEjeDePosicionDestino - unEjeDePosicionOrigen) * tiro / 10.
	nuevoEje := unEjeDePosicionOrigen + delta asInteger.
	
	^nuevoEje! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636926!
con: unJugador desde: posicionActual a: posicionDestino hacer: unBloque
	
	| posicionDestinoReal |
	
	self assertEstaEnTablero: posicionDestino.
	self assertEsPuntoEntero: posicionDestino.
	(self equipoActual includesKey: unJugador) ifFalse: [ self error: self jugadorInvalidErrorDescription ].
	
	posicionDestinoReal := self afectarPosicion: posicionActual llendoA: posicionDestino.
	
	unBloque value: posicionDestinoReal.
	
	self pasarAProximoEquipo
	! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636757!
pelearPorPelotaConDelantero: unDelantero yDefensor: unDefensor

	poseedorDePelota := unDefensor ! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636763!
pelearPorPelotaConDelantero: unDelantero yDelantero: otroDelantero

! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636744!
pelearPorPelotaConDefensor: unDefensor yDefensor: otroDefensor

	! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636823!
crearDelantero
	
	^Delantero new! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636749!
pelearPorPelotaConDefensor: unDefensor yMediocampista: unMediocampista

	poseedorDePelota := dado tirar >= 8 
		ifTrue: [ unMediocampista ]
		ifFalse: [ unDefensor ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636794!
crearEquipo2

	^ Dictionary new
		at: self crearDefensor put: 19@10;
		at: self crearMediocampista put: 15@10;
		at: self crearDelantero put: self posicionInicialDeDelanteroEquipo2;
		yourself! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636864!
mediocampistaEquipo1
	
	^self mediocampistaDe: equipo1! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636831!
defensorDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esDefensor ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636836!
defensorEquipo1
	
	^self defensorDe: equipo1! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636840!
defensorEquipo2
	
	^self defensorDe: equipo2! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636768!
pelearPorPelotaConDelantero: unDelantero yMediocampista: unMediocampista

	dado tirar >= 6 ifTrue: [ poseedorDePelota := unMediocampista ]! !
!QatarOnline class methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50637038!
conDado: unDado 
	
	^self new initializeConDado: unDado ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636379!
test22MediocampistaVsMediocampistaGanaNoPoseedorConDadoDesde7

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 7).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636163!
test07LosJugadoresMuevenAlternadamentePorEquipo

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10).
	
	juego mover: juego delanteroEquipo1 a: 12@12.
	juego mover: juego delanteroEquipo2 a: 9@9.
	juego mover: juego delanteroEquipo1 a: 14@14.
	
	self assert: 14@14 equals: (juego posicionDe: juego delanteroEquipo1).
	self assert: 9@9 equals: (juego posicionDe: juego delanteroEquipo2).! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636430!
test25PosicionDestinoDePelotaDebeSerUnPuntoEntero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertPasarAPosicion: 1.1@1 invalidaEn: juego.
	self assertPasarAPosicion: 1@2.1 invalidaEn: juego.
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636103!
test02SePuedeConocerLaPosicionDeJugadoresDeLosDosEquipos

	| juego |
	
	juego := self crearJuego: #().
	
	self assert: 10@10 equals: (juego posicionDe: juego delanteroEquipo1).	
	self assert: 11@10 equals: (juego posicionDe: juego delanteroEquipo2).! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636248!
test14DelanteroVsDefensorGanaDefensro

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo2) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636488!
test30PasarLaPelotaEnEjeYEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(10 5).
	
	juego pasarPelotaA: 20@20.
	
	self assert: 20@15 equals: juego posicionDePelota 
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636536!
crearJuego: unosTirosDeDado

	dado := ReadStream on: unosTirosDeDado.
	
	^ QatarOnline conDado: self! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636341!
test20DefensorVsMediocampistaGanaMediocampistaConDadoMayorA7

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10 8).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636497!
test31PosicionDestinoDePelotaDebeSerEntera

	| juego |
	
	juego := self crearJuego: #(1 1).
	
	juego pasarPelotaA: 15@15.
	
	self assert: 10@10 equals: juego posicionDePelota ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636275!
test16DelanteroVsMediocampistaGanaMediocampistaConDadoDesde6

	| juego |
	
	juego := self crearJuego: #(10 10 6).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636417!
test24NoSePuedePasarLaPelotaFueraDelTablero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertPasarAPosicion: 0@1 invalidaEn: juego.
	self assertPasarAPosicion: 1@0 invalidaEn: juego.
	self assertPasarAPosicion: 21@1 invalidaEn: juego.
	self assertPasarAPosicion: 20@21 invalidaEn: juego.
	
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636137!
test05PosicionDestinoDeMovimientoDebeSerUnPuntoEntero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertMueveAPosicion: 1.1@1 invalidaEn: juego.
	self assertMueveAPosicion: 1@2.1 invalidaEn: juego.
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636469!
test28PasarLaPelotaALugarSinJugadorHaceQueNoHayaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego pasarPelotaA: 2@2.
	
	self assert: 2@2 equals: juego posicionDePelota.
	self assert: juego estaLaPelotaLibre! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636223!
test12LaPelotaSeMueveConElJugadorQueLaPosee

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: 15@15.
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636125!
test04NoSePuedeMoverFueraDelTablero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertMueveAPosicion: 0@1 invalidaEn: juego.
	self assertMueveAPosicion: 1@0 invalidaEn: juego.
	self assertMueveAPosicion: 21@1 invalidaEn: juego.
	self assertMueveAPosicion: 20@21 invalidaEn: juego.
	
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636290!
test17DelanteroVsDelanteroGanaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego delanteroEquipo2).
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636360!
test21MediocampistaVsMediocampistaGanaPoseedorConDadoHasta6

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 6).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636093!
test01UnJugadorSeMueveALaPosicionDestino

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: 12@12.
	
	self assert: 12@12 equals: (juego posicionDe: juego delanteroEquipo1).! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636522!
assertPasarAPosicion: posicionDestino invalidaEn: juego

	^ self
		should: [ juego pasarPelotaA: posicionDestino ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: juego posicionInvalidaErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDePelota equals: juego posicionDePelota ]! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636179!
test08MovientoEnEjeXEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(5 10).
	
	juego mover: juego delanteroEquipo1 a: 20@20.
	
	self assert: 15@20 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636147!
test06EmpiezaJugandoEquipo1

	| juego |
	
	juego := self crearJuego: #().
	
	self 
		should: [juego mover: juego delanteroEquipo2 a: 9@9 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: juego jugadorInvalidErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDeDelanteroEquipo2 equals: (juego posicionDe: juego delanteroEquipo2) ].
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636261!
test15DelanteroVsMediocampistaGanaDelanteroConDadoHasta5

	| juego |
	
	juego := self crearJuego: #(10 10 5).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636455!
test27PasarLaPelotaAOtroJugadorCambiaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego pasarPelotaA: (juego posicionDe: juego defensorEquipo1).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1).
	self deny: juego estaLaPelotaLibre ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636304!
test18DefensorVsDefensorGanaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636439!
test26SoloPuedePasarJugadorDelEquipoActual

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego defensorEquipo1 a: 2@2.
	
	self 
		should: [juego pasarPelotaA: 9@9 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: juego jugadorInvalidErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDePelota equals: juego posicionDePelota ].
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636189!
test09MovientoEnEjeYEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(10 5).
	
	juego mover: juego delanteroEquipo1 a: 20@20.
	
	self assert: 20@15 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636398!
test23MediocampistaVsDefensorEsIgualADefensorVsMediocampista

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 7).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo2 ) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo2 ) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636209!
test11LaPelotaEmpiezaEn10_10YPoseidaPorDelanteroEquipo1

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	self assert: juego posicionInicialDePelota equals: juego posicionDePelota.
	self deny: 0@0 = juego posicionDePelota.
	
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1).
	self deny: (juego poseedorDePelotaEs: juego delanteroEquipo2).
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636506!
assertMueveAPosicion: posicionDestino invalidaEn: juego

	^ self
		should: [ juego mover: juego delanteroEquipo1 a: posicionDestino ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: juego posicionInvalidaErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDeDelanteroEquipo1 equals: (juego posicionDe: juego delanteroEquipo1) ]! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636235!
test13LaPelotaNoSeMueveConUnJugadorQueNoLaPosee

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego defensorEquipo1 a: 15@15.
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636322!
test19DefensorVsMediocampistaGanaDefensorConDadoHasta7

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10 7).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636479!
test29PasarLaPelotaEnEjeXEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(5 10).
	
	juego pasarPelotaA: 20@20.
	
	self assert: 15@20 equals: juego posicionDePelota 
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636199!
test10PosicionDestinoDebeSerEntera

	| juego |
	
	juego := self crearJuego: #(1 1).
	
	juego mover: juego delanteroEquipo1 a: 15@15.
	
	self assert: 10@10 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636542!
tirar
	
	^dado next! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50636114!
test03NoSePuedeConsultarPosicionDeAlgoQueNoEsJugador

	| juego |
	
	juego := self crearJuego: #().
	
	self 
		should: [ juego posicionDe: 'x' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: juego jugadorInvalidErrorDescription! !

!classRemoval: #QatarOnline stamp: 'ms 7/2/2023 21:08:14'!
Object subclass: #QatarOnline
	instanceVariableNames: 'equipo1 equipo2 equipos dado posicionDePelota poseedorDePelota'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #Mediocampista stamp: 'ms 7/2/2023 21:08:15'!
Jugador subclass: #Mediocampista
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #Delantero stamp: 'ms 7/2/2023 21:08:15'!
Jugador subclass: #Delantero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #Defensor stamp: 'ms 7/2/2023 21:08:15'!
Jugador subclass: #Defensor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #Jugador stamp: 'ms 7/2/2023 21:08:15'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #QatarOnlineTest stamp: 'ms 7/2/2023 21:08:15'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'dado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

----End fileIn of C:\windows64\repoProfes\2023-1c\10-CustomerImporter\CustomerImporter.st----!

!testRun: #ImportTest #test01Import stamp: 'ms 7/2/2023 21:08:29'!
PASSED!

----End fileIn of C:\windows64\repoProfes\2023-1c\10-CustomerImporter\Step2\Step2\CustomerImporter-60.st----!

!testRun: #ImportTest #test01Import stamp: 'ms 7/2/2023 21:22:59'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/2/2023 21:22:59'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/2/2023 21:22:59'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/2/2023 21:23:00'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/2/2023 21:23:00'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/2/2023 21:23:00'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/2/2023 21:23:00'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/2/2023 21:23:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/2/2023 21:23:01'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/2/2023 21:23:01'!
PASSED!
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:27:52'!
session

	^ session! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:27:52' prior: 50638508 overrides: 16961402!
tearDown

	self session commit.
	session close.
	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:27:52' prior: 50639010 overrides: 16961402!
tearDown

	self session commit.
	self session close.
	! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:27:52' prior: 50638512!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'tests' stamp: 'ms 7/2/2023 21:27:52' prior: 50638308!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: self session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:28:01' prior: 50639005!
session

	^ session! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:28:01' prior: 50639016 overrides: 16961402!
tearDown

	self sessionssion commit.
	self session close.
	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:28:01' prior: 50639047 overrides: 16961402!
tearDown

	self sessionssion commit.
	self sessionssion close.
	! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:28:01' prior: 50639021!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self sessionssion
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'tests' stamp: 'ms 7/2/2023 21:28:01' prior: 50639031!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: self sessionssion..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:28:13' prior: 50639058!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:28:32' prior: 50638522!
numberOfCustomers

	^ (self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'assertions' stamp: 'ms 7/2/2023 21:28:36' prior: 50638487!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: self session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'ms 7/2/2023 21:28:42' prior: 50638318!
test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: self session. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:29:05' prior: 50638501 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	self  session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:29:52' prior: 50639053 overrides: 16961402!
tearDown

	self session commit.
	self session close.
	! !
!ImportTest methodsFor: 'tests' stamp: 'ms 7/2/2023 21:30:06' prior: 50639068!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: self session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/2/2023 21:30:21'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/2/2023 21:30:22'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/2/2023 21:30:22'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/2/2023 21:30:22'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/2/2023 21:30:23'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/2/2023 21:30:23'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/2/2023 21:30:23'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/2/2023 21:30:23'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/2/2023 21:30:23'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/2/2023 21:30:24'!
PASSED!

----STARTUP---- (3 July 2023 00:10:06) as C:\Users\mszta\Downloads\windows64 (3)\windows64\CuisUniversity-5832.image!

!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:39:02' prior: 50635636!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 2 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 2 is: 10@20).

	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:42:53'!
test06OnePlayerCanMoveToAPosition

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 2 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 2 is: 10@20).

	
		
		
		! !

!methodRemoval: QatarOnlineTest #test06 stamp: 'ms 7/3/2023 00:10:17'!
test06

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 2 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 2 is: 10@20).

	
		
		
		!
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:42:58' prior: 50639194!
test06OnePlayerCanMoveToAPosition

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).

	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:47:01'!
test07SeMueveUnaVezCadaEquipo

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 4 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).

	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:53:57' prior: 50639235!
test07SeMueveUnaVezCadaEquipo

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
	
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 1 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 4 is: 10@20).


	
		
		
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:54:25' prior: 50639249!
test07SeMueveUnaVezCadaEquipo

	| game |
	
	game := QatarOnlineGame 
		courtExtension: 20@20
		ballStatingOn: 10@10
		startingOn: { 2@10. 5@10. 10@10. 19@10. 15@10. 11@10 } 
		dice: self.
		
		
	self diceRolls: #(10 10 10 10).
	game playMovePlayer: 1 toPosition: 10@20.
	game playMovePlayer: 1 toPosition: 10@20.

	self assert: (game postionOf: 1 is: 10@20).
	self assert: (game postionOf: 4 is: 10@20).


	
		
		
		! !
!QatarOnlineTest methodsFor: 'category-name' stamp: 'ms 7/2/2023 19:54:38'!
diceRolls: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #QatarOnlineTest category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:17'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'diceRolls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!QatarOnlineTest methodsFor: 'category-name' stamp: 'ms 7/2/2023 19:55:23' prior: 50639281!
diceRolls: aCollectionsOfRolls
	diceRolls := ReadStream on: aCollectionsOfRolls.
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 19:59:14' prior: 50635865!
roll
	^diceRolls next! !

!classRemoval: #QatarOnlineGame stamp: 'ms 7/3/2023 00:10:17'!
Object subclass: #QatarOnlineGame
	instanceVariableNames: 'teams courtExtension ballPosition playersInitialPosition dice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #QatarOnlineTest stamp: 'ms 7/3/2023 00:10:17'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'diceRolls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineTest category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:17'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'dado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnlineTest category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:17'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'dado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 14:03:41'!
test01UnJugadorSeMueveALaPosicionDestino

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: 12@12.
	
	self assert: 12@12 equals: (juego posicionDe: juego delanteroEquipo1).! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 14:04:05'!
test02SePuedeConocerLaPosicionDeJugadoresDeLosDosEquipos

	| juego |
	
	juego := self crearJuego: #().
	
	self assert: 10@10 equals: (juego posicionDe: juego delanteroEquipo1).	
	self assert: 11@10 equals: (juego posicionDe: juego delanteroEquipo2).! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 14:04:24'!
test03NoSePuedeConsultarPosicionDeAlgoQueNoEsJugador

	| juego |
	
	juego := self crearJuego: #().
	
	self 
		should: [ juego posicionDe: 'x' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: juego jugadorInvalidErrorDescription! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 09:54:01'!
test04NoSePuedeMoverFueraDelTablero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertMueveAPosicion: 0@1 invalidaEn: juego.
	self assertMueveAPosicion: 1@0 invalidaEn: juego.
	self assertMueveAPosicion: 21@1 invalidaEn: juego.
	self assertMueveAPosicion: 20@21 invalidaEn: juego.
	
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 09:54:01'!
test05PosicionDestinoDeMovimientoDebeSerUnPuntoEntero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertMueveAPosicion: 1.1@1 invalidaEn: juego.
	self assertMueveAPosicion: 1@2.1 invalidaEn: juego.
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 09:54:01'!
test06EmpiezaJugandoEquipo1

	| juego |
	
	juego := self crearJuego: #().
	
	self 
		should: [juego mover: juego delanteroEquipo2 a: 9@9 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: juego jugadorInvalidErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDeDelanteroEquipo2 equals: (juego posicionDe: juego delanteroEquipo2) ].
		! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:01:28'!
test07LosJugadoresMuevenAlternadamentePorEquipo

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10).
	
	juego mover: juego delanteroEquipo1 a: 12@12.
	juego mover: juego delanteroEquipo2 a: 9@9.
	juego mover: juego delanteroEquipo1 a: 14@14.
	
	self assert: 14@14 equals: (juego posicionDe: juego delanteroEquipo1).
	self assert: 9@9 equals: (juego posicionDe: juego delanteroEquipo2).! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:01:33'!
test08MovientoEnEjeXEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(5 10).
	
	juego mover: juego delanteroEquipo1 a: 20@20.
	
	self assert: 15@20 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:00:16'!
test09MovientoEnEjeYEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(10 5).
	
	juego mover: juego delanteroEquipo1 a: 20@20.
	
	self assert: 20@15 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:09:31'!
test10PosicionDestinoDebeSerEntera

	| juego |
	
	juego := self crearJuego: #(1 1).
	
	juego mover: juego delanteroEquipo1 a: 15@15.
	
	self assert: 10@10 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:13:32'!
test11LaPelotaEmpiezaEn10_10YPoseidaPorDelanteroEquipo1

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	self assert: juego posicionInicialDePelota equals: juego posicionDePelota.
	self deny: 0@0 = juego posicionDePelota.
	
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1).
	self deny: (juego poseedorDePelotaEs: juego delanteroEquipo2).
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:16:24'!
test12LaPelotaSeMueveConElJugadorQueLaPosee

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: 15@15.
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 12/4/2022 09:07:16'!
test13LaPelotaNoSeMueveConUnJugadorQueNoLaPosee

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego defensorEquipo1 a: 15@15.
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:20:07'!
test14DelanteroVsDefensorGanaDefensro

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo2) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:42:40'!
test15DelanteroVsMediocampistaGanaDelanteroConDadoHasta5

	| juego |
	
	juego := self crearJuego: #(10 10 5).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:43:06'!
test16DelanteroVsMediocampistaGanaMediocampistaConDadoDesde6

	| juego |
	
	juego := self crearJuego: #(10 10 6).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:45:35'!
test17DelanteroVsDelanteroGanaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego delanteroEquipo2).
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:53:38'!
test18DefensorVsDefensorGanaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 10:59:26'!
test19DefensorVsMediocampistaGanaDefensorConDadoHasta7

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10 7).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 11:00:54'!
test20DefensorVsMediocampistaGanaMediocampistaConDadoMayorA7

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10 8).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 11:03:14'!
test21MediocampistaVsMediocampistaGanaPoseedorConDadoHasta6

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 6).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo1) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 11:05:35'!
test22MediocampistaVsMediocampistaGanaNoPoseedorConDadoDesde7

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 7).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 11:20:03'!
test23MediocampistaVsDefensorEsIgualADefensorVsMediocampista

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 7).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo2 ) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo2 ) ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 12:39:15'!
test24NoSePuedePasarLaPelotaFueraDelTablero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertPasarAPosicion: 0@1 invalidaEn: juego.
	self assertPasarAPosicion: 1@0 invalidaEn: juego.
	self assertPasarAPosicion: 21@1 invalidaEn: juego.
	self assertPasarAPosicion: 20@21 invalidaEn: juego.
	
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 12:41:00'!
test25PosicionDestinoDePelotaDebeSerUnPuntoEntero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertPasarAPosicion: 1.1@1 invalidaEn: juego.
	self assertPasarAPosicion: 1@2.1 invalidaEn: juego.
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 12:42:58'!
test26SoloPuedePasarJugadorDelEquipoActual

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego defensorEquipo1 a: 2@2.
	
	self 
		should: [juego pasarPelotaA: 9@9 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: juego jugadorInvalidErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDePelota equals: juego posicionDePelota ].
		! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 12:50:40'!
test27PasarLaPelotaAOtroJugadorCambiaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego pasarPelotaA: (juego posicionDe: juego defensorEquipo1).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1).
	self deny: juego estaLaPelotaLibre ! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 12:49:34'!
test28PasarLaPelotaALugarSinJugadorHaceQueNoHayaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego pasarPelotaA: 2@2.
	
	self assert: 2@2 equals: juego posicionDePelota.
	self assert: juego estaLaPelotaLibre! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 14:00:28'!
test29PasarLaPelotaEnEjeXEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(5 10).
	
	juego pasarPelotaA: 20@20.
	
	self assert: 15@20 equals: juego posicionDePelota 
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 14:02:26'!
test30PasarLaPelotaEnEjeYEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(10 5).
	
	juego pasarPelotaA: 20@20.
	
	self assert: 20@15 equals: juego posicionDePelota 
	! !
!QatarOnlineTest methodsFor: 'tests' stamp: 'HAW 11/30/2022 14:02:56'!
test31PosicionDestinoDePelotaDebeSerEntera

	| juego |
	
	juego := self crearJuego: #(1 1).
	
	juego pasarPelotaA: 15@15.
	
	self assert: 10@10 equals: juego posicionDePelota ! !
!QatarOnlineTest methodsFor: 'assertions' stamp: 'HAW 11/29/2022 17:22:40'!
assertMueveAPosicion: posicionDestino invalidaEn: juego

	^ self
		should: [ juego mover: juego delanteroEquipo1 a: posicionDestino ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: juego posicionInvalidaErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDeDelanteroEquipo1 equals: (juego posicionDe: juego delanteroEquipo1) ]! !
!QatarOnlineTest methodsFor: 'assertions' stamp: 'HAW 11/30/2022 12:40:03'!
assertPasarAPosicion: posicionDestino invalidaEn: juego

	^ self
		should: [ juego pasarPelotaA: posicionDestino ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: juego posicionInvalidaErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDePelota equals: juego posicionDePelota ]! !
!QatarOnlineTest methodsFor: 'setup' stamp: 'HAW 11/30/2022 09:54:40'!
crearJuego: unosTirosDeDado

	dado := ReadStream on: unosTirosDeDado.
	
	^ QatarOnline conDado: self! !
!QatarOnlineTest methodsFor: 'dado' stamp: 'HAW 11/30/2022 09:59:04'!
tirar
	
	^dado next! !

!classDefinition: #Jugador category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!Jugador methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:36:30'!
pelearPorPelotaCon: otraJugador en: unJuego

	self subclassResponsibility ! !
!Jugador methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 14:05:24'!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	self subclassResponsibility ! !
!Jugador methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 14:05:36'!
pelearPorPelotaConDelantero: unDelantero en: unJuego
	
	self subclassResponsibility ! !
!Jugador methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 14:05:49'!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	self subclassResponsibility ! !
!Jugador methodsFor: 'testing' stamp: 'HAW 11/30/2022 10:34:39'!
esDefensor
	
	^false! !
!Jugador methodsFor: 'testing' stamp: 'HAW 11/30/2022 10:33:04'!
esDelantero
	
	^false! !
!Jugador methodsFor: 'testing' stamp: 'HAW 11/30/2022 10:35:16'!
esMediocampista
	
	^false! !

!classDefinition: #Defensor category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Jugador subclass: #Defensor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #Defensor category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Jugador subclass: #Defensor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!Defensor methodsFor: 'testing' stamp: 'HAW 11/30/2022 10:34:52' overrides: 50639825!
esDefensor

	^true! !
!Defensor methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:54:48' overrides: 50639802!
pelearPorPelotaCon: unJugador en: unJuego

	unJugador pelearPorPelotaConDefensor: self en: unJuego ! !
!Defensor methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:57:53' overrides: 50639807!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	unJuego pelearPorPelotaConDefensor: unDefensor yDefensor: self
! !
!Defensor methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:38:53' overrides: 50639813!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	^unJuego pelearPorPelotaConDelantero: unDelantero yDefensor: self! !
!Defensor methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 11:20:41' overrides: 50639819!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	unJuego pelearPorPelotaConDefensor: self yMediocampista: unMediocampista ! !

!classDefinition: #Delantero category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Jugador subclass: #Delantero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #Delantero category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Jugador subclass: #Delantero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!Delantero methodsFor: 'testing' stamp: 'HAW 11/30/2022 10:31:31' overrides: 50639828!
esDelantero
	
	^true! !
!Delantero methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:37:16' overrides: 50639802!
pelearPorPelotaCon: otroJugador en: unJuego

	^otroJugador pelearPorPelotaConDelantero: self en: unJuego! !
!Delantero methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:56:47' overrides: 50639807!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	unJuego pelearPorPelotaConDelantero: self yDefensor: unDefensor ! !
!Delantero methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:47:35' overrides: 50639813!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	unJuego pelearPorPelotaConDelantero: unDelantero yDelantero: self! !
!Delantero methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 11:08:24' overrides: 50639819!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	unJuego pelearPorPelotaConDelantero: self yMediocampista: unMediocampista ! !

!classDefinition: #Mediocampista category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Jugador subclass: #Mediocampista
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #Mediocampista category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Jugador subclass: #Mediocampista
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!Mediocampista methodsFor: 'testing' stamp: 'HAW 11/30/2022 10:35:02' overrides: 50639831!
esMediocampista

	^true! !
!Mediocampista methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 11:04:14' overrides: 50639802!
pelearPorPelotaCon: unJugador en: unJuego

	unJugador pelearPorPelotaConMediocampista: self en: unJuego ! !
!Mediocampista methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 11:00:00' overrides: 50639807!
pelearPorPelotaConDefensor: unDefensor en: unJuego

	unJuego pelearPorPelotaConDefensor: unDefensor yMediocampista: self! !
!Mediocampista methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:42:05' overrides: 50639813!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	unJuego pelearPorPelotaConDelantero: unDelantero yMediocampista: self! !
!Mediocampista methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 11:04:41' overrides: 50639819!
pelearPorPelotaConMediocampista: unMedioCampista en: unJuego 

	unJuego pelearPorPelotaConMediocampista: unMedioCampista yMediocampista: self
! !

!classDefinition: #QatarOnline category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Object subclass: #QatarOnline
	instanceVariableNames: 'equipo1 equipo2 equipos dado posicionDePelota poseedorDePelota'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #QatarOnline category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:19'!
Object subclass: #QatarOnline
	instanceVariableNames: 'equipo1 equipo2 equipos dado posicionDePelota poseedorDePelota'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!
!QatarOnline methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:58:20'!
pelearPorPelotaConDefensor: unDefensor yDefensor: otroDefensor

	! !
!QatarOnline methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 14:09:28'!
pelearPorPelotaConDefensor: unDefensor yMediocampista: unMediocampista

	poseedorDePelota := dado tirar >= 8 
		ifTrue: [ unMediocampista ]
		ifFalse: [ unDefensor ]! !
!QatarOnline methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:39:50'!
pelearPorPelotaConDelantero: unDelantero yDefensor: unDefensor

	poseedorDePelota := unDefensor ! !
!QatarOnline methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:47:27'!
pelearPorPelotaConDelantero: unDelantero yDelantero: otroDelantero

! !
!QatarOnline methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 10:44:37'!
pelearPorPelotaConDelantero: unDelantero yMediocampista: unMediocampista

	dado tirar >= 6 ifTrue: [ poseedorDePelota := unMediocampista ]! !
!QatarOnline methodsFor: 'posesion de pelota' stamp: 'HAW 11/30/2022 14:10:08'!
pelearPorPelotaConMediocampista: unMedioCampista yMediocampista: otroMediocampista

	dado tirar >= 7 ifTrue: [
		poseedorDePelota :=  poseedorDePelota = unMedioCampista 
			ifTrue: [ otroMediocampista ]
			ifFalse: [ unMedioCampista ]]! !
!QatarOnline methodsFor: 'initialization' stamp: 'HAW 11/30/2022 14:10:23'!
crearEquipo1

	^ Dictionary new
		at: self crearDefensor put: 2@10;
		at: self crearMediocampista put: 5@10;
		at: self crearDelantero put: self posicionInicialDeDelanteroEquipo1;
		yourself! !
!QatarOnline methodsFor: 'initialization' stamp: 'HAW 11/30/2022 14:10:31'!
crearEquipo2

	^ Dictionary new
		at: self crearDefensor put: 19@10;
		at: self crearMediocampista put: 15@10;
		at: self crearDelantero put: self posicionInicialDeDelanteroEquipo2;
		yourself! !
!QatarOnline methodsFor: 'initialization' stamp: 'HAW 11/30/2022 10:15:02'!
initializeConDado: unDado 
	
	self initializeEquipos.
	
	dado := unDado.
	posicionDePelota := self posicionInicialDePelota.
	poseedorDePelota := self delanteroEquipo1! !
!QatarOnline methodsFor: 'initialization' stamp: 'HAW 11/30/2022 14:10:36'!
initializeEquipos

	equipo1 := self crearEquipo1.
	equipo2 := self crearEquipo2.
	equipos := CircularReadStream on: { equipo1. equipo2 } moving: NullUnit new
	
		! !
!QatarOnline methodsFor: 'creacion de jugadores' stamp: 'HAW 11/30/2022 10:30:02'!
crearDefensor
	
	^Defensor new! !
!QatarOnline methodsFor: 'creacion de jugadores' stamp: 'HAW 11/30/2022 10:30:25'!
crearDelantero
	
	^Delantero new! !
!QatarOnline methodsFor: 'creacion de jugadores' stamp: 'HAW 11/30/2022 10:30:15'!
crearMediocampista
	
	^Mediocampista new! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:11:41'!
defensorDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esDefensor ]! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:11:38'!
defensorEquipo1
	
	^self defensorDe: equipo1! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:11:54'!
defensorEquipo2
	
	^self defensorDe: equipo2! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:12:28'!
delanteroDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esDelantero ]! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:12:26'!
delanteroEquipo1
	
	^self delanteroDe: equipo1! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:12:40'!
delanteroEquipo2
	
	^self delanteroDe: equipo2
	! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:13:19'!
mediocampistaDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esMediocampista ]! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:13:12'!
mediocampistaEquipo1
	
	^self mediocampistaDe: equipo1! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/30/2022 14:13:31'!
mediocampistaEquipo2

	^self mediocampistaDe: equipo2! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/29/2022 17:15:53'!
posicionDe: unJugador

	^equipo1 
		at: unJugador 
		ifAbsent: [ 
			equipo2 
				at: unJugador
				ifAbsent: [self error: self jugadorInvalidErrorDescription ]]! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/29/2022 17:20:44'!
posicionInicialDeDelanteroEquipo1
	
	^10@10! !
!QatarOnline methodsFor: 'jugadores' stamp: 'HAW 11/29/2022 17:32:17'!
posicionInicialDeDelanteroEquipo2
	
	^11@10! !
!QatarOnline methodsFor: 'mover' stamp: 'HAW 11/30/2022 11:12:38'!
afectar: unEjeDePosicionOrigen llendoA: unEjeDePosicionDestino 
	
	| delta nuevoEje tiro |
	
	tiro := dado tirar.
	delta := (unEjeDePosicionDestino - unEjeDePosicionOrigen) * tiro / 10.
	nuevoEje := unEjeDePosicionOrigen + delta asInteger.
	
	^nuevoEje! !
!QatarOnline methodsFor: 'mover' stamp: 'HAW 11/30/2022 10:24:55'!
afectarPosicion: posicionActual llendoA: posicionDestino
	
	| nuevoX nuevoY |
	
	nuevoX := self afectar: posicionActual x llendoA: posicionDestino x.
	nuevoY := self afectar: posicionActual y llendoA: posicionDestino y.
	
	^nuevoX @ nuevoY.
	! !
!QatarOnline methodsFor: 'mover' stamp: 'HAW 11/30/2022 14:14:50'!
assertEsPuntoEntero: posicionDestino

	^ posicionDestino isIntegerPoint ifFalse: [ self error: self posicionInvalidaErrorDescription ]! !
!QatarOnline methodsFor: 'mover' stamp: 'HAW 11/30/2022 14:14:37'!
assertEstaEnTablero: posicionDestino

	^ (posicionDestino between: 1@1 and: 20@20) ifFalse: [ self error: self posicionInvalidaErrorDescription ]! !
!QatarOnline methodsFor: 'mover' stamp: 'HAW 11/30/2022 14:21:28'!
con: unJugador desde: posicionActual a: posicionDestino hacer: unBloque
	
	| posicionDestinoReal |
	
	self assertEstaEnTablero: posicionDestino.
	self assertEsPuntoEntero: posicionDestino.
	(self equipoActual includesKey: unJugador) ifFalse: [ self error: self jugadorInvalidErrorDescription ].
	
	posicionDestinoReal := self afectarPosicion: posicionActual llendoA: posicionDestino.
	
	unBloque value: posicionDestinoReal.
	
	self pasarAProximoEquipo
	! !
!QatarOnline methodsFor: 'mover' stamp: 'HAW 11/30/2022 14:19:08'!
jugadoresConPelota

	| jugadoresConPelota |
	
	jugadoresConPelota := OrderedCollection withAll: (self jugadoresConPelotaDe: equipo1).
	jugadoresConPelota addAll: (self jugadoresConPelotaDe: equipo2).
	
	^jugadoresConPelota! !
!QatarOnline methodsFor: 'mover' stamp: 'HAW 11/30/2022 14:18:36'!
jugadoresConPelotaDe: unEquipo

	^ (unEquipo select: [:unaPosicion | unaPosicion = posicionDePelota ]) keys! !
!QatarOnline methodsFor: 'mover' stamp: 'HAW 11/30/2022 14:23:16'!
mover: jugadorAMover a: posicionDestino 
	
	| jugadoresConPelota |
	
	self con: jugadorAMover desde: (self posicionDe: jugadorAMover) a: posicionDestino hacer: [ :posicionDestinoReal |
		self equipoActual at: jugadorAMover put: posicionDestinoReal.
		(self poseedorDePelotaEs: jugadorAMover) ifTrue: [ posicionDePelota := posicionDestinoReal ].
		posicionDePelota = posicionDestinoReal ifTrue: [
			jugadoresConPelota := self jugadoresConPelota.
			jugadoresConPelota size = 2 ifTrue: [ jugadoresConPelota first pelearPorPelotaCon: jugadoresConPelota second en: self ]]]! !
!QatarOnline methodsFor: 'equipo' stamp: 'HAW 11/29/2022 17:33:06'!
equipoActual

	^ equipos current! !
!QatarOnline methodsFor: 'equipo' stamp: 'HAW 11/29/2022 17:34:05'!
pasarAProximoEquipo
	
	equipos next! !
!QatarOnline methodsFor: 'pelota' stamp: 'HAW 11/30/2022 12:50:54'!
estaLaPelotaLibre
	
	^poseedorDePelota isNil! !
!QatarOnline methodsFor: 'pelota' stamp: 'HAW 11/30/2022 14:24:16'!
pasarPelotaA: posicionDestino 
	
	| jugadoresConPelota |
	
	self con: poseedorDePelota desde: posicionDePelota a: posicionDestino hacer: [ :posicionDestinoReal |
		posicionDePelota := posicionDestinoReal.
		jugadoresConPelota := self jugadoresConPelota.
		jugadoresConPelota isEmpty 
			ifTrue: [ poseedorDePelota := nil ]
			ifFalse: [ poseedorDePelota := jugadoresConPelota first ]]! !
!QatarOnline methodsFor: 'pelota' stamp: 'HAW 11/30/2022 10:15:25'!
poseedorDePelotaEs: unJugador

	^poseedorDePelota = unJugador ! !
!QatarOnline methodsFor: 'pelota' stamp: 'HAW 11/30/2022 10:13:54'!
posicionDePelota
	
	^posicionDePelota! !
!QatarOnline methodsFor: 'pelota' stamp: 'HAW 11/30/2022 10:13:43'!
posicionInicialDePelota
	
	^10@10! !
!QatarOnline methodsFor: 'descripciones de error' stamp: 'HAW 11/29/2022 17:15:31'!
jugadorInvalidErrorDescription
	
	^'Jugador inválido'! !
!QatarOnline methodsFor: 'descripciones de error' stamp: 'HAW 11/29/2022 17:20:35'!
posicionInvalidaErrorDescription
	
	^'Posición inválida'! !

!classDefinition: 'QatarOnline class' category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:20'!
QatarOnline class
	instanceVariableNames: ''!

!classDefinition: 'QatarOnline class' category: 'ISW1-2022-2C-2doParcial' stamp: 'ms 7/3/2023 00:10:20'!
QatarOnline class
	instanceVariableNames: ''!
!QatarOnline class methodsFor: 'instance creation' stamp: 'HAW 11/30/2022 09:54:56'!
conDado: unDado 
	
	^self new initializeConDado: unDado ! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639850 overrides: 50639825!
esDefensor

	^true! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639868 overrides: 50639813!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	^unJuego pelearPorPelotaConDelantero: unDelantero yDefensor: self! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639854 overrides: 50639802!
pelearPorPelotaCon: unJugador en: unJuego

	unJugador pelearPorPelotaConDefensor: self en: unJuego ! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639875 overrides: 50639819!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	unJuego pelearPorPelotaConDefensor: self yMediocampista: unMediocampista ! !
!Defensor methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639861 overrides: 50639807!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	unJuego pelearPorPelotaConDefensor: unDefensor yDefensor: self
! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639915 overrides: 50639813!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	unJuego pelearPorPelotaConDelantero: unDelantero yDelantero: self! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639901 overrides: 50639802!
pelearPorPelotaCon: otroJugador en: unJuego

	^otroJugador pelearPorPelotaConDelantero: self en: unJuego! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639922 overrides: 50639819!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	unJuego pelearPorPelotaConDelantero: self yMediocampista: unMediocampista ! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639908 overrides: 50639807!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	unJuego pelearPorPelotaConDelantero: self yDefensor: unDefensor ! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639897 overrides: 50639828!
esDelantero
	
	^true! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639825!
esDefensor
	
	^false! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639813!
pelearPorPelotaConDelantero: unDelantero en: unJuego
	
	self subclassResponsibility ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639802!
pelearPorPelotaCon: otraJugador en: unJuego

	self subclassResponsibility ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639819!
pelearPorPelotaConMediocampista: unMediocampista en: unJuego

	self subclassResponsibility ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639831!
esMediocampista
	
	^false! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639807!
pelearPorPelotaConDefensor: unDefensor en: unJuego 

	self subclassResponsibility ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639828!
esDelantero
	
	^false! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639965 overrides: 50640377!
pelearPorPelotaConDelantero: unDelantero en: unJuego

	unJuego pelearPorPelotaConDelantero: unDelantero yMediocampista: self! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639950 overrides: 50640383!
pelearPorPelotaCon: unJugador en: unJuego

	unJugador pelearPorPelotaConMediocampista: self en: unJuego ! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639945 overrides: 50640395!
esMediocampista

	^true! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639973 overrides: 50640389!
pelearPorPelotaConMediocampista: unMedioCampista en: unJuego 

	unJuego pelearPorPelotaConMediocampista: unMedioCampista yMediocampista: self
! !
!Mediocampista methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50639957 overrides: 50640399!
pelearPorPelotaConDefensor: unDefensor en: unJuego

	unJuego pelearPorPelotaConDefensor: unDefensor yMediocampista: self! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640168!
assertEsPuntoEntero: posicionDestino

	^ posicionDestino isIntegerPoint ifFalse: [ self error: self posicionInvalidaErrorDescription ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640199!
jugadoresConPelota

	| jugadoresConPelota |
	
	jugadoresConPelota := OrderedCollection withAll: (self jugadoresConPelotaDe: equipo1).
	jugadoresConPelota addAll: (self jugadoresConPelotaDe: equipo2).
	
	^jugadoresConPelota! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640240!
pasarAProximoEquipo
	
	equipos next! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640244!
estaLaPelotaLibre
	
	^poseedorDePelota isNil! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640067!
initializeEquipos

	equipo1 := self crearEquipo1.
	equipo2 := self crearEquipo2.
	equipos := CircularReadStream on: { equipo1. equipo2 } moving: NullUnit new
	
		! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640114!
mediocampistaDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esMediocampista ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640215!
mover: jugadorAMover a: posicionDestino 
	
	| jugadoresConPelota |
	
	self con: jugadorAMover desde: (self posicionDe: jugadorAMover) a: posicionDestino hacer: [ :posicionDestinoReal |
		self equipoActual at: jugadorAMover put: posicionDestinoReal.
		(self poseedorDePelotaEs: jugadorAMover) ifTrue: [ posicionDePelota := posicionDestinoReal ].
		posicionDePelota = posicionDestinoReal ifTrue: [
			jugadoresConPelota := self jugadoresConPelota.
			jugadoresConPelota size = 2 ifTrue: [ jugadoresConPelota first pelearPorPelotaCon: jugadoresConPelota second en: self ]]]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640041!
crearEquipo1

	^ Dictionary new
		at: self crearDefensor put: 2@10;
		at: self crearMediocampista put: 5@10;
		at: self crearDelantero put: self posicionInicialDeDelanteroEquipo1;
		yourself! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640157!
afectarPosicion: posicionActual llendoA: posicionDestino
	
	| nuevoX nuevoY |
	
	nuevoX := self afectar: posicionActual x llendoA: posicionDestino x.
	nuevoY := self afectar: posicionActual y llendoA: posicionDestino y.
	
	^nuevoX @ nuevoY.
	! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640268!
posicionDePelota
	
	^posicionDePelota! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640276!
jugadorInvalidErrorDescription
	
	^'Jugador inválido'! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640083!
crearMediocampista
	
	^Mediocampista new! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640236!
equipoActual

	^ equipos current! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640263!
poseedorDePelotaEs: unJugador

	^poseedorDePelota = unJugador ! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640125!
mediocampistaEquipo2

	^self mediocampistaDe: equipo2! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640106!
delanteroEquipo1
	
	^self delanteroDe: equipo1! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640031!
pelearPorPelotaConMediocampista: unMedioCampista yMediocampista: otroMediocampista

	dado tirar >= 7 ifTrue: [
		poseedorDePelota :=  poseedorDePelota = unMedioCampista 
			ifTrue: [ otroMediocampista ]
			ifFalse: [ unMedioCampista ]]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:25' prior: 50640130!
posicionDe: unJugador

	^equipo1 
		at: unJugador 
		ifAbsent: [ 
			equipo2 
				at: unJugador
				ifAbsent: [self error: self jugadorInvalidErrorDescription ]]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640138!
posicionInicialDeDelanteroEquipo1
	
	^10@10! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640281!
posicionInvalidaErrorDescription
	
	^'Posición inválida'! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640100!
delanteroDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esDelantero ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640248!
pasarPelotaA: posicionDestino 
	
	| jugadoresConPelota |
	
	self con: poseedorDePelota desde: posicionDePelota a: posicionDestino hacer: [ :posicionDestinoReal |
		posicionDePelota := posicionDestinoReal.
		jugadoresConPelota := self jugadoresConPelota.
		jugadoresConPelota isEmpty 
			ifTrue: [ poseedorDePelota := nil ]
			ifFalse: [ poseedorDePelota := jugadoresConPelota first ]]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640175!
assertEstaEnTablero: posicionDestino

	^ (posicionDestino between: 1@1 and: 20@20) ifFalse: [ self error: self posicionInvalidaErrorDescription ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640059!
initializeConDado: unDado 
	
	self initializeEquipos.
	
	dado := unDado.
	posicionDePelota := self posicionInicialDePelota.
	poseedorDePelota := self delanteroEquipo1! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640209!
jugadoresConPelotaDe: unEquipo

	^ (unEquipo select: [:unaPosicion | unaPosicion = posicionDePelota ]) keys! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640272!
posicionInicialDePelota
	
	^10@10! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640110!
delanteroEquipo2
	
	^self delanteroDe: equipo2
	! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640075!
crearDefensor
	
	^Defensor new! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640142!
posicionInicialDeDelanteroEquipo2
	
	^11@10! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640146!
afectar: unEjeDePosicionOrigen llendoA: unEjeDePosicionDestino 
	
	| delta nuevoEje tiro |
	
	tiro := dado tirar.
	delta := (unEjeDePosicionDestino - unEjeDePosicionOrigen) * tiro / 10.
	nuevoEje := unEjeDePosicionOrigen + delta asInteger.
	
	^nuevoEje! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640182!
con: unJugador desde: posicionActual a: posicionDestino hacer: unBloque
	
	| posicionDestinoReal |
	
	self assertEstaEnTablero: posicionDestino.
	self assertEsPuntoEntero: posicionDestino.
	(self equipoActual includesKey: unJugador) ifFalse: [ self error: self jugadorInvalidErrorDescription ].
	
	posicionDestinoReal := self afectarPosicion: posicionActual llendoA: posicionDestino.
	
	unBloque value: posicionDestinoReal.
	
	self pasarAProximoEquipo
	! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640013!
pelearPorPelotaConDelantero: unDelantero yDefensor: unDefensor

	poseedorDePelota := unDefensor ! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640019!
pelearPorPelotaConDelantero: unDelantero yDelantero: otroDelantero

! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640000!
pelearPorPelotaConDefensor: unDefensor yDefensor: otroDefensor

	! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640079!
crearDelantero
	
	^Delantero new! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640005!
pelearPorPelotaConDefensor: unDefensor yMediocampista: unMediocampista

	poseedorDePelota := dado tirar >= 8 
		ifTrue: [ unMediocampista ]
		ifFalse: [ unDefensor ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640050!
crearEquipo2

	^ Dictionary new
		at: self crearDefensor put: 19@10;
		at: self crearMediocampista put: 15@10;
		at: self crearDelantero put: self posicionInicialDeDelanteroEquipo2;
		yourself! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640120!
mediocampistaEquipo1
	
	^self mediocampistaDe: equipo1! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640087!
defensorDe: unEquipo

	^ unEquipo keys detect: [:unJugador | unJugador esDefensor ]! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640092!
defensorEquipo1
	
	^self defensorDe: equipo1! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640096!
defensorEquipo2
	
	^self defensorDe: equipo2! !
!QatarOnline methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640024!
pelearPorPelotaConDelantero: unDelantero yMediocampista: unMediocampista

	dado tirar >= 6 ifTrue: [ poseedorDePelota := unMediocampista ]! !
!QatarOnline class methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50640296!
conDado: unDado 
	
	^self new initializeConDado: unDado ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639621!
test22MediocampistaVsMediocampistaGanaNoPoseedorConDadoDesde7

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 7).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639405!
test07LosJugadoresMuevenAlternadamentePorEquipo

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10).
	
	juego mover: juego delanteroEquipo1 a: 12@12.
	juego mover: juego delanteroEquipo2 a: 9@9.
	juego mover: juego delanteroEquipo1 a: 14@14.
	
	self assert: 14@14 equals: (juego posicionDe: juego delanteroEquipo1).
	self assert: 9@9 equals: (juego posicionDe: juego delanteroEquipo2).! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639672!
test25PosicionDestinoDePelotaDebeSerUnPuntoEntero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertPasarAPosicion: 1.1@1 invalidaEn: juego.
	self assertPasarAPosicion: 1@2.1 invalidaEn: juego.
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639345!
test02SePuedeConocerLaPosicionDeJugadoresDeLosDosEquipos

	| juego |
	
	juego := self crearJuego: #().
	
	self assert: 10@10 equals: (juego posicionDe: juego delanteroEquipo1).	
	self assert: 11@10 equals: (juego posicionDe: juego delanteroEquipo2).! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639490!
test14DelanteroVsDefensorGanaDefensro

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo2) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639730!
test30PasarLaPelotaEnEjeYEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(10 5).
	
	juego pasarPelotaA: 20@20.
	
	self assert: 20@15 equals: juego posicionDePelota 
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639778!
crearJuego: unosTirosDeDado

	dado := ReadStream on: unosTirosDeDado.
	
	^ QatarOnline conDado: self! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639583!
test20DefensorVsMediocampistaGanaMediocampistaConDadoMayorA7

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10 8).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639739!
test31PosicionDestinoDePelotaDebeSerEntera

	| juego |
	
	juego := self crearJuego: #(1 1).
	
	juego pasarPelotaA: 15@15.
	
	self assert: 10@10 equals: juego posicionDePelota ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639517!
test16DelanteroVsMediocampistaGanaMediocampistaConDadoDesde6

	| juego |
	
	juego := self crearJuego: #(10 10 6).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo2) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo2) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639659!
test24NoSePuedePasarLaPelotaFueraDelTablero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertPasarAPosicion: 0@1 invalidaEn: juego.
	self assertPasarAPosicion: 1@0 invalidaEn: juego.
	self assertPasarAPosicion: 21@1 invalidaEn: juego.
	self assertPasarAPosicion: 20@21 invalidaEn: juego.
	
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639379!
test05PosicionDestinoDeMovimientoDebeSerUnPuntoEntero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertMueveAPosicion: 1.1@1 invalidaEn: juego.
	self assertMueveAPosicion: 1@2.1 invalidaEn: juego.
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639711!
test28PasarLaPelotaALugarSinJugadorHaceQueNoHayaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego pasarPelotaA: 2@2.
	
	self assert: 2@2 equals: juego posicionDePelota.
	self assert: juego estaLaPelotaLibre! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639465!
test12LaPelotaSeMueveConElJugadorQueLaPosee

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: 15@15.
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639367!
test04NoSePuedeMoverFueraDelTablero

	| juego |
	
	juego := self crearJuego: #().
	
	self assertMueveAPosicion: 0@1 invalidaEn: juego.
	self assertMueveAPosicion: 1@0 invalidaEn: juego.
	self assertMueveAPosicion: 21@1 invalidaEn: juego.
	self assertMueveAPosicion: 20@21 invalidaEn: juego.
	
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639532!
test17DelanteroVsDelanteroGanaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego delanteroEquipo2).
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639602!
test21MediocampistaVsMediocampistaGanaPoseedorConDadoHasta6

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 6).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego mediocampistaEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego mediocampistaEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639335!
test01UnJugadorSeMueveALaPosicionDestino

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego delanteroEquipo1 a: 12@12.
	
	self assert: 12@12 equals: (juego posicionDe: juego delanteroEquipo1).! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639764!
assertPasarAPosicion: posicionDestino invalidaEn: juego

	^ self
		should: [ juego pasarPelotaA: posicionDestino ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: juego posicionInvalidaErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDePelota equals: juego posicionDePelota ]! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639421!
test08MovientoEnEjeXEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(5 10).
	
	juego mover: juego delanteroEquipo1 a: 20@20.
	
	self assert: 15@20 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639389!
test06EmpiezaJugandoEquipo1

	| juego |
	
	juego := self crearJuego: #().
	
	self 
		should: [juego mover: juego delanteroEquipo2 a: 9@9 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: juego jugadorInvalidErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDeDelanteroEquipo2 equals: (juego posicionDe: juego delanteroEquipo2) ].
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639503!
test15DelanteroVsMediocampistaGanaDelanteroConDadoHasta5

	| juego |
	
	juego := self crearJuego: #(10 10 5).
	
	juego mover: juego delanteroEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639697!
test27PasarLaPelotaAOtroJugadorCambiaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego pasarPelotaA: (juego posicionDe: juego defensorEquipo1).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1).
	self deny: juego estaLaPelotaLibre ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639546!
test18DefensorVsDefensorGanaPoseedorDePelota

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639681!
test26SoloPuedePasarJugadorDelEquipoActual

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego defensorEquipo1 a: 2@2.
	
	self 
		should: [juego pasarPelotaA: 9@9 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: juego jugadorInvalidErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDePelota equals: juego posicionDePelota ].
		! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639431!
test09MovientoEnEjeYEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(10 5).
	
	juego mover: juego delanteroEquipo1 a: 20@20.
	
	self assert: 20@15 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639640!
test23MediocampistaVsDefensorEsIgualADefensorVsMediocampista

	| juego |
	
	juego := self crearJuego: #(10 10 6 10 10 10 10 7).
	
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego mediocampistaEquipo1 a: (juego posicionDe: juego defensorEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo2 ) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo2 ) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639451!
test11LaPelotaEmpiezaEn10_10YPoseidaPorDelanteroEquipo1

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	self assert: juego posicionInicialDePelota equals: juego posicionDePelota.
	self deny: 0@0 = juego posicionDePelota.
	
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1).
	self deny: (juego poseedorDePelotaEs: juego delanteroEquipo2).
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639748!
assertMueveAPosicion: posicionDestino invalidaEn: juego

	^ self
		should: [ juego mover: juego delanteroEquipo1 a: posicionDestino ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: juego posicionInvalidaErrorDescription equals: anError messageText.
			self assert: juego posicionInicialDeDelanteroEquipo1 equals: (juego posicionDe: juego delanteroEquipo1) ]! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639477!
test13LaPelotaNoSeMueveConUnJugadorQueNoLaPosee

	| juego |
	
	juego := self crearJuego: #(10 10).
	
	juego mover: juego defensorEquipo1 a: 15@15.
	
	self assert: (juego posicionDe: juego delanteroEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego delanteroEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639564!
test19DefensorVsMediocampistaGanaDefensorConDadoHasta7

	| juego |
	
	juego := self crearJuego: #(10 10 10 10 10 10 7).
	
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego delanteroEquipo1).
	juego mover: juego delanteroEquipo2 a: 1@1.
	juego mover: juego defensorEquipo1 a: (juego posicionDe: juego mediocampistaEquipo2).
	
	self assert: (juego posicionDe: juego defensorEquipo1) equals: juego posicionDePelota.
	self assert: (juego poseedorDePelotaEs: juego defensorEquipo1) ! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639721!
test29PasarLaPelotaEnEjeXEsAfectadoPorDado

	| juego |
	
	juego := self crearJuego: #(5 10).
	
	juego pasarPelotaA: 20@20.
	
	self assert: 15@20 equals: juego posicionDePelota 
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639441!
test10PosicionDestinoDebeSerEntera

	| juego |
	
	juego := self crearJuego: #(1 1).
	
	juego mover: juego delanteroEquipo1 a: 15@15.
	
	self assert: 10@10 equals: (juego posicionDe: juego delanteroEquipo1).
	! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639784!
tirar
	
	^dado next! !
!QatarOnlineTest methodsFor: 'as yet unclassified' stamp: 'ms 7/2/2023 20:06:26' prior: 50639356!
test03NoSePuedeConsultarPosicionDeAlgoQueNoEsJugador

	| juego |
	
	juego := self crearJuego: #().
	
	self 
		should: [ juego posicionDe: 'x' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: juego jugadorInvalidErrorDescription! !

!classRemoval: #QatarOnline stamp: 'ms 7/3/2023 00:10:21'!
Object subclass: #QatarOnline
	instanceVariableNames: 'equipo1 equipo2 equipos dado posicionDePelota poseedorDePelota'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #Mediocampista stamp: 'ms 7/3/2023 00:10:22'!
Jugador subclass: #Mediocampista
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #Delantero stamp: 'ms 7/3/2023 00:10:22'!
Jugador subclass: #Delantero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #Defensor stamp: 'ms 7/3/2023 00:10:23'!
Jugador subclass: #Defensor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #Jugador stamp: 'ms 7/3/2023 00:10:23'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classRemoval: #QatarOnlineTest stamp: 'ms 7/3/2023 00:10:24'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'dado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-2doParcial'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
TestCase subclass: #ImportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
TestCase subclass: #ImportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NR 6/22/2023 15:23:45'!
test01Import

	Customer importCustomers ! !

!classDefinition: #Address category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
province

	^province! !
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetName

	^streetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
town

	^town! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
town: aTown

	town := aTown! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode

	^zipCode! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode: aZipCode

	zipCode := aZipCode! !

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
addresses

	^ addresses! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
firstName

	^firstName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
lastName

	^lastName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationType

	^identificationType ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !

!classDefinition: 'Customer class' category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
Customer class
	instanceVariableNames: ''!

!classDefinition: 'Customer class' category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
Customer class
	instanceVariableNames: ''!
!Customer class methodsFor: 'importing' stamp: 'NR 6/22/2023 15:24:06'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:24'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 00:19:29'!
beginTransaction

	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 19:17:36'!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'closing' stamp: 'HAW 5/22/2022 00:19:29'!
close

	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 19:29:06'!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29'!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'id' stamp: 'HAW 5/22/2022 00:19:29'!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 5/22/2022 00:19:29'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:25'!
DataBaseSession class
	instanceVariableNames: ''!

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:25'!
DataBaseSession class
	instanceVariableNames: ''!
!DataBaseSession class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 00:19:29'!
for: aConfiguration

	^self new initializeFor: aConfiguration! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:25'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:25'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:09:11'!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:58:00'!
test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: session. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
test03DoesNotImportRecordsStartingWithCButMoreCharacters

	self
		shouldFailImporting: self invalidCustomerRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:49:03'!
test04DoesNotImportRecordsStartingWithAButMoreCharacters

	self
		shouldFailImporting: self invalidAddressRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:49:36'!
test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:51:14'!
test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
test07CanNotImportCustomerRecordWithLessThanFiveFields

	self
		shouldFailImporting: self customerRecordWithLessThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
test08CanNotImportCustomerRecordWithMoreThanFiveFields

	self
		shouldFailImporting: self customerRecordWithMoreThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 20:01:43'!
test09CannotImportEmptyLine

	self
		shouldFailImporting: self emptyLine
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:22:05'!
assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: aStreetName equals: importedAddress streetName.
	self assert: aNumber equals: importedAddress streetNumber.
	self assert: aTown equals: importedAddress town.
	self assert: aZipCode equals: importedAddress zipCode.
	self assert: aProvince equals: importedAddress province.

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:27:57'!
assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := self customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: aFirstName equals: importedCustomer firstName.
	self assert: aLastName equals: importedCustomer lastName.
	self assert: anIdType equals: importedCustomer identificationType.
	self assert: anIdNumber equals: importedCustomer identificationNumber.

	^importedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:45:10'!
assertImportedOneCustomerWithoutAddress

	| importedCustomer |

	self assert: 1 equals: self numberOfCustomers.
	importedCustomer := self customerWithIdentificationType: 'D' number: '22333444'.
	self assert: importedCustomer isAddressesEmpty
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:24:40'!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:28:45'!
assertJuanPerezWasImportedCorrectly

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'.
	self assertAddressOf: importedCustomer at: 'Alem' hasNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:56:58'!
assertNoCustomerWasImported

	^ self assert: 0 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:28:05'!
assertPepeSanchezWasImportedCorrecty

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.


	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:47:40'!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'HAW 5/22/2022 00:27:50' overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'HAW 5/22/2022 00:28:23' overrides: 16961402!
tearDown

	session commit.
	session close.
	! !
!ImportTest methodsFor: 'customer' stamp: 'HAW 5/22/2022 18:14:22'!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:24:40'!
numberOfCustomers

	^ (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:41:20'!
addressRecordWithLessThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:51:35'!
addressRecordWithMoreThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,x'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:14:13'!
addressWithoutCustomerData

	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:53:41'!
customerRecordWithLessThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:55:59'!
customerRecordWithMoreThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444,x'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 20:02:57'!
emptyLine

	^ReadStream on: '
'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:34:25'!
invalidAddressRecordStartData

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:22:55'!
invalidCustomerRecordStartData

	^ReadStream on: 'CC,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 18:08:08'!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!classDefinition: #Address category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641307!
province

	^province! !
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641310!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 17:55:46'!
isAt: aStreetName

	^streetName = aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641314!
streetName

	^streetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641317!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641321!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641325!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641329!
town

	^town! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641332!
town: aTown

	town := aTown! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641336!
zipCode

	^zipCode! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641339!
zipCode: aZipCode

	zipCode := aZipCode! !

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641361!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 17:55:17'!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641365!
addresses

	^ addresses! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 19:38:32'!
isAddressesEmpty

	^addresses isEmpty ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641368!
firstName

	^firstName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641371!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641375!
lastName

	^lastName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641378!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641382!
identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641386!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641392!
identificationType

	^identificationType ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641396!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641402 overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'initialization' stamp: 'HAW 5/22/2022 18:06:47'!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'HAW 5/22/2022 18:48:58' overrides: 16902254!
value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:59:39'!
assertValidCustomerRecord

	^ record size ~= 5 ifTrue: [ self error: self class invalidCustomerRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:59:39'!
importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:23:55'!
isCustomerRecord

	^ record first = 'C'! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:58:41'!
assertCustomerWasImported

	^ newCustomer ifNil: [ self error: self class canNotImportAddressWithoutCustomerErrorDescription ]! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:59:12'!
assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:59:12'!
importAddress

	| newAddress |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:37:45'!
isAddressRecord

	^ record first = 'A'! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 20:04:35'!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 18:47:26'!
createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 18:49:33'!
hasLineToImport

	line := readStream nextLine.
	^line notNil! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 20:04:06'!
importRecord

	self assertRecordNotEmpty.

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !

!classDefinition: 'CustomerImporter class' category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
CustomerImporter class
	instanceVariableNames: ''!

!classDefinition: 'CustomerImporter class' category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
CustomerImporter class
	instanceVariableNames: ''!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 18:06:47'!
from: aReadStream into: aSession
	^self new initializeFrom: aReadStream into: aSession! !
!CustomerImporter class methodsFor: 'importing' stamp: 'HAW 5/22/2022 18:11:27'!
valueFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) value! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:13:48'!
canNotImportAddressWithoutCustomerErrorDescription

	^'Cannot import address without customer'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:41:39'!
invalidAddressRecordErrorDescription

	^'Address record has to have six fields'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:53:56'!
invalidCustomerRecordErrorDescription

	^'Invalid Customer record'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:24:11'!
invalidRecordTypeErrorDescription

	^'Invalid record type'! !

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641474!
beginTransaction

	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 19:17:36' prior: 50641478!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'closing' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641484!
close

	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641488!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641494!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 19:29:06' prior: 50641499!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641504!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641511!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'id' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641517!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641521!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06' prior: 50641532!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06' prior: 50641538!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
DataBaseSession class
	instanceVariableNames: ''!

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:10:26'!
DataBaseSession class
	instanceVariableNames: ''!
!DataBaseSession class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 00:19:29' prior: 50641553!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:27:52'!
session

	^ session! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:27:52' prior: 50641772 overrides: 16961402!
tearDown

	self session commit.
	session close.
	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:27:52' prior: 50642253 overrides: 16961402!
tearDown

	self session commit.
	self session close.
	! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:27:52' prior: 50641776!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'tests' stamp: 'ms 7/2/2023 21:27:52' prior: 50641572!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: self session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:28:01' prior: 50642248!
session

	^ session! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:28:01' prior: 50642259 overrides: 16961402!
tearDown

	self sessionssion commit.
	self session close.
	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:28:01' prior: 50642290 overrides: 16961402!
tearDown

	self sessionssion commit.
	self sessionssion close.
	! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:28:01' prior: 50642264!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self sessionssion
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'tests' stamp: 'ms 7/2/2023 21:28:01' prior: 50642274!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: self sessionssion..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:28:13' prior: 50642301!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/2/2023 21:28:32' prior: 50641786!
numberOfCustomers

	^ (self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'assertions' stamp: 'ms 7/2/2023 21:28:36' prior: 50641751!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: self session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'ms 7/2/2023 21:28:42' prior: 50641582!
test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: self session. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:29:05' prior: 50641765 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	self  session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/2/2023 21:29:52' prior: 50642296 overrides: 16961402!
tearDown

	self session commit.
	self session close.
	! !
!ImportTest methodsFor: 'tests' stamp: 'ms 7/2/2023 21:30:06' prior: 50642311!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: self session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

TestCase subclass: #ImportTest
	instanceVariableNames: 'session customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:12:59'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #PersistentCustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:13:39'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:13:57' prior: 50642363 overrides: 16961394!
setUp
	
	customerSystem := PersistentCustomerSystem new.

	session := DataBaseSession for: (Array with: Address with: Customer).
	self  session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:15:12' prior: 50642412 overrides: 16961394!
setUp
	
	customerSystem := PersistentCustomerSystem new.

	customerSystem start.
	
	self  session beginTransaction.
! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641859!
province

	^province! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641901!
zipCode: aZipCode

	zipCode := aZipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641893!
town: aTown

	town := aTown! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641863!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641872!
streetName

	^streetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641885!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641876!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641890!
town

	^town! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641897!
zipCode

	^zipCode! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641881!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641867!
isAt: aStreetName

	^streetName = aStreetName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641928!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641942!
firstName

	^firstName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641982 overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641946!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641964!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641954!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641970!
identificationType

	^identificationType ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641975!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641924!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641935!
addresses

	^ addresses! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641938!
isAddressesEmpty

	^addresses isEmpty ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641950!
lastName

	^lastName ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641959!
identificationNumber

	^identificationNumber ! !
!Customer class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50641416!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642072!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642054!
importAddress

	| newAddress |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642036!
isCustomerRecord

	^ record first = 'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642011 overrides: 16902254!
value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642024!
importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642040!
assertCustomerWasImported

	^ newCustomer ifNil: [ self error: self class canNotImportAddressWithoutCustomerErrorDescription ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642005!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642047!
assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642017!
assertValidCustomerRecord

	^ record size ~= 5 ifTrue: [ self error: self class invalidCustomerRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642084!
hasLineToImport

	line := readStream nextLine.
	^line notNil! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642089!
importRecord

	self assertRecordNotEmpty.

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642068!
isAddressRecord

	^ record first = 'A'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642079!
createRecord

	^ record := line findTokens: $,! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642109!
from: aReadStream into: aSession
	^self new initializeFrom: aReadStream into: aSession! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642121!
canNotImportAddressWithoutCustomerErrorDescription

	^'Cannot import address without customer'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642133!
invalidCustomerRecordErrorDescription

	^'Invalid Customer record'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642138!
invalidRecordTypeErrorDescription

	^'Invalid record type'! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642115!
valueFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) value! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:21' prior: 50642127!
invalidAddressRecordErrorDescription

	^'Address record has to have six fields'! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642210!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642205!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642171!
close

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642192!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642160!
beginTransaction

	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642181!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642221!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642199!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642227!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642164!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642175!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642186!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642243!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641603!
test04DoesNotImportRecordsStartingWithAButMoreCharacters

	self
		shouldFailImporting: self invalidAddressRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642351!
test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: self session. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641833!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641808!
customerRecordWithLessThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641735!
assertPepeSanchezWasImportedCorrecty

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.


	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641822!
invalidAddressRecordStartData

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642285!
session

	^ session! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641703!
assertImportedOneCustomerWithoutAddress

	| importedCustomer |

	self assert: 1 equals: self numberOfCustomers.
	importedCustomer := self customerWithIdentificationType: 'D' number: '22333444'.
	self assert: importedCustomer isAddressesEmpty
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641803!
addressWithoutCustomerData

	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641614!
test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641818!
emptyLine

	^ReadStream on: '
'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641593!
test03DoesNotImportRecordsStartingWithCButMoreCharacters

	self
		shouldFailImporting: self invalidCustomerRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641646!
test08CanNotImportCustomerRecordWithMoreThanFiveFields

	self
		shouldFailImporting: self customerRecordWithMoreThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642421 overrides: 16961394!
setUp
	
	customerSystem := PersistentCustomerSystem new.

	customerSystem start.
	
	self  session beginTransaction.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641286!
test01Import

	Customer importCustomers ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641797!
addressRecordWithMoreThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,x'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641718!
assertJuanPerezWasImportedCorrectly

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'.
	self assertAddressOf: importedCustomer at: 'Alem' hasNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641813!
customerRecordWithMoreThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444,x'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641791!
addressRecordWithLessThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641684!
assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := self customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: aFirstName equals: importedCustomer firstName.
	self assert: aLastName equals: importedCustomer lastName.
	self assert: anIdType equals: importedCustomer identificationType.
	self assert: anIdNumber equals: importedCustomer identificationNumber.

	^importedCustomer

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641713!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641665!
assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: aStreetName equals: importedAddress streetName.
	self assert: aNumber equals: importedAddress streetNumber.
	self assert: aTown equals: importedAddress town.
	self assert: aZipCode equals: importedAddress zipCode.
	self assert: aProvince equals: importedAddress province.

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641730!
assertNoCustomerWasImported

	^ self assert: 0 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642322!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641828!
invalidCustomerRecordStartData

	^ReadStream on: 'CC,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641656!
test09CannotImportEmptyLine

	self
		shouldFailImporting: self emptyLine
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642370 overrides: 16961402!
tearDown

	self session commit.
	self session close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641625!
test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642332!
numberOfCustomers

	^ (self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642375!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: self session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50642337!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: self session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:15:22' prior: 50641636!
test07CanNotImportCustomerRecordWithLessThanFiveFields

	self
		shouldFailImporting: self customerRecordWithLessThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:15:45'!
start
	self shouldBeImplemented.! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:16:14'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:16:12' prior: 50643111!
start
	session := DataBaseSession for: (Array with: Address with: Customer)! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/3/2023 00:17:52' prior: 50642870!
session

	^customerSystem session! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:18:01'!
session
	self shouldBeImplemented.
	^session! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:18:05' prior: 50643134!
session
	^session! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:18:16'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:18:16'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:18:17'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:18:17'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:18:17'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:18:17'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:18:18'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:18:18'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:18:18'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:18:18'!
PASSED!

TestCase subclass: #ImportTest
	instanceVariableNames: 'customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:18:40'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'customer' stamp: 'ms 7/3/2023 00:20:49' prior: 50643026!
customerWithIdentificationType: anIdType number: anIdNumber

	^ customerSystem customerWithIdentificationType: anIdType number: anIdNumber
	
	"^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne"! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:21:39'!
customerWithIdentificationType: anIdType number: anIdNumber
	
	"^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne"! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:21:43' prior: 50643202!
customerWithIdentificationType: anIdType number: anIdNumber
	
		^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:22:04'!
numberOfCustomers

	^ (self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'customer' stamp: 'ms 7/3/2023 00:22:29' prior: 50643069!
numberOfCustomers

	^ customerSystem numberOfCustomers! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:22:36'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:22:36'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:22:37'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:22:37'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:22:37'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:22:38'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:22:38'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:22:38'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:22:38'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:22:38'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:23:00' prior: 50642930 overrides: 16961394!
setUp
	
	customerSystem := PersistentCustomerSystem new.

	customerSystem start.
	
	customerSystem beginTransaction.
! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:23:12'!
beginTransaction
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:23:19' prior: 50643274!
beginTransaction
	self session beginTransaction! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:23:24' prior: 50643279!
beginTransaction

	self session beginTransaction! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:23:30'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:23:31'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:23:31'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:23:31'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:23:32'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:23:32'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:23:32'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:23:32'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:23:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:23:33'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'ms 7/3/2023 00:25:02' prior: 50643086!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	customerSystem shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock


	! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:25:07'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:25:08'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:25:08'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:25:08'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:25:08'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:25:08'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:25:08'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:25:08'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:25:08'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:25:08'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:25:13'!
ERROR!
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:25:19'!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:25:26' prior: 50643369!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: self session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]! !

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:25:33'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:25:36'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:25:38'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:25:39'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:25:39'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:25:39'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:25:39'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:25:39'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:25:39'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:25:39'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:25:39'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:25:39'!
ERROR!
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:27:01'!
stop

	self session close! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:27:18'!
commit

	self session commit! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:27:46' prior: 50643052 overrides: 16961402!
tearDown

	customerSystem commit.
	customerSystem close.
	! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:27:54'!
close

	self session close! !

!methodRemoval: PersistentCustomerSystem #stop stamp: 'ms 7/3/2023 00:28:00'!
stop

	self session close!

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:28:09'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:28:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:28:09'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:28:09'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:28:09'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:28:09'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:28:10'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:28:10'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:28:10'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:28:10'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:28:23'!
ERROR!
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:28:52' prior: 50643376!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

		self
		should: [ CustomerImporter valueFrom: aReadStream into: self session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:28:57' prior: 50643490!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

		self
		should: [ CustomerImporter valueFrom: aReadStream into: self session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]
		! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:29:13'!
stop

	self session close! !

!methodRemoval: PersistentCustomerSystem #close stamp: 'ms 7/3/2023 00:29:20'!
close

	self session close!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:29:29' prior: 50643440 overrides: 16961402!
tearDown

	customerSystem commit.
	customerSystem stop.
	! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:29:31'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:29:31'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:29:31'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:29:31'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:29:31'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:29:31'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:29:31'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:29:31'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:29:31'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:29:31'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:29:49'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:29:50'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:29:50'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:29:50'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:29:50'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:29:50'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:29:50'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:29:50'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:29:50'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:29:50'!
ERROR!

!methodRemoval: PersistentCustomerSystem #shouldFailImporting:messageText:asserting: stamp: 'ms 7/3/2023 00:30:28'!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

		self
		should: [ CustomerImporter valueFrom: aReadStream into: self session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]
		!

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:30:32'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:30:32'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:30:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:30:33'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:30:33'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:30:33'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:30:33'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:30:33'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:30:33'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:30:33'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'ms 7/3/2023 00:31:01' prior: 50643322!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: self session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:31:03'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:31:03'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:31:03'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:31:04'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:31:04'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:31:04'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:31:05'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:31:05'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:31:05'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:31:05'!
PASSED!
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:33:21'!
persist: aCustomer

	session persist: aCustomer! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem  readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:34:47'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 7/3/2023 00:34:59' prior: 50642642!
initializeFrom: aReadStream into: aSession
	customerSystem  := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'customer' stamp: 'ms 7/3/2023 00:35:34' prior: 50642621!
importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	customerSystem  persist: newCustomer! !
!CustomerImporter methodsFor: 'initialization' stamp: 'ms 7/3/2023 00:35:56' prior: 50643713!
initializeFrom: aReadStream into: aCustomerSystem
	customerSystem  := aCustomerSystem.
	readStream := aReadStream.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'ms 7/3/2023 00:36:17' prior: 50642689!
from: aReadStream into: aCustomerSystem
	^self new initializeFrom: aReadStream into: aCustomerSystem! !
!CustomerImporter class methodsFor: 'importing' stamp: 'ms 7/3/2023 00:36:25' prior: 50642715!
valueFrom: aReadStream into: aCustomerSystem

	^(self from: aReadStream into: aCustomerSystem) value! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:36:40' prior: 50643284!
beginTransaction

	session beginTransaction! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:36:44' prior: 50643435!
commit

	session commit! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:36:48' prior: 50643213!
customerWithIdentificationType: anIdType number: anIdNumber
	
		^ (session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:36:51' prior: 50643223!
numberOfCustomers

	^ (session selectAllOfType: Customer) size! !
!PersistentCustomerSystem methodsFor: 'associating' stamp: 'ms 7/3/2023 00:36:57' prior: 50643518!
stop

	session close! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:36:59'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:36:59'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:37:00'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:37:00'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:37:00'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:37:01'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:37:01'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:37:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:37:01'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:37:01'!
PASSED!

Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:38:02'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:38:28'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #TransistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransistentCustomerSystem category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:39:36'!
Object subclass: #TransistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:40:15' prior: 50643267 overrides: 16961394!
setUp
	
	customerSystem := TransistentCustomerSystem new.


	customerSystem start.
	
	customerSystem beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:40:16' prior: 50643855 overrides: 16961394!
setUp
	
	customerSystem := TransistentCustomerSystem new.

	customerSystem start.
	
	customerSystem beginTransaction.
! !

CustomerSystem subclass: #TransistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransistentCustomerSystem category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:40:43'!
CustomerSystem subclass: #TransistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CustomerSystem subclass: #TransistentCustomerSystem
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransistentCustomerSystem category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:41:11'!
CustomerSystem subclass: #TransistentCustomerSystem
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransistentCustomerSystem methodsFor: 'nil' stamp: 'ms 7/3/2023 00:41:23'!
start

	customers := OrderedCollection new.! !
!TransistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:41:47'!
persist: aNewCustomer 
	
	customers add: aNewCustomer! !
!TransistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:41:54'!
numberOfCustomers
	
	^customers size! !
!TransistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:42:09'!
customerWithIdentificationType: anIdType number: anIdNumber 
	
	^customers detect: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]! !
!TransistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:43:02'!
beginTransaction
	self shouldBeImplemented.! !
!TransistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:43:44' prior: 50643921!
beginTransaction
! !
!TransistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:44:18'!
commit
	
! !
!TransistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:44:20'!
stop
	
! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:44:27'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:44:27'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:44:27'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:44:27'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:44:27'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:44:27'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:44:27'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:44:27'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:44:27'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:44:27'!
ERROR!
!CustomerSystem methodsFor: 'nil' stamp: 'ms 7/3/2023 00:44:52'!
start

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:45:02'!
sstop

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:45:03'!
stop

	self subclassResponsibility! !

!methodRemoval: CustomerSystem #sstop stamp: 'ms 7/3/2023 00:45:06'!
sstop

	self subclassResponsibility!
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:45:11'!
persist: aCustomer

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:45:17'!
commit

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:45:22'!
beginTransaction

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:45:27'!
numberOfCustomers

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:45:32'!
customerWithIdentificationType: anIdType number: anIdNumber

	self subclassResponsibility! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:45:36'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:45:36'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:46:17'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:46:17'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:46:18'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'ms 7/3/2023 00:48:25' prior: 50643075!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: customerSystem .

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:48:26'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:48:26'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:48:26'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:48:26'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:48:26'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:48:26'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:48:26'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:48:26'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:48:26'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:48:26'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:48:26'!
ERROR!

!methodRemoval: PersistentCustomerSystem #session stamp: 'ms 7/3/2023 00:49:24'!
session
	^session!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:50:15'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:50:17'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:50:17'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'ms 7/3/2023 00:50:42' prior: 50642819!
test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: customerSystem. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:50:50'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:50:53'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:50:53'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:50:53'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:50:53'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:50:53'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:50:53'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:50:53'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:50:53'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:50:53'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:50:53'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:51:08'!
ERROR!
!ImportTest methodsFor: 'customer' stamp: 'ms 7/3/2023 00:51:36' prior: 50643189!
customerWithIdentificationType: anIdType number: anIdNumber

	^ customerSystem customerWithIdentificationType: anIdType number: anIdNumber
	! !
!ImportTest methodsFor: 'assertions' stamp: 'ms 7/3/2023 00:51:57' prior: 50643646!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: customerSystem. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !

!testRun: #ImportTest #test01Import stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:52:02'!
PASSED!

!methodRemoval: ImportTest #test01Import stamp: 'ms 7/3/2023 00:52:04'!
test01Import

	Customer importCustomers !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:52:07'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:52:11'!
PASSED!

Object subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:53:24'!
Object subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Enviroment subclass: #DeveloperEnviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DeveloperEnviroment category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:53:47'!
Enviroment subclass: #DeveloperEnviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DeveloperEnviroment methodsFor: 'no messages' stamp: 'ms 7/3/2023 00:54:21'!
createSystem
	
	^TransistentCustomerSystem new start! !
!DeveloperEnviroment methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:54:34'!
isCurrent

	^true.! !

!methodRemoval: DeveloperEnviroment #isCurrent stamp: 'ms 7/3/2023 00:54:54'!
isCurrent

	^true.!
!DeveloperEnviroment class methodsFor: 'nil' stamp: 'ms 7/3/2023 00:54:59'!
isCurrent

	^true.! !

Enviroment subclass: #IntegratorEnviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #IntegratorEnviroment category: 'CustomerImporter' stamp: 'ms 7/3/2023 00:55:15'!
Enviroment subclass: #IntegratorEnviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!IntegratorEnviroment methodsFor: 'nil' stamp: 'ms 7/3/2023 00:55:20'!
createSystem
	
	^PersistentCustomerSystem new start.! !
!TransistentCustomerSystem class methodsFor: 'nil' stamp: 'ms 7/3/2023 00:55:40'!
isCurrent
	^false.! !
!TransistentCustomerSystem class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:55:42' prior: 50644371!
isCurrent

	^false.! !
!Enviroment class methodsFor: 'nil' stamp: 'ms 7/3/2023 00:56:11'!
current
	self subclassesDo: [:subclass | (subclass isCurrent) ifTrue: [^subclass new.].].! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'ms 7/3/2023 00:56:19'!
isCurrent
	self subclassResponsibility.! !
!Enviroment methodsFor: 'nil' stamp: 'ms 7/3/2023 00:56:31'!
createSystem
	
	self subclassResponsibility.! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:56:58' prior: 50643863 overrides: 16961394!
setUp
	
		customerSystem := Enviroment current createSystem.

	
	customerSystem beginTransaction.
! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:56:59'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:56:59'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:56:59'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:56:59'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:56:59'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:56:59'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:56:59'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:56:59'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:56:59'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ms 7/3/2023 00:57:03' prior: 50644394 overrides: 16961394!
setUp
	
	customerSystem := Enviroment current createSystem.
	customerSystem beginTransaction.
! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:57:04'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:57:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:57:09'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:57:09'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:57:09'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:57:09'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:57:09'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:57:09'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:57:09'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:57:10'!
PASSED!
!IntegratorEnviroment class methodsFor: 'nil' stamp: 'ms 7/3/2023 00:58:23' overrides: 50644385!
isCurrent

	^true.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:58:27'!
PASSED!

!methodRemoval: TransistentCustomerSystem class #isCurrent stamp: 'ms 7/3/2023 00:59:28'!
isCurrent

	^false.!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'ms 7/3/2023 00:59:31'!
PASSED!

----SNAPSHOT----(3 July 2023 01:06:21) CuisUniversity-5832.image priorSource: 9735987!

----SNAPSHOT----(3 July 2023 01:06:27) CuisUniversity-5832.image priorSource: 10013431!