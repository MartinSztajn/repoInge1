

----STARTUP---- (15 May 2023 19:12:34) as C:\windows64\CuisUniversity-5706.image!


----End fileIn of C:\windows64\repoProfes\2023-1c\06-Portfolio1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:14:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:14:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:14:08'!
FAILURE!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864270 overrides: 16902254!
value 



	self subclassResponsibility ! !
!AccountTransaction class methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864283!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864308 overrides: 50864432!
value



	^ value! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864303!
initializeFor: aValue



	value := aValue ! !
!Deposit class methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864320!
for: aValue



	^ self new initializeFor: aValue ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864386!
balance



	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864372 overrides: 16920235!
initialize



	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864382!
transactions 



	^ transactions copy! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864377!
register: aTransaction



	transactions add: aTransaction 

! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864392!
hasRegistered: aTransaction



	^ transactions includes: aTransaction 

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864233!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions



	| deposit withdraw account |

	

	account := ReceptiveAccount new.

	deposit :=  Deposit for: 200.

	withdraw := Withdraw for: 50.

		

	self deny: (account hasRegistered: deposit).

	self deny: (account hasRegistered:withdraw).

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864210!
test04WithdrawValueMustBePositive 



	| account withdrawValue |

	

	account := ReceptiveAccount new.

	withdrawValue := 50.

	

	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864183!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 



	| account |

	

	account := ReceptiveAccount new.



	self assert: 0 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864200!
test03WithdrawDecreasesBalanceOnTransactionValue 



	| account |

	

	account := ReceptiveAccount new.

	Deposit register: 100 on: account.

	Withdraw register: 50 on: account.

		

	self assert: 50 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864220!
test05ReceptiveAccountKnowsRegisteredTransactions 



	| account deposit withdraw |

	

	account := ReceptiveAccount new.

	deposit := Deposit register: 100 on: account.

	withdraw := Withdraw register: 50 on: account.

		

	self assert: (account hasRegistered: deposit).

	self assert: (account hasRegistered: withdraw).

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864191!
test02DepositIncreasesBalanceOnTransactionValue 



	| account |

	

	account := ReceptiveAccount  new.

	Deposit register: 100 on: account.

		

	self assert: 100 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864245!
test07AccountKnowsItsTransactions 



	| account1 deposit1 |

	

	account1 := ReceptiveAccount new.

	

	deposit1 := Deposit register: 50 on: account1.

		

	self assert: 1 equals: account1 transactions size.

	self assert: (account1 transactions includes: deposit1).

! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864342 overrides: 50864432!
value



	^ value! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864337!
initializeFor: aValue



	value := aValue ! !
!Withdraw class methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 19:14:53' prior: 50864354!
for: aValue



	^ self new initializeFor: aValue ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:15:01'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:15:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:15:01'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:16:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:16:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:16:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:16:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:20:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:20:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:20:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:20:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:26:45'!
FAILURE!
!Deposit class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:30:11' overrides: 50864437!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !
!Withdraw class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:30:11' overrides: 50864437!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !

!methodRemoval: AccountTransaction class #register:on: stamp: 'Ms 5/15/2023 19:30:11'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction!
!Withdraw class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:30:35' prior: 50864655!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue negated.

	account register: transaction.

		

	^ transaction! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:30:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:30:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:30:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:30:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:30:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:30:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:30:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:30:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:31:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:31:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:31:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:31:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:31:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:31:30'!
FAILURE!

!methodRemoval: Withdraw class #register:on: stamp: 'Ms 5/15/2023 19:32:15'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue negated.

	account register: transaction.

		

	^ transaction!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:32:24'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !

!methodRemoval: Deposit class #register:on: stamp: 'Ms 5/15/2023 19:32:24'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:32:27'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:32:27'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/15/2023 19:36:20' prior: 50864501!
test04WithdrawValueMustBePositive 



	| account withdrawValue |

	account := ReceptiveAccount new.

	withdrawValue := 50.

	

	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value

! !
!Deposit class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:36:54' overrides: 50864759!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !
!Withdraw class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:36:54' overrides: 50864759!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !

!methodRemoval: AccountTransaction class #register:on: stamp: 'Ms 5/15/2023 19:36:54'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction!
!Withdraw class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:37:02' prior: 50864822!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue negated.

	account register: transaction.

		

	^ transaction! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:37:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:37:10'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:37:10'!
FAILURE!
!Deposit methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:37:54' prior: 50864449!
initializeFor: aValue

	value := aValue ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:11'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:38:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:11'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:38:40' prior: 50864569 overrides: 50864432!
value



	^ value abs ! !
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:38:45' prior: 50864445 overrides: 50864432!
value



	^ value abs! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:38:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:58'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:38:58'!
FAILURE!

!methodRemoval: Withdraw class #register:on: stamp: 'Ms 5/15/2023 19:40:12'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue negated.

	account register: transaction.

		

	^ transaction!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'Ms 5/15/2023 19:40:20'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction! !

!methodRemoval: Deposit class #register:on: stamp: 'Ms 5/15/2023 19:40:20'!
register: aValue on: account



	| transaction |

	

	transaction := self for: aValue.

	account register: transaction.

		

	^ transaction!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 19:41:03'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value absValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:41:02' prior: 50864856!
initializeFor: aValue

	value := aValue.
	absValue := aValue! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 19:41:28'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value absValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:41:27' prior: 50864573!
initializeFor: aValue



	value := aValue negated.
	absValue := aValue! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:41:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:41:40'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:42:07' prior: 50864920 overrides: 50864432!
value



	^ value ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:42:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:42:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:42:08'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:43:43' prior: 50865047 overrides: 50864432!
value
	^ absValue ! !
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:43:50' prior: 50864924 overrides: 50864432!
value



	^ absValue! !
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:44:11'!
realValue



	^ value! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:44:17'!
realValue



	^ value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 19:44:23' prior: 50864459!
balance



	^transactions sum: [ :aTransaction | aTransaction realValue ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:44:24'!
PASSED!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 19:44:43'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 19:44:49'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:44:55' prior: 50865085 overrides: 50864432!
value



	^ value abs! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:45:02' prior: 50865081 overrides: 50864432!
value
	^ value abs ! !
!Withdraw methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:45:11' prior: 50865011!
initializeFor: aValue



	value := aValue negated.
! !
!Withdraw methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:45:13' prior: 50865160!
initializeFor: aValue

	value := aValue negated.
! !
!Deposit methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:45:18' prior: 50864998!
initializeFor: aValue

	value := aValue.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:45:19'!
PASSED!
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:46:45'!
balance



	^ value! !

!methodRemoval: Withdraw #realValue stamp: 'Ms 5/15/2023 19:46:45'!
realValue



	^ value!
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 19:46:56'!
balance



	^ value! !

!methodRemoval: Deposit #realValue stamp: 'Ms 5/15/2023 19:47:11'!
realValue



	^ value!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 19:47:26' prior: 50865095!
balance



	^transactions sum: [ :aTransaction | aTransaction balance ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:47:27'!
PASSED!
!Withdraw methodsFor: 'initialization' stamp: 'Ms 5/15/2023 19:54:20' prior: 50865165!
initializeFor: aValue

	value := aValue.
! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 19:54:35' prior: 50865200!
balance



	^ value negated! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 19:54:36'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:10:40' prior: 50865213!
balance



	|acum|
	acum := 0.
	transactions do: [ :each |
		acum := acum + each balance
	]
	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:10:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:10:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:10:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:10:42'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:11:01' prior: 50865279!
balance



	|acum|
	acum := 0.
	transactions do: [ :each |
		acum := acum + each balance
	]

	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:11:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:11:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:11:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:11:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:11:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:11:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:38'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:11:52' prior: 50865312!
balance



	|acum|
	acum := 0.
	transactions do: [ :each |
		acum := acum + each balance.
	]

	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:11:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:11:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:11:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:11:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:11:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:11:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:11:53'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:12:17' prior: 50865360!
balance



	|acum|
	acum := 0.
	transactions do: [ :each |
		acum := acum + each balance.
	].

	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:12:18'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:14:41' prior: 50865393!
balance



	|acum|
	acum := 0.
	
	transactions do: [ :each |
		acum := each affectBalance: acum.
	]
	^acum.! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 20:15:37'!
affectBalance: balance



	^ balance! !
!Withdraw methodsFor: 'value' stamp: 'Ms 5/15/2023 20:16:05' prior: 50865432!
affectBalance: balance



	^ balance - self value! !

!methodRemoval: Withdraw #balance stamp: 'Ms 5/15/2023 20:16:10'!
balance



	^ value negated!
!Deposit methodsFor: 'value' stamp: 'Ms 5/15/2023 20:16:34'!
affectBalance: balance

	^ balance + self value! !

!methodRemoval: Deposit #balance stamp: 'Ms 5/15/2023 20:16:38'!
balance



	^ value!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:16:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:16:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:16:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:16:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:16:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:16:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:16:46'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ms 5/15/2023 20:16:58' prior: 50865426!
balance



	|acum|
	acum := 0.
	
	transactions do: [ :each |
		acum := each affectBalance: acum.
	].

	^acum.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:16:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/15/2023 20:18:18'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 20:22:02'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 20:24:39'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'Ms 5/15/2023 20:24:33'!
test01
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: Portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:24:43'!
ERROR!
!Portfolio class methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:24:57'!
balance
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:25:08' prior: 50865563!
balance
	^0! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:25:18'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:26:36'!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAllLast: account.
	
	self assert: 0 equals: Portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:26:47' prior: 50865574!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: 0 equals: Portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:28:52' prior: 50865583!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account  equals: Portfolio accounts.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:29:00' prior: 50865592!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: Portfolio accounts.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:29:12' prior: 50865601!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: Portfolio accounts last.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:29:16'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:29:27'!
addAcount: account 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 20:30:28'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:30:25' prior: 50865621!
addAcount: account 
	accounts addLast: account.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:30:36'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:30:53'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:31:23' overrides: 16920235!
initialize
	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:31:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:31:25'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:31:25'!
ERROR!
!Portfolio class methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:31:39'!
accounts
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:33:11'!
accounts  
	^accounts! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:33:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:13'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:13'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:33:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:35'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:35'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:33:53' prior: 50865610!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: (Portfolio accounts) last.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:33:54'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:34:03'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:34:03'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:34:52' prior: 50865633!
addAcount: account 
	^accounts addLast: account.! !

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:34:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:34:56'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:34:56'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:35:30'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:35:30'!
ERROR!

!methodRemoval: Portfolio class #accounts stamp: 'Ms 5/15/2023 20:35:50'!
accounts
	self shouldBeImplemented.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:43:12' prior: 50865675!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: (portfolio accounts) last.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:43:13'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:43:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:43:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:43:22' prior: 50865711!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:43:23'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:43:23'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:43:23'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:44:29'!
test01PortfolioHaveZeroBalanceWhenItsCreated
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: Portfolio balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'Ms 5/15/2023 20:44:37'!
test01
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: Portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:45:01' prior: 50865743!
test01PortfolioHaveZeroBalanceWhenItsCreated
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: Portfolio class #balance stamp: 'Ms 5/15/2023 20:45:25'!
balance
	^0!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/15/2023 20:45:40'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:45:38' prior: 50865642 overrides: 16920235!
initialize
	balance := 0.

	accounts := OrderedCollection new.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:45:55'!
balance
	^balance! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:45:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:45:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:46:50'!
test02PortfolioHaveOnlyOneAccount
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!methodRemoval: PortfolioTest #test02 stamp: 'Ms 5/15/2023 20:46:53'!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:46:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:46:59'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:49:05' prior: 50865756!
test01PortfolioHaveZeroBalanceWhenItsCreated
	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals:  Portfolio new balance.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:49:07'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:49:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:49:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:49:14' prior: 50865813!
test01PortfolioHaveZeroBalanceWhenItsCreated
	
	self assert: 0 equals:  Portfolio new balance.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:49:16'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:49:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:49:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:55:17'!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:55:29' prior: 50865788!
test02PortfolioHaveOnlyOneAccount
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:55:30'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:55:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:55:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:55:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:56:41' prior: 50865847!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: 50.
	
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:57:01' prior: 50865882!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 20:57:32' prior: 50865893!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.! !

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:57:43'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:58:17' prior: 50865779!
balance
	^accounts sum:[ :each | each ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:58:18'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:58:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:58:18'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:59:00' prior: 50865920!
balance
	accounts isEmpty ifTrue: [^0]
	^100! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:01'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:59:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:01'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:18'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:59:26' prior: 50865935!
balance
	accounts isEmpty ifTrue: [^0].
	^100! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:59:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:27'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:59:40' prior: 50865953!
balance
	accounts isEmpty ifTrue: [^0].
	^accounts balance! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:59:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:43'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:43'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 20:59:52' prior: 50865968!
balance
	accounts isEmpty ifTrue: [^0].
	^accounts last balance! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 20:59:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 20:59:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 20:59:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:00:29'!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03PortfolioBalanceIsEqualsToAccountsBalance stamp: 'Ms 5/15/2023 21:00:33'!
test03PortfolioBalanceIsEqualsToAccountsBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:00:48'!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:01:15' prior: 50866025!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	
	self assert: account balance equals: portfolio balance.! !

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:01:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:01:34' prior: 50866037!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	portfolio addAcount: account2.

	
	self assert: account balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:01:48' prior: 50866069!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	portfolio addAcount: account2.

	
	self assert: account balance + account2 balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:02:38' prior: 50866085!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	portfolio addAcount: account2.

	
	self assert: (account balance + account2 balance) equals: portfolio balance.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:03:50' prior: 50865987!
balance
	accounts sum: [ :each | each balance] ifEmpty: 0! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:04:14' prior: 50866117!
balance
	^accounts sum: [ :each | each balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:04:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:04:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:04:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:04:15'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:04:29' prior: 50866122!
balance
	^accounts sum: [ :each | each balance ] ifEmpty: [0]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:07:33'!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account|
	
	portfolio1 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 addAcount: account.
	
	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:08:04' prior: 50866146!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 addAcount: account.
	
	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance equals: portfolio2 balance.! !

!testRun: #PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:08:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:09:03' prior: 50866160!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account account2|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 300 on: account2.
	
	portfolio1 addAcount: account.
	
	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:09:16' prior: 50866196!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account account2|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 300 on: account2.
	
	portfolio1 addAcount: account.
	portfolio2 addAcount: account2.

	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance + account2 balance equals: portfolio2 balance.! !

!testRun: #PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:09:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:10:05'!
test02PortfolioHaveOnlyOneAsset
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!methodRemoval: PortfolioTest #test02PortfolioHaveOnlyOneAccount stamp: 'Ms 5/15/2023 21:10:08'!
test02PortfolioHaveOnlyOneAccount
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:11:32' prior: 50866002!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test05PortfolioBalanceEqualsOnePortfolioBalance stamp: 'Ms 5/15/2023 21:11:57'!
test05PortfolioBalanceEqualsOnePortfolioBalance
	|portfolio1 portfolio2 account account2|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 300 on: account2.
	
	portfolio1 addAcount: account.
	portfolio2 addAcount: account2.

	portfolio2 addAcount: portfolio1.
	
	self assert: portfolio1 balance + account2 balance equals: portfolio2 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:15:57'!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account account2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount new.
	Deposit register: 200 on: account2.
	
	portfolio addAcount: account.
	portfolio addAcount: account2.

	
	self assert: (account balance + account2 balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:17:26' prior: 50866302!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:17:28'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:17:37'!
hasRegistered: transaction 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:19:25' prior: 50866333!
hasRegistered: transaction 
	^accounts anySatisfy: [ :each | each hasRegistered: transaction ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:19:40'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:21:46' prior: 50866338!
hasRegistered: transaction 
	"^accounts anySatisfy: [ :each | each hasRegistered: transaction ]."
	accounts last hasRegistered: transaction.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:21:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:21:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:21:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:21:47'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:21:47'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:21:47'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:21:54' prior: 50866362!
hasRegistered: transaction 
	"^accounts anySatisfy: [ :each | each hasRegistered: transaction ]."
	^accounts last hasRegistered: transaction.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:21:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:22:28'!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:22:43' prior: 50866416!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:23:06' prior: 50866429!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio portfolio2 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:25:03' prior: 50866442!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.

	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio.

	
	self assert: (portfolio3 hasRegistered: transaction).
	self assert: (portfolio3 hasRegistered: transaction2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:25:25' prior: 50866456!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio.

	
	self assert: (portfolio3 hasRegistered: transaction).
	self assert: (portfolio3 hasRegistered: transaction2).! !

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:25:26'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:25:40' prior: 50866391!
hasRegistered: transaction 
	^accounts anySatisfy: [ :each | each hasRegistered: transaction ].
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:25:41'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:25:41'!
FAILURE!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:25:41'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:27:49' prior: 50866479!
test06AssertPortfolioHaveTransactioninManyAssets
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.

	
	self assert: (portfolio3 hasRegistered: transaction).
	self assert: (portfolio3 hasRegistered: transaction2).! !

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:27:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:34:13'!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.

	
	self assert: (portfolio3 hasRegistered: transaction).
	self assert: (portfolio3 hasRegistered: transaction2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:36:07' prior: 50866585!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transaction add: transaction.
	transaction add: transaction2.

	
	self assert:  transactions  equals: portfolio3 transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:36:08'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:36:24' prior: 50866609!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transaction add: transaction2.

	
	self assert:  transactions  equals: portfolio3 transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:36:25'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:36:32' prior: 50866638!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transactions add: transaction2.

	
	self assert:  transactions  equals: portfolio3 transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:36:33'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:37:00' prior: 50866667!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transactions add: transaction2.

	
	self assert:  transactions equals: portfolio3 transactions.
! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:39:04'!
transactions 
	^accounts collect: [ :each | each  ]
! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:39:29' prior: 50866721!
transactions 
	^accounts collect: [ :each | each  transactions ]
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:39:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:39:30'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:39:30'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:41:40' prior: 50866726!
transactions 
	|transactions|
	
	transactions := Set new.
	
	^accounts do:		[ :acc |  
		 acc transactions do: [ :each |
			transactions add: each.	
			].
		 ].
! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:41:51' prior: 50866760!
transactions 
	|transactions|
	
	transactions := Set new.
	
	accounts do:		[ :acc |  
		 acc transactions do: [ :each |
			transactions add: each.	
			].
		 ].
	
	^transactions! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:41:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:45:36' prior: 50866696!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transaction3 transaction4 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	transaction3 := Deposit register: 200 on: account.
	transaction4 := Deposit register: 300 on: account.

	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transactions add: transaction2.
	transactions add: transaction2.
	transactions add: transaction4.


	
	self assert:  transactions equals: portfolio3 transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/15/2023 21:45:40' prior: 50866802!
test07PortfolioTransactionsEqualsAssetsTransactions
	|portfolio portfolio2 portfolio3 account account2 transaction transaction2 transaction3 transaction4 transactions|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	transaction3 := Deposit register: 200 on: account.
	transaction4 := Deposit register: 300 on: account.

	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	transaction2 := Deposit register: 300 on: account2.
	
	portfolio addAcount: account.
	portfolio2 addAcount: account2.
	
	portfolio3 := Portfolio new.
	
	portfolio3 addAcount: portfolio.
	portfolio3 addAcount: portfolio2.
	
	transactions := Set new.
	transactions add: transaction.
	transactions add: transaction2.
	transactions add: transaction3.
	transactions add: transaction4.


	
	self assert:  transactions equals: portfolio3 transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:45:55'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:48:13' prior: 50866768!
transactions 
	|transactions|
	
	transactions := Set new.
	
	accounts do:		[ :acc |
		transactions addAll: acc transactions.  
		 "acc transactions do: [ :each |
			transactions add: each.	
			]."
		 ].
	
	^transactions! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:48:14'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/15/2023 21:48:29' prior: 50866951!
transactions 
	|transactions|
	
	transactions := Set new.
	
	accounts do:		[ :acc |
		transactions addAll: acc transactions.  	
	 ].
	
	^transactions! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/15/2023 21:48:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/15/2023 21:48:31'!
PASSED!

----SNAPSHOT----(15 May 2023 21:49:05) CuisUniversity-5706.image priorSource: 17040456!

----SNAPSHOT----(15 May 2023 21:49:10) CuisUniversity-5706.image priorSource: 17131761!

----SNAPSHOT----(15 May 2023 21:50:46) CuisUniversity-5706.image priorSource: 17131850!

----STARTUP---- (16 May 2023 18:00:38) as C:\windows64\CuisUniversity-5706.image!


!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:00:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:00:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:00:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:00:43'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:00:44'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:00:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:00:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:02:55' prior: 50866537!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction |
	
	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: firstTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:03:18' prior: 50867055!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:03:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:09:16' prior: 50866834!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:09:17'!
PASSED!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

|hola|!

|hola|!

hola := Set new collect:[10, 20, 30, 40]!

hola := Set new collect:[10, 20, 30, 40]!

hola := Set new collect:[10, 20, 30, 40]!

hola := Set new collect:[10, 20, 30, 40]!

hola := Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

Set new collect:[10, 20, 30, 40]!

hola := Set new.!

hola collect:[10, 20, 30, 40]!

hola collect:[10, 20, 30, 40]!

hola collect:[10, 20, 30, 40]!

hola collect:[10, 20, 30, 40]!

hola collect:[10, 20, 30, 40].!

hola collect:[10, 20, 30, 40].!

hola collect:[10, 20, 30, 40].!

hola array!

hola size!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:16:26' prior: 50866101!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/16/2023 18:17:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/16/2023 18:17:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:21:55'!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
		
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:22:01' prior: 50867323!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:22:45' prior: 50867343!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:22:47'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:28:00'!
PASSED!

----STARTUP---- (16 May 2023 18:33:38) as C:\windows64\CuisUniversity-5706.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:02:55' prior: 50866537!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction |
	
	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: firstTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:03:18' prior: 50867420!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:09:16' prior: 50866834!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:16:26' prior: 50866101!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:21:55'!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
		
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:22:01' prior: 50867529!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:22:45' prior: 50867549!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !

----SNAPSHOT----(16 May 2023 18:33:57) CuisUniversity-5706.image priorSource: 17131939!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:34:00'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:34:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56'!
createPortfolio

	^ Portfolio new! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867475!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867629!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867666!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50865831!
test01PortfolioHaveZeroBalanceWhenItsCreated
	
	self assert: 0 equals:  self createPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50866272!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867447!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := Portfolio new.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867760!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := Portfolio new.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867788!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867512!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := self createPortfolio.
	firstAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50866318!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account transaction|
	
	portfolio := self createPortfolio.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50866252!
test02PortfolioHaveOnlyOneAsset
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := ReceptiveAccount new.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867569!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867886!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := self createPortfolio.
	thirdPortfolio := Portfolio new.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:34:56' prior: 50867909!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := self createPortfolio.
	thirdPortfolio := self createPortfolio.

	firstAccount := ReceptiveAccount new.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:25'!
createAccount

	^ ReceptiveAccount new! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867703!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867960!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867748!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867816!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := ReceptiveAccount new.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50868048!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867863!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account transaction|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	transaction := Deposit register: 100 on: account.
	
	portfolio addAcount: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867845!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := self createPortfolio.
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50868118!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := self createPortfolio.
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio addAcount: firstAccount.
	portfolio addAcount: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867932!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := self createPortfolio.
	thirdPortfolio := self createPortfolio.

	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:35:26' prior: 50867876!
test02PortfolioHaveOnlyOneAsset
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:42:31'!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues do: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:42:54' prior: 50868036!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccountWithRegisterDepositValues: [100].
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:42:55'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:43:10'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:43:32'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:43:39' prior: 50868187!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues value do: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:43:40'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:43:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:43:40'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:45:26' prior: 50868219!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues do: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:26'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:45:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:26'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:42'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:45:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:42'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:45:47'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:47:24' prior: 50868259!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues detect: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:47:25'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:47:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:47:25'!
ERROR!

!methodRemoval: PortfolioTest #createAccountWithRegisterDepositValues: stamp: 'Ms 5/16/2023 18:47:36'!
createAccountWithRegisterDepositValues: aValues
	|firstAccount|

	firstAccount := self createAccount.
	aValues detect: [ :each |
			Deposit register: each on: firstAccount.
		].
	^firstAccount.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:47:49' prior: 50868197!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	
	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/16/2023 18:48:03' prior: 50868387!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.

	
	portfolio addAcount: account.
	
	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/16/2023 18:48:04'!
PASSED!

----SNAPSHOT----(16 May 2023 18:48:08) CuisUniversity-5706.image priorSource: 17150090!

----STARTUP---- (18 May 2023 17:05:59) as C:\windows64\CuisUniversity-5706.image!


!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/18/2023 17:06:10'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:02:55'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:02:57'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:03:00'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:03:05'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:03:07'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/18/2023 18:03:24'!
PASSED!

!testRun: #MarsRoverTest #test01EmpiezaEnUnPuntoInicial stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test02RecibeElComandoVacio stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test03RecibeElComandoAvanzarMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test04RecibeElComandoRetrocederMirandoHaciaElNorte stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test05RecibeElComandoAvanzarMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test06RecibeElComandoRetrocederMirandoHaciaElEste stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test07RecibeElComandoRotarALaIzquierda stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test08RecibeElComandoRotarALaDerecha stamp: 'Ms 5/18/2023 18:03:26'!
PASSED!

!testRun: #MarsRoverTest #test09DarUnGiroCompletoALaIzquierda stamp: 'Ms 5/18/2023 18:03:27'!
PASSED!

!testRun: #MarsRoverTest #test10DarUnGiroCompletoALaDerecha stamp: 'Ms 5/18/2023 18:03:27'!
PASSED!

!testRun: #MarsRoverTest #test11RecibeUnComandoErroneo stamp: 'Ms 5/18/2023 18:03:27'!
PASSED!

!testRun: #MarsRoverTest #test12RecibeMultiplesComandos stamp: 'Ms 5/18/2023 18:03:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/18/2023 18:03:31'!
PASSED!

Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!

!classDefinition: #AbrirArchivo category: 'Archivo' stamp: 'Ms 5/18/2023 18:04:19'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!
!AbrirArchivo methodsFor: 'nil' stamp: 'Ms 5/18/2023 18:05:11'!
open
	|file|
	file := UniFileStream open: 'hola.txt'.
	file newLine.
	file close.! !

AbrirArchivo new open!

AbrirArchivo open!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g := AbrirArchivo new.!

g open!

!classRemoval: #AbrirArchivo stamp: 'Ms 5/18/2023 20:16:30'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/18/2023 20:17:03' prior: 50864488!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions



	| deposit withdraw account |

	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.

		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).

! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/18/2023 20:17:07' prior: 50868871!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |

	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.

		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).

! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/18/2023 20:24:43' prior: 50865774 overrides: 16920235!
initialize
	balance := 0.
	accounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/18/2023 20:28:33'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50865691!
addAcount: account 
	^assets addLast: account.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866506!
hasRegistered: transaction 
	^assets anySatisfy: [ :each | each hasRegistered: transaction ].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50868896 overrides: 16920235!
initialize
	balance := 0.
	assets := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50865657!
accounts  
	^assets! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866986!
transactions 
	|transactions|
	
	transactions := Set new.
	
	assets do:		[ :acc |
		transactions addAll: acc transactions.  	
	 ].
	
	^transactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866141!
balance
	^assets sum: [ :each | each balance ] ifEmpty: [0]! !

----STARTUP---- (21 May 2023 23:15:39) as C:\windows64\CuisUniversity-5706.image!


!classDefinition: #AbrirArchivo category: 'Archivo' stamp: 'Ms 5/21/2023 23:15:42'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!

!classDefinition: #AbrirArchivo category: 'Archivo' stamp: 'Ms 5/21/2023 23:15:42'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!
!AbrirArchivo methodsFor: 'nil' stamp: 'Ms 5/18/2023 18:05:11'!
open
	|file|
	file := UniFileStream open: 'hola.txt'.
	file newLine.
	file close.! !

!classRemoval: #AbrirArchivo stamp: 'Ms 5/21/2023 23:15:42'!
Object subclass: #AbrirArchivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Archivo'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/18/2023 20:17:03' prior: 50864488!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions



	| deposit withdraw account |

	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.

		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).

! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ms 5/18/2023 20:17:07' prior: 50868970!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |

	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.

		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).

! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/18/2023 20:24:43' prior: 50865774 overrides: 16920235!
initialize
	balance := 0.
	accounts := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/21/2023 23:15:42'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50865691!
addAcount: account 
	^assets addLast: account.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866506!
hasRegistered: transaction 
	^assets anySatisfy: [ :each | each hasRegistered: transaction ].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50868995 overrides: 16920235!
initialize
	balance := 0.
	assets := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50865657!
accounts  
	^assets! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866986!
transactions 
	|transactions|
	
	transactions := Set new.
	
	assets do:		[ :acc |
		transactions addAll: acc transactions.  	
	 ].
	
	^transactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ms 5/18/2023 20:28:33' prior: 50866141!
balance
	^assets sum: [ :each | each balance ] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/21/2023 23:23:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:26:54'!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.
	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: MarsRover mensajeErrorComandoIncorrecto.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:27:55' prior: 50869069!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.
	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio.

! !
!Portfolio class methodsFor: 'nil' stamp: 'Ms 5/21/2023 23:28:38'!
messageErrorCanNotAddToPortfolio
 ^'Operacion Invalida'! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:30:27' prior: 50869008!
addAcount: account 
	account == self ifTrue: [ Portfolio class mensajeErrorComandoIncorrecto].
	^assets addLast: account.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:31:01' prior: 50869095!
addAcount: account 
	account == self ifTrue: [self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Ms 5/21/2023 23:31:02'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:31:02'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:31:02'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:31:32'!
FAILURE!

!methodRemoval: PortfolioTest #test08 stamp: 'Ms 5/21/2023 23:32:01'!
test08
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount firstTransaction transactions |

	firstPortfolio := self createPortfolio.
	secondPortfolio := self createPortfolio.
	thirdPortfolio := self createPortfolio.

	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	
	firstPortfolio addAcount: firstAccount.
	secondPortfolio addAcount: firstAccount.
	
	thirdPortfolio addAcount: firstPortfolio.
	thirdPortfolio addAcount: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
		
	self assert:  transactions equals: thirdPortfolio transactions.

!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:32:05'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:32:05'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:32:05'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:32:59' prior: 50869102!
addAcount: account 
	account == self ifTrue: [^self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:33:00'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:33:00'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:33:00'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:33:28' prior: 50869199!
addAcount: account 
	account == self ifTrue: [^self class messageErrorCanNotAddToPortfolio ] ifFalse: [
	^assets addLast: account.]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:33:30'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:33:30'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:33:30'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:34:47' prior: 50869237!
addAcount: account 
	account == self ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:34:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:34:50'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:34:50'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:35:06' prior: 50869276!
addAcount: account 
	(account == self) ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:35:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:35:07'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:35:07'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:35:19' prior: 50869311!
addAcount: account 
	[account == self] ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:35:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:35:19'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:35:19'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:35:19'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:35:20'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:35:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:35:20'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:35:20'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:35:31' prior: 50869346!
addAcount: account 
	(account == self) ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:35:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:35:35'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:35:35'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:35:38'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:36:42'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:36:42'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:37:15' prior: 50869381!
addAcount: account 
	(account = self) ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:37:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:37:16'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:37:16'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:37:28' prior: 50869426!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:37:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:37:28'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:37:28'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:37:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:37:42'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:37:42'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:37:47'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:38:29' prior: 50869461!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^assets addLast: account. ] 
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:38:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:38:35'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:38:35'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:38:37'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:38:57' prior: 50869527!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^assets addLast: account. ].
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:38:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:38:58'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:38:58'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:38:59'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:39:21' prior: 50869565!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ].
	^self class messageErrorCanNotAddToPortfolio! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:39:22'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:22'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:22'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:39:39' prior: 50869604!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ].
	^(self class messageErrorCanNotAddToPortfolio).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:39:40'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:40'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:40'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:39:48' prior: 50869090!
messageErrorCanNotAddToPortfolio
 ^'Operacion Invalida'.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:39:49'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:49'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:39:49'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:40:06' prior: 50869643!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ].
	^'Operacion Invalida'! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:40:10'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:40:10'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:40:10'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:40:32' prior: 50869080!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.
	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: 'Operacion Invalida'

! !

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:40:32'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:40:58'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:41:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:42:23' prior: 50869756!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.
	self assert: 'Operacion Invalida' equals: (firstPortfolio addAcount: firstPortfolio).

! !

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:42:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:42:32' prior: 50869776!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: 'Operacion Invalida'

! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:42:56' prior: 50869718!
addAcount: account 
	(account isEqualTo: self) ifFalse: [^assets addLast: account. ].
	^self class error: 'Operacion Invalida'! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:42:57'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:43:02'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:43:23' prior: 50869827!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self class error: 'Operacion Invalida'].
	^assets addLast: account.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:43:23'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:43:49' prior: 50869890!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self class error messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:43:50'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:43:50'!
FAILURE!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:43:50'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:44:07' prior: 50869925!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self class error: 'Operacion Invalida'].
	^assets addLast: account.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:44:51' prior: 50869817!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:44:55'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:45:12' prior: 50869964!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/21/2023 23:45:13'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:46:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:47:29'!
test08AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:47:34'!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test08AssertPortfolioCannotAddItself stamp: 'Ms 5/21/2023 23:47:35'!
test08AssertPortfolioCannotAddItself
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:48:07' prior: 50870115!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.

	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:48:20' prior: 50870137!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:48:22' prior: 50870150!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/21/2023 23:48:26'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/21/2023 23:56:42' prior: 50870014!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets includes: account )  ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/21/2023 23:56:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:58:20'!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/21/2023 23:59:48' prior: 50870225!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:00:04' prior: 50870240!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio addAcount: firstAccount.

	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:01:25' prior: 50870255!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:01:26'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:01:42' prior: 50870182!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets includes: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:03:48'!
containsAsset: anAsset 
	^assets anySatisfy: [ :each | each includes: anAsset ].
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:03:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:03:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:03:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:03:54'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:03:54'!
FAILURE!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:03:54'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:04:36' prior: 50870294!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets includes: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:04:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:04:37'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:04:37'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:04:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:04:46'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:04:46'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:04:51'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:05:58'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:06:38' prior: 50870350!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(assets includes: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:06:39'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:06:39'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:06:39'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:06:39'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:06:39'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:06:56'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:06:56'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:06:56'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:06:56'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:06:56'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:06:57'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:08:28'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ms 5/22/2023 00:11:45'!
containsAsset: acount

	^(self = acount)

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/22/2023 00:11:46'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:11:53'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:11:53'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:11:53'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:11:53'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:11:53'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:11:58'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:12:13' prior: 50870304!
containsAsset: anAsset 
	^assets anySatisfy: [ :each | each containsAsset: anAsset ].
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:14'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:16'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:12:51' prior: 50870442!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:53'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:12:57' prior: 50870684!
addAcount: account 
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:58'!
FAILURE!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:12:58'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:12:58'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:13:03' prior: 50870767!
addAcount: account 
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:13:03'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:13:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:05'!
test10AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:08'!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:20:09'!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:13'!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:20:16'!
test10AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	firstPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:55' prior: 50870952!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: []
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:58' prior: 50870989!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.
]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:20:59' prior: 50871006!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:21:04'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:23:11' prior: 50870815!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	account fatDefForClass: self.
	^assets addLast: account.
		! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:23:14' prior: 50871046!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	account fatherPortfolio: self.
	^assets addLast: account.
		! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ms 5/22/2023 00:23:42'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets balance father'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:23:41'!
fatherPortfolio: aPortfolio
	father := aPortfolio.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:23:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:23:44'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:23:44'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:24:14' prior: 50871077!
fatherPortfolio: aPortfolio
	^father := aPortfolio.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:24:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:15'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:24:15'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:24:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:19'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:24:19'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:24:21'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ms 5/22/2023 00:24:52'!
fatherPortfolio: aPortfolio! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/22/2023 00:24:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/22/2023 00:24:56'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:24:58'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:24:58'!
FAILURE!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:24:58'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:26:19' prior: 50871058!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(father containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:26:20'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:26:51'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ms 5/22/2023 00:27:17' prior: 50870535!
containsAsset: acount
	^(self = acount)

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ms 5/22/2023 00:27:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:27:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:27:19'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:27:19'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:27:26'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:28:12' prior: 50871310!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(father containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:28:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:28:13'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:28:13'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:37:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:37:50'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:37:50'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:38:36' prior: 50869020 overrides: 16920235!
initialize
	balance := 0.
	assets := OrderedCollection new.
	father := self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:38:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:40:07'!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:40:23' prior: 50871584!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio firstAccount thirdPortfolio |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.
	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:40:48' prior: 50871602!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio firstAccount thirdPortfolio |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.


	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:41:52' prior: 50871622!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.
	secondPortfolio addAcount: thirdPortfolio.

	self
		should: [	secondPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Ms 5/22/2023 00:42:00' prior: 50871642!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio addAcount: firstAccount.
	firstPortfolio addAcount: secondPortfolio.
	secondPortfolio addAcount: thirdPortfolio.

	self
		should: [	thirdPortfolio addAcount: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'Ms 5/22/2023 00:42:01'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:42:40' prior: 50871442!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(father anyFatherContainsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:42:46' prior: 50871688!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(self anyFatherContainsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:42:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:42:50'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'Ms 5/22/2023 00:42:50'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:42:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:42:58'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:42:58'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:42:58'!
ERROR!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:42:59'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'Ms 5/22/2023 00:42:59'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:43:14'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:44:30'!
anyFatherContainsAsset: asset
	(father anyFatherContainsAsset: asset) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:48:16' prior: 50871810!
anyFatherContainsAsset: asset
	(father anyFatherContainsAsset: asset) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	self containsAsset: asset.! !
!Portfolio methodsFor: 'category-name' stamp: 'Ms 5/22/2023 00:51:54' prior: 50871818!
anyFatherContainsAsset: asset
	father = self ifFalse:[
		^father anyFatherContainsAsset: asset
	] ifTrue: [^	self containsAsset: asset.].
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'Ms 5/22/2023 00:51:55'!
PASSED!

----SNAPSHOT----(22 May 2023 00:52:49) CuisUniversity-5706.image priorSource: 17177242!

----SNAPSHOT----(22 May 2023 00:54:51) CuisUniversity-5706.image priorSource: 17287293!

----STARTUP---- (22 May 2023 13:19:41) as /home/tomas/Downloads/linux64/CuisUniversity-5706.image!

!AccountTransaction methodsFor: 'value' stamp: 'TM 5/22/2023 13:20:11' prior: 50864432 overrides: 16902254!
value 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'TM 5/22/2023 13:20:30' prior: 50865152 overrides: 50871889!
value

	^ value abs! !
!Deposit methodsFor: 'value' stamp: 'TM 5/22/2023 13:20:43' prior: 50871894 overrides: 50871889!
value

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'TM 5/22/2023 13:20:56' prior: 50865156 overrides: 50871889!
value

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'TM 5/22/2023 13:21:00' prior: 50865436!
affectBalance: balance

	^ balance - self value! !
!Withdraw class methodsFor: 'instance creation' stamp: 'TM 5/22/2023 13:21:11' prior: 50864578!
for: aValue

	^ self new initializeFor: aValue ! !
!Deposit class methodsFor: 'instance creation' stamp: 'TM 5/22/2023 13:21:15' prior: 50864454!
for: aValue

	^ self new initializeFor: aValue ! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'TM 5/22/2023 13:21:35' prior: 50864976!
register: aValue on: account

	| transaction |

	transaction := self for: aValue.

	account register: transaction.

	^ transaction! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TM 5/22/2023 13:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TM 5/22/2023 13:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TM 5/22/2023 13:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TM 5/22/2023 13:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TM 5/22/2023 13:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TM 5/22/2023 13:21:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TM 5/22/2023 13:21:41'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'TM 5/22/2023 13:22:30' prior: 50865477!
balance

	| acum |
	
	acum := 0.
	
	transactions do: [ :each |
		acum := each affectBalance: acum.
	].

	^acum.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TM 5/22/2023 13:22:36' prior: 50864476!
register: aTransaction

	transactions add: aTransaction 

! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TM 5/22/2023 13:22:39' prior: 50864471!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'TM 5/22/2023 13:22:44' prior: 50864466 overrides: 16920235!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'TM 5/22/2023 13:22:55' prior: 50871368!
containsAsset: acount

	^(self = acount)

! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'TM 5/22/2023 13:23:09' prior: 50864482!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TM 5/22/2023 13:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TM 5/22/2023 13:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TM 5/22/2023 13:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TM 5/22/2023 13:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TM 5/22/2023 13:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TM 5/22/2023 13:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TM 5/22/2023 13:23:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TM 5/22/2023 13:23:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TM 5/22/2023 13:23:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TM 5/22/2023 13:23:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TM 5/22/2023 13:23:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TM 5/22/2023 13:23:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TM 5/22/2023 13:23:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TM 5/22/2023 13:23:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TM 5/22/2023 13:23:30'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:23:54'!
test01ReceptiveAccountHasZeroAsBalanceWhenCreated 



	| account |

	

	account := ReceptiveAccount new.



	self assert: 0 equals: account balance.

! !

!methodRemoval: ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TM 5/22/2023 13:23:54'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 



	| account |

	

	account := ReceptiveAccount new.



	self assert: 0 equals: account balance.

!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:24:04' prior: 50872044!
test01ReceptiveAccountHasZeroAsBalanceWhenCreated 

	| account |

	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:24:17' prior: 50864546!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |

	account := ReceptiveAccount  new.

	Deposit register: 100 on: account.

	self assert: 100 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:25:19' prior: 50864521!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |

	account := ReceptiveAccount new.

	Deposit register: 100 on: account.

	Withdraw register: 50 on: account.

	self assert: 50 equals: account balance.

! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:25:34' prior: 50864804!
test04WithdrawValueMustBePositive 

	| account withdrawValue |

	account := ReceptiveAccount new.

	withdrawValue := 50.

	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value

! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:25:58' prior: 50864532!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.

	deposit := Deposit register: 100 on: account.

	withdraw := Withdraw register: 50 on: account.

	self assert: (account hasRegistered: deposit).

	self assert: (account hasRegistered: withdraw).

! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TM 5/22/2023 13:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHasZeroAsBalanceWhenCreated stamp: 'TM 5/22/2023 13:26:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TM 5/22/2023 13:26:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TM 5/22/2023 13:26:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TM 5/22/2023 13:26:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TM 5/22/2023 13:26:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TM 5/22/2023 13:26:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TM 5/22/2023 13:26:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:28:32'!
test01PortfolioHasZeroBalanceWhenItsCreated
	
	self assert: 0 equals:  self createPortfolio balance.! !

!methodRemoval: PortfolioTest #test01PortfolioHaveZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 13:28:32'!
test01PortfolioHaveZeroBalanceWhenItsCreated
	
	self assert: 0 equals:  self createPortfolio balance.!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:28:39'!
test02PortfolioHasOnlyOneAsset
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !

!methodRemoval: PortfolioTest #test02PortfolioHaveOnlyOneAsset stamp: 'TM 5/22/2023 13:28:39'!
test02PortfolioHaveOnlyOneAsset
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:30:21' prior: 50872152!
test02PortfolioHasOnlyOneAsset

	| portfolio account |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:31:19' prior: 50872171!
test02PortfolioHasOnlyOneAsset

	| portfolio account |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	portfolio addAcount: account.
	
	self assert: account equals: portfolio accounts last.! !
!Portfolio methodsFor: 'category-name' stamp: 'TM 5/22/2023 13:32:00'!
add: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(self anyFatherContainsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50870164!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio add: firstAccount.

	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50870272!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.


	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50868136!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := self createPortfolio.
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio add: firstAccount.
	portfolio add: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50868398!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.

	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50870104!
test08AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio add: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50872181!
test02PortfolioHasOnlyOneAsset

	| portfolio account |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	portfolio add: account.
	
	self assert: account equals: portfolio accounts last.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50868105!
test05AssertPortfolioHaveTransactionInOneAsset
	|portfolio account transaction|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	transaction := Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50871663!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50867998!
test07PortfolioTransactionsEqualsAssetsTransactions
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio add: firstAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50868077!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio add: firstAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:32:00' prior: 50871024!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.


	self
		should: [	secondPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: Portfolio #addAcount: stamp: 'TM 5/22/2023 13:32:00'!
addAcount: account
	(account isEqualTo: self) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(self anyFatherContainsAsset: account ) ifTrue: [^self error: self class messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:33:41'!
test03PortfolioBalanceEqualsOneAccountBalance

	| portfolio account |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03PortfolioBalanceIsEqualsOneAccountBalance stamp: 'TM 5/22/2023 13:33:44'!
test03PortfolioBalanceIsEqualsOneAccountBalance
	|portfolio account|
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.

	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:34:27'!
test04PortfolioBalanceEqualsMultipleAccountsBalance

	| portfolio firstAccount secondAccount |
	
	portfolio := self createPortfolio.
	
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio add: firstAccount.
	portfolio add: secondAccount.
	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04PortfolioBalanceIsEqualsToManyAccountBalance stamp: 'TM 5/22/2023 13:34:30'!
test04PortfolioBalanceIsEqualsToManyAccountBalance
	|portfolio firstAccount secondAccount|
	
	portfolio := self createPortfolio.
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio add: firstAccount.
	portfolio add: secondAccount.

	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:35:21' prior: 50872288!
test05AssertPortfolioHaveTransactionInOneAsset

	| portfolio account transaction |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	transaction := Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:35:54'!
test05PortfolioHasRegisteredTransactionInOneAccount

	| portfolio account transaction |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	transaction := Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test05AssertPortfolioHaveTransactionInOneAsset stamp: 'TM 5/22/2023 13:35:54'!
test05AssertPortfolioHaveTransactionInOneAsset

	| portfolio account transaction |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	transaction := Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:36:15'!
test06PortfolioHasRegisteredTransactionInManyAccounts
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio add: firstAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !

!methodRemoval: PortfolioTest #test06AssertPortfolioHaveTransactioninManyAssets stamp: 'TM 5/22/2023 13:36:15'!
test06AssertPortfolioHaveTransactioninManyAssets
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	secondTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio add: firstAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.

	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:37:33' prior: 50872510!
test06PortfolioHasRegisteredTransactionInManyAccounts

	| firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	firstPortfolio add: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	secondTransaction := Deposit register: 300 on: secondAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.
	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'TM 5/22/2023 13:37:34'!
PASSED!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'TM 5/22/2023 13:37:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:38:03' prior: 50872321!
test07PortfolioTransactionsEqualsAssetsTransactions

	| firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio add: firstAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:38:16'!
test07PortfolioTransactionsEqualAssetsTransactions

	| firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio add: firstAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
! !

!methodRemoval: PortfolioTest #test07PortfolioTransactionsEqualsAssetsTransactions stamp: 'TM 5/22/2023 13:38:19'!
test07PortfolioTransactionsEqualsAssetsTransactions

	| firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio add: firstAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.


	
	self assert:  transactions equals: thirdPortfolio transactions.
!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:38:36' prior: 50872677!
test07PortfolioTransactionsEqualAssetsTransactions

	| firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction thirdTransaction fourthTransaction transactions |

	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	secondTransaction := Deposit register: 200 on: firstAccount.
	thirdTransaction := Deposit register: 300 on: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	fourthTransaction := Deposit register: 300 on: secondAccount.
	
	firstPortfolio add: firstAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.
	
	transactions := Set new.
	transactions add: firstTransaction.
	transactions add: secondTransaction.
	transactions add: thirdTransaction.
	transactions add: fourthTransaction.
	
	self assert:  transactions equals: thirdPortfolio transactions.
! !

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'TM 5/22/2023 13:38:38'!
PASSED!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'TM 5/22/2023 13:38:38'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:39:05'!
test08PortfolioCannotAddAnExistingAccount
	| firstPortfolio |

	firstPortfolio := self createPortfolio.	
	
	self
		should: [	firstPortfolio add: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test08AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:39:07'!
test08AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio |

	firstPortfolio := self createPortfolio.	
	self
		should: [	firstPortfolio add: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:39:45'!
test09PortfolioCannotAddAnExistingAccount
	| firstPortfolio firstAccount |

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio add: firstAccount.

	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:39:48'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:39:50'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!testRun: #PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'TM 5/22/2023 13:39:53'!
PASSED!

!methodRemoval: PortfolioTest #test09AssertPortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:39:55'!
test09AssertPortfolioCannotAddAnExistingAccount
	|firstPortfolio firstAccount|

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	firstPortfolio add: firstAccount.

	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:40:05'!
test08PortfolioCannotAddItself
	| firstPortfolio |

	firstPortfolio := self createPortfolio.	
	
	self
		should: [	firstPortfolio add: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 13:40:07'!
PASSED!

!methodRemoval: PortfolioTest #test08PortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:40:10'!
test08PortfolioCannotAddAnExistingAccount
	| firstPortfolio |

	firstPortfolio := self createPortfolio.	
	
	self
		should: [	firstPortfolio add: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:41:25'!
test10PortfolioCannotAddAnExistingAccountInAChildPortfolio

	| firstPortfolio secondPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.
	secondPortfolio add: firstAccount.
	
	firstPortfolio add: secondPortfolio.

	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'TM 5/22/2023 13:41:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'TM 5/22/2023 13:41:30'!
PASSED!

!methodRemoval: PortfolioTest #test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'TM 5/22/2023 13:41:33'!
test10AssertPortfolioCannotAddAnExistingAccountInAChildPortfolio
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	secondPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.


	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:41:50' prior: 50872937!
test08PortfolioCannotAddItself

	| firstPortfolio |

	firstPortfolio := self createPortfolio.	
	
	self
		should: [	firstPortfolio add: firstPortfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:41:58' prior: 50873004!
test08PortfolioCannotAddItself

	| portfolio |

	portfolio := self createPortfolio.	
	
	self
		should: [	portfolio add: portfolio.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:42:03' prior: 50872855!
test09PortfolioCannotAddAnExistingAccount

	| firstPortfolio firstAccount |

	firstPortfolio := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio add: firstAccount.

	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:42:18' prior: 50873024!
test09PortfolioCannotAddAnExistingAccount

	| portfolio firstAccount |

	portfolio := self createPortfolio.	
	firstAccount := self createAccount.
	
	portfolio add: firstAccount.

	self
		should: [	portfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:42:23' prior: 50873037!
test09PortfolioCannotAddAnExistingAccount

	| portfolio account |

	portfolio := self createPortfolio.	
	account := self createAccount.
	
	portfolio add: account.

	self
		should: [	portfolio add: account.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 13:42:57' prior: 50869682!
messageErrorCanNotAddToPortfolio

	^'Operacion Invalida'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:44:01' prior: 50864556!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |

	account1 := ReceptiveAccount new.

	deposit1 := Deposit register: 50 on: account1.


	self assert: 1 equals: account1 transactions size.

	self assert: (account1 transactions includes: deposit1).

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:47:02'!
test10PortfolioCannotAddExistingAccountInChild

	| firstPortfolio secondPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.
	secondPortfolio add: firstAccount.
	
	firstPortfolio add: secondPortfolio.

	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test10PortfolioCannotAddAnExistingAccountInAChildPortfolio stamp: 'TM 5/22/2023 13:47:02'!
test10PortfolioCannotAddAnExistingAccountInAChildPortfolio

	| firstPortfolio secondPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.
	secondPortfolio add: firstAccount.
	
	firstPortfolio add: secondPortfolio.

	self
		should: [	firstPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 13:47:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:47:17'!
test09PortfolioCannotAddExistingAccount

	| portfolio account |

	portfolio := self createPortfolio.	
	account := self createAccount.
	
	portfolio add: account.

	self
		should: [	portfolio add: account.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test09PortfolioCannotAddAnExistingAccount stamp: 'TM 5/22/2023 13:47:17'!
test09PortfolioCannotAddAnExistingAccount

	| portfolio account |

	portfolio := self createPortfolio.	
	account := self createAccount.
	
	portfolio add: account.

	self
		should: [	portfolio add: account.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:47:30'!
test11PortfolioCannotAddExistingAccountInParent
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.


	self
		should: [	secondPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather stamp: 'TM 5/22/2023 13:47:30'!
test11AssertPortfolioCannotAddAnExistingAccountInPortfolioFather
	|firstPortfolio secondPortfolio firstAccount|

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.


	self
		should: [	secondPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:47:50'!
test12PortfolioCannotAddExistingAccountInAncestor
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!methodRemoval: PortfolioTest #test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather stamp: 'TM 5/22/2023 13:47:50'!
test12AssertPortfolioCannotAddAnExistingAccountInPortfolioGrandFather
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:48:41' prior: 50873079!
test10PortfolioCannotAddExistingAccountInChild

	| rootPortfolio secondPortfolio firstAccount |

	rootPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.
	secondPortfolio add: firstAccount.
	
	rootPortfolio add: secondPortfolio.

	self
		should: [	rootPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:48:48' prior: 50873215!
test10PortfolioCannotAddExistingAccountInChild

	| rootPortfolio childPortfolio firstAccount |

	rootPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.
	childPortfolio add: firstAccount.
	
	rootPortfolio add: childPortfolio.

	self
		should: [	rootPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:48:54' prior: 50873232!
test10PortfolioCannotAddExistingAccountInChild

	| rootPortfolio childPortfolio account |

	rootPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	

	account := self createAccount.
	childPortfolio add: account.
	
	rootPortfolio add: childPortfolio.

	self
		should: [	rootPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:49:22' prior: 50873248!
test10PortfolioCannotAddExistingAccountInChild

	| rootPortfolio childPortfolio account |

	rootPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	rootPortfolio add: childPortfolio.
	childPortfolio add: account.

	self
		should: [	rootPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 13:49:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:49:45' prior: 50873140!
test11PortfolioCannotAddExistingAccountInParent

	| firstPortfolio secondPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.


	self
		should: [	secondPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:49:54' prior: 50873326!
test11PortfolioCannotAddExistingAccountInParent

	| parentPortfolio secondPortfolio firstAccount |

	parentPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	parentPortfolio add: firstAccount.
	parentPortfolio add: secondPortfolio.


	self
		should: [	secondPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:50:06' prior: 50873343!
test11PortfolioCannotAddExistingAccountInParent

	| parentPortfolio childPortfolio firstAccount |

	parentPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	firstAccount := self createAccount.
	
	parentPortfolio add: firstAccount.
	parentPortfolio add: childPortfolio.


	self
		should: [	childPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:50:25' prior: 50873360!
test11PortfolioCannotAddExistingAccountInParent

	| parentPortfolio childPortfolio account |

	parentPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	parentPortfolio add: account.
	parentPortfolio add: childPortfolio.


	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 13:50:41' prior: 50873377!
test11PortfolioCannotAddExistingAccountInParent

	| parentPortfolio childPortfolio account |

	parentPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	parentPortfolio add: account.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio messageErrorCanNotAddToPortfolio 

! !

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 13:50:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 13:50:42'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'TM 5/22/2023 13:58:27' prior: 50872191!
add: account
	(account isEqualTo: self) ifTrue: [^self error: Portfolio messageErrorCanNotAddToPortfolio ].
	(self containsAsset: account ) ifTrue: [^self error: Portfolio messageErrorCanNotAddToPortfolio ].

	account fatherPortfolio: self.
	(self anyFatherContainsAsset: account ) ifTrue: [^self error: Portfolio messageErrorCanNotAddToPortfolio ].

	^assets addLast: account.
		! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 13:58:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 13:58:29'!
PASSED!
!Portfolio class methodsFor: 'error messages' stamp: 'TM 5/22/2023 14:04:09'!
cannotAddToPortfolioErrorDescription

	^'Operacion Invalida'.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:04:09' prior: 50873393!
test11PortfolioCannotAddExistingAccountInParent

	| parentPortfolio childPortfolio account |

	parentPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	parentPortfolio add: account.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:04:09' prior: 50873174!
test12PortfolioCannotAddExistingAccountInAncestor
	|firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	
	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:04:09' prior: 50873014!
test08PortfolioCannotAddItself

	| portfolio |

	portfolio := self createPortfolio.	
	
	self
		should: [	portfolio add: portfolio.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:04:09' prior: 50873116!
test09PortfolioCannotAddExistingAccount

	| portfolio account |

	portfolio := self createPortfolio.	
	account := self createAccount.
	
	portfolio add: account.

	self
		should: [	portfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:04:09' prior: 50873264!
test10PortfolioCannotAddExistingAccountInChild

	| rootPortfolio childPortfolio account |

	rootPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	rootPortfolio add: childPortfolio.
	childPortfolio add: account.

	self
		should: [	rootPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:04:09' prior: 50873455!
add: account
	(account isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].
	(self containsAsset: account ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	account fatherPortfolio: self.
	(self anyFatherContainsAsset: account ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	^assets addLast: account.
		! !

!methodRemoval: Portfolio class #messageErrorCanNotAddToPortfolio stamp: 'TM 5/22/2023 14:04:09'!
messageErrorCanNotAddToPortfolio

	^'Operacion Invalida'.!
!Portfolio class methodsFor: 'error messages' stamp: 'TM 5/22/2023 14:05:08' prior: 50873512!
cannotAddToPortfolioErrorDescription

	^'Asset already exists in hierarchy!!'.! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:13:57' prior: 50873535!
test12PortfolioCannotAddExistingAccountInAncestor

	| firstPortfolio secondPortfolio thirdPortfolio firstAccount |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	firstAccount := self createAccount.	

	firstPortfolio add: firstAccount.
	firstPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: firstAccount.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:14:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:14:00'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:14:06' prior: 50873621!
test12PortfolioCannotAddExistingAccountInAncestor

	| firstPortfolio secondPortfolio thirdPortfolio account |

	firstPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	account := self createAccount.	

	firstPortfolio add: account.
	firstPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:14:19' prior: 50873687!
test12PortfolioCannotAddExistingAccountInAncestor

	| rootPortfolio secondPortfolio thirdPortfolio account |

	rootPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	account := self createAccount.	

	rootPortfolio add: account.
	rootPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:14:40' prior: 50873578!
test10PortfolioCannotAddExistingAccountInChild

	| parentPortfolio childPortfolio account |

	parentPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	parentPortfolio add: childPortfolio.
	childPortfolio add: account.

	self
		should: [	parentPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:15:41' prior: 50873706!
test12PortfolioCannotAddExistingAccountInAncestor

	| grandparentPortfolio secondPortfolio thirdPortfolio account |

	grandparentPortfolio := self createPortfolio.
	secondPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	account := self createAccount.	

	grandparentPortfolio add: account.
	grandparentPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:15:50' prior: 50873741!
test12PortfolioCannotAddExistingAccountInAncestor

	| grandparentPortfolio parentPortfolio thirdPortfolio account |

	grandparentPortfolio := self createPortfolio.
	parentPortfolio  := self createPortfolio.	
	thirdPortfolio  := self createPortfolio.	

	account := self createAccount.	

	grandparentPortfolio add: account.
	grandparentPortfolio add: parentPortfolio.
	parentPortfolio add: thirdPortfolio.

	self
		should: [	thirdPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:15:59' prior: 50873761!
test12PortfolioCannotAddExistingAccountInAncestor

	| grandparentPortfolio parentPortfolio childPortfolio account |

	grandparentPortfolio := self createPortfolio.
	parentPortfolio  := self createPortfolio.	
	childPortfolio  := self createPortfolio.	

	account := self createAccount.	

	grandparentPortfolio add: account.
	grandparentPortfolio add: parentPortfolio.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:16:18' prior: 50873781!
test12PortfolioCannotAddExistingAccountInAncestor

	| grandparentPortfolio parentPortfolio childPortfolio account |

	grandparentPortfolio := self createPortfolio.
	parentPortfolio  := self createPortfolio.	
	childPortfolio  := self createPortfolio.	

	account := self createAccount.	
	grandparentPortfolio add: account.
	
	grandparentPortfolio add: parentPortfolio.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddToPortfolioErrorDescription 

! !
!Portfolio methodsFor: 'category-name' stamp: 'TM 5/22/2023 14:18:36' prior: 50869029!
transactions

	| transactions |
	
	transactions := Set new.
	
	assets do:		[ :asset |
		transactions addAll: asset transactions.  	
	 ].
	
	^transactions! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:18:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:18:38'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'TM 5/22/2023 14:19:17' prior: 50871538 overrides: 16920235!
initialize

	balance := 0.
	assets := OrderedCollection new.
	father := self.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:23:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:23:53'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'TM 5/22/2023 14:25:52'!
parentPortfolio: aPortfolio
	^father := aPortfolio.
		! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'TM 5/22/2023 14:25:52'!
parentPortfolio: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:25:52' prior: 50873594!
add: account
	(account isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].
	(self containsAsset: account ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	account parentPortfolio: self.
	(self anyFatherContainsAsset: account ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	^assets addLast: account.
		! !

!methodRemoval: Portfolio #fatherPortfolio: stamp: 'TM 5/22/2023 14:25:52'!
fatherPortfolio: aPortfolio
	^father := aPortfolio.
		!

!methodRemoval: ReceptiveAccount #fatherPortfolio: stamp: 'TM 5/22/2023 14:25:52'!
fatherPortfolio: aPortfolio!
!Portfolio methodsFor: 'adding' stamp: 'TM 5/22/2023 14:26:34' prior: 50873919!
parentPortfolio: aPortfolio

	father := aPortfolio.
		! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:26:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:26:35'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'TM 5/22/2023 14:26:50' prior: 50873928!
add: account

	(account isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].
	(self containsAsset: account ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	account parentPortfolio: self.
	(self anyFatherContainsAsset: account ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	^assets addLast: account.
		! !
!Portfolio methodsFor: 'adding' stamp: 'TM 5/22/2023 14:26:54' prior: 50873998!
add: asset

	(asset isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].
	(self containsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	asset parentPortfolio: self.
	(self anyFatherContainsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	^assets addLast: asset.
		! !
!Portfolio methodsFor: 'adding' stamp: 'TM 5/22/2023 14:27:36' prior: 50874013!
add: asset

	(asset isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].
	
	(self containsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	asset parentPortfolio: self.
	(self anyFatherContainsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	^assets addLast: asset.
		! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:27:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:27:38'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'TM 5/22/2023 14:28:26' prior: 50874028!
add: asset

	(asset isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].
	
	(self containsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	asset parentPortfolio: self.
	(self anyFatherContainsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddToPortfolioErrorDescription ].

	^assets add: asset.
		! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:28:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:28:26'!
PASSED!
!Portfolio class methodsFor: 'error messages' stamp: 'TM 5/22/2023 14:29:04'!
cannotAddExistingAssetErrorDescription

	^'Asset already exists in hierarchy!!'.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:29:04' prior: 50873518!
test11PortfolioCannotAddExistingAccountInParent

	| parentPortfolio childPortfolio account |

	parentPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	parentPortfolio add: account.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:29:04' prior: 50874085!
add: asset

	(asset isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].
	
	(self containsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].

	asset parentPortfolio: self.
	(self anyFatherContainsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].

	^assets add: asset.
		! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:29:04' prior: 50873565!
test09PortfolioCannotAddExistingAccount

	| portfolio account |

	portfolio := self createPortfolio.	
	account := self createAccount.
	
	portfolio add: account.

	self
		should: [	portfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:29:04' prior: 50873725!
test10PortfolioCannotAddExistingAccountInChild

	| parentPortfolio childPortfolio account |

	parentPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	parentPortfolio add: childPortfolio.
	childPortfolio add: account.

	self
		should: [	parentPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:29:04' prior: 50873555!
test08PortfolioCannotAddItself

	| portfolio |

	portfolio := self createPortfolio.	
	
	self
		should: [	portfolio add: portfolio.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:29:04' prior: 50873801!
test12PortfolioCannotAddExistingAccountInAncestor

	| grandparentPortfolio parentPortfolio childPortfolio account |

	grandparentPortfolio := self createPortfolio.
	parentPortfolio  := self createPortfolio.	
	childPortfolio  := self createPortfolio.	

	account := self createAccount.	
	grandparentPortfolio add: account.
	
	grandparentPortfolio add: parentPortfolio.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

! !

!methodRemoval: Portfolio class #cannotAddToPortfolioErrorDescription stamp: 'TM 5/22/2023 14:29:04'!
cannotAddToPortfolioErrorDescription

	^'Asset already exists in hierarchy!!'.!
!Portfolio methodsFor: 'testing' stamp: 'TM 5/22/2023 14:29:40' prior: 50870606!
containsAsset: anAsset

	^assets anySatisfy: [ :each | each containsAsset: anAsset ].
! !
!Portfolio methodsFor: 'testing' stamp: 'TM 5/22/2023 14:31:36'!
contains: anAsset

	^assets anySatisfy: [ :each | each containsAsset: anAsset ].
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'TM 5/22/2023 14:31:36'!
contains: acount

	^(self = acount)

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:31:36' prior: 50874165!
add: asset

	(asset isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].
	
	(self contains: asset ) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].

	asset parentPortfolio: self.
	(self anyFatherContainsAsset: asset ) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].

	^assets add: asset.
		! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:31:36' prior: 50874247!
containsAsset: anAsset

	^assets anySatisfy: [ :each | each contains: anAsset ].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:31:36' prior: 50871827!
anyFatherContainsAsset: asset
	father = self ifFalse:[
		^father anyFatherContainsAsset: asset
	] ifTrue: [^	self contains: asset.].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:31:36' prior: 50874252!
contains: anAsset

	^assets anySatisfy: [ :each | each contains: anAsset ].
! !

!methodRemoval: Portfolio #containsAsset: stamp: 'TM 5/22/2023 14:31:36'!
containsAsset: anAsset

	^assets anySatisfy: [ :each | each contains: anAsset ].
!

!methodRemoval: ReceptiveAccount #containsAsset: stamp: 'TM 5/22/2023 14:31:36'!
containsAsset: acount

	^(self = acount)

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:32:54' prior: 50872278!
test02PortfolioHasOnlyOneAsset
"
	| portfolio account |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	portfolio add: account.
	
	self assert: account equals: portfolio accounts last.
"! !

!methodRemoval: Portfolio #accounts stamp: 'TM 5/22/2023 14:33:25'!
accounts  
	^assets!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:33:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:33:40'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'TM 5/22/2023 14:35:02' prior: 50869013!
hasRegistered: aTransaction

	^assets anySatisfy: [ :each | each hasRegistered: aTransaction ].! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:35:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:35:03'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'TM 5/22/2023 14:35:39'!
anyParentContains: asset
	father = self ifFalse:[
		^father anyFatherContainsAsset: asset
	] ifTrue: [^	self contains: asset.].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:35:39' prior: 50874283!
anyFatherContainsAsset: asset
	father = self ifFalse:[
		^father anyParentContains: asset
	] ifTrue: [^	self contains: asset.].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:35:39' prior: 50874262!
add: asset

	(asset isEqualTo: self) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].
	
	(self contains: asset ) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].

	asset parentPortfolio: self.
	(self anyParentContains: asset ) ifTrue: [^self error: Portfolio cannotAddExistingAssetErrorDescription ].

	^assets add: asset.
		! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:35:39' prior: 50874408!
anyParentContains: asset
	father = self ifFalse:[
		^father anyParentContains: asset
	] ifTrue: [^	self contains: asset.].
! !

!methodRemoval: Portfolio #anyFatherContainsAsset: stamp: 'TM 5/22/2023 14:35:39'!
anyFatherContainsAsset: asset
	father = self ifFalse:[
		^father anyParentContains: asset
	] ifTrue: [^	self contains: asset.].
!
!Portfolio methodsFor: 'testing' stamp: 'TM 5/22/2023 14:35:52' prior: 50874439!
anyParentContains: asset

	father = self ifFalse:[
		^father anyParentContains: asset
	] ifTrue: [^	self contains: asset.].
! !
!Portfolio methodsFor: 'testing' stamp: 'TM 5/22/2023 14:35:57' prior: 50874453!
anyParentContains: anAsset

	father = self ifFalse:[
		^father anyParentContains: anAsset
	] ifTrue: [^	self contains: anAsset.].
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TM 5/22/2023 14:36:02'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets balance parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:36:02' prior: 50874460!
anyParentContains: anAsset

	parent = self ifFalse:[
		^parent anyParentContains: anAsset
	] ifTrue: [^	self contains: anAsset.].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:36:02' prior: 50873872 overrides: 16920235!
initialize

	balance := 0.
	assets := OrderedCollection new.
	parent := self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TM 5/22/2023 14:36:02' prior: 50873951!
parentPortfolio: aPortfolio

	parent := aPortfolio.
		! !
!Portfolio methodsFor: 'testing' stamp: 'TM 5/22/2023 14:37:45' prior: 50874475!
anyParentContains: anAsset

	parent = self
	ifFalse: [ ^parent anyParentContains: anAsset ]
	ifTrue: [ ^	self contains: anAsset ].
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:37:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:37:46'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'TM 5/22/2023 14:38:35' prior: 50874483 overrides: 16920235!
initialize

	balance := 0.
	assets := Set new.
	parent := self.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:38:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:38:36'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'TM 5/22/2023 14:39:08' prior: 50869037!
balance

	^assets sum: [ :each | each balance ] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:39:11'!
PASSED!

!methodRemoval: PortfolioTest #test02PortfolioHasOnlyOneAsset stamp: 'TM 5/22/2023 14:41:02'!
test02PortfolioHasOnlyOneAsset
"
	| portfolio account |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	portfolio add: account.
	
	self assert: account equals: portfolio accounts last.
"!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:41:08'!
test02PortfolioBalanceEqualsOneAccountBalance

	| portfolio account |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:41:08'!
test03PortfolioBalanceEqualsOneAccountBalance

	| portfolio account |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:41:13'!
test03PortfolioBalanceEqualsMultipleAccountsBalance

	| portfolio firstAccount secondAccount |
	
	portfolio := self createPortfolio.
	
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio add: firstAccount.
	portfolio add: secondAccount.
	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:41:13'!
test04PortfolioBalanceEqualsMultipleAccountsBalance

	| portfolio firstAccount secondAccount |
	
	portfolio := self createPortfolio.
	
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio add: firstAccount.
	portfolio add: secondAccount.
	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:41:20'!
test04PortfolioHasRegisteredTransactionInOneAccount

	| portfolio account transaction |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	transaction := Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:41:20'!
test05PortfolioHasRegisteredTransactionInOneAccount

	| portfolio account transaction |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	transaction := Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:42:17'!
test05PortfolioHasRegisteredTransactionInOneAccount

	| portfolio account transaction |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	transaction := Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: (portfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test04PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:42:17'!
test04PortfolioHasRegisteredTransactionInOneAccount

	| portfolio account transaction |
	
	portfolio := self createPortfolio.
	account := self createAccount.
	
	transaction := Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: (portfolio hasRegistered: transaction)!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:43:09'!
test04PortfolioHasNotRegisteredTransaction

	| portfolio account transaction |
	
	portfolio := self createPortfolio.
	
	account := self createAccount.
	transaction := Deposit register: 100 on: account.
		
	self deny: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test04PortfolioHasNotRegisteredTransaction stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasNotRegisteredTransaction stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:43:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:43:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:43:31'!
test01PortfolioHasZeroBalanceWhenCreated
	
	self assert: 0 equals:  self createPortfolio balance.! !

!methodRemoval: PortfolioTest #test01PortfolioHasZeroBalanceWhenItsCreated stamp: 'TM 5/22/2023 14:43:31'!
test01PortfolioHasZeroBalanceWhenItsCreated
	
	self assert: 0 equals:  self createPortfolio balance.!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:44:16'!
test06PortfolioHasRegisteredTransactionsInManyAccounts

	| firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	firstPortfolio add: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	secondTransaction := Deposit register: 300 on: secondAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.
	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).! !

!methodRemoval: PortfolioTest #test06PortfolioHasRegisteredTransactionInManyAccounts stamp: 'TM 5/22/2023 14:44:16'!
test06PortfolioHasRegisteredTransactionInManyAccounts

	| firstPortfolio secondPortfolio thirdPortfolio firstAccount secondAccount firstTransaction secondTransaction |
	
	firstPortfolio := self createPortfolio.
	firstAccount := self createAccount.
	firstTransaction := Deposit register: 100 on: firstAccount.
	firstPortfolio add: firstAccount.
	
	secondPortfolio := self createPortfolio.
	secondAccount := self createAccount.
	secondTransaction := Deposit register: 300 on: secondAccount.
	secondPortfolio add: secondAccount.
	
	thirdPortfolio := self createPortfolio.
	thirdPortfolio add: firstPortfolio.
	thirdPortfolio add: secondPortfolio.
	
	self assert: (thirdPortfolio hasRegistered: firstTransaction).
	self assert: (thirdPortfolio hasRegistered: secondTransaction).!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:44:23'!
test03PortfolioBalanceEqualsManyAccountsBalance

	| portfolio firstAccount secondAccount |
	
	portfolio := self createPortfolio.
	
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio add: firstAccount.
	portfolio add: secondAccount.
	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03PortfolioBalanceEqualsMultipleAccountsBalance stamp: 'TM 5/22/2023 14:44:23'!
test03PortfolioBalanceEqualsMultipleAccountsBalance

	| portfolio firstAccount secondAccount |
	
	portfolio := self createPortfolio.
	
	firstAccount := self createAccount.
	Deposit register: 100 on: firstAccount.
	
	secondAccount := self createAccount.
	Deposit register: 200 on: secondAccount.
	
	portfolio add: firstAccount.
	portfolio add: secondAccount.
	
	self assert: (firstAccount balance + secondAccount balance) equals: portfolio balance.!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:45:04'!
test12PortfolioCannotAddExistingAccountInMultipleParents

	| parentPortfolio childPortfolio account |

	parentPortfolio := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	account := self createAccount.
	
	parentPortfolio add: account.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

! !
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:45:11'!
test13PortfolioCannotAddExistingAccountInAncestor

	| grandparentPortfolio parentPortfolio childPortfolio account |

	grandparentPortfolio := self createPortfolio.
	parentPortfolio  := self createPortfolio.	
	childPortfolio  := self createPortfolio.	

	account := self createAccount.	
	grandparentPortfolio add: account.
	
	grandparentPortfolio add: parentPortfolio.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

! !

!methodRemoval: PortfolioTest #test12PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:45:11'!
test12PortfolioCannotAddExistingAccountInAncestor

	| grandparentPortfolio parentPortfolio childPortfolio account |

	grandparentPortfolio := self createPortfolio.
	parentPortfolio  := self createPortfolio.	
	childPortfolio  := self createPortfolio.	

	account := self createAccount.	
	grandparentPortfolio add: account.
	
	grandparentPortfolio add: parentPortfolio.
	parentPortfolio add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

!
!PortfolioTest methodsFor: 'tests' stamp: 'TM 5/22/2023 14:46:19' prior: 50874911!
test12PortfolioCannotAddExistingAccountInMultipleParents

	| parentPortfolio1 parentPortfolio2 childPortfolio account |

	parentPortfolio1 := self createPortfolio.
	parentPortfolio2 := self createPortfolio.
	childPortfolio  := self createPortfolio.	
	
	account := self createAccount.
	parentPortfolio1 add: account.
	
	parentPortfolio1 add: childPortfolio.
	parentPortfolio2 add: childPortfolio.

	self
		should: [	childPortfolio add: account.]
		raise: Error 
		withMessageText: Portfolio cannotAddExistingAssetErrorDescription 

! !

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInMultipleParents stamp: 'TM 5/22/2023 14:46:22'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInMultipleParents stamp: 'TM 5/22/2023 14:46:22'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenCreated stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsManyAccountsBalance stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasNotRegisteredTransaction stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInManyAccounts stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInMultipleParents stamp: 'TM 5/22/2023 14:46:57'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:46:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInMultipleParents stamp: 'TM 5/22/2023 14:46:57'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroBalanceWhenCreated stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceEqualsOneAccountBalance stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceEqualsManyAccountsBalance stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasNotRegisteredTransaction stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionInOneAccount stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInManyAccounts stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioTransactionsEqualAssetsTransactions stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCannotAddItself stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCannotAddExistingAccount stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCannotAddExistingAccountInChild stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotAddExistingAccountInParent stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInMultipleParents stamp: 'TM 5/22/2023 14:47:02'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCannotAddExistingAccountInAncestor stamp: 'TM 5/22/2023 14:47:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotAddExistingAccountInMultipleParents stamp: 'TM 5/22/2023 14:47:02'!
FAILURE!

----SNAPSHOT----(22 May 2023 14:50:26) CuisUniversity-5706.image priorSource: 17287382!